

#include "x2b_A1B2Z2_C1_deg5_v1x.h" 
 

////////////////////////////////////////////////////////////////////////////////

namespace {

struct variable {
    double v_exp0(const double& r0, const double& k,
                 const double * p1, const double * p2 );
                 
    double v_exp(const double& k,
                 const double * p1, const double * p2 );

    double v_coul0(const double& r0, const double& k,
                  const double * p1, const double * p2 );
                  
    double v_coul(const double& k,
                  const double * p1, const double * p2 );

    double v_gau0(const double& r0, const double& k,
                 const double * p1, const double * p2 );
                  
    void grads(const double& gg, double * grd1, double * grd2,
               const double * p1, const double * p2);

    double g[3]; // diff(value, p1 - p2)
};

//----------------------------------------------------------------------------//

double variable::v_gau0(const double& r0, const double& k,
                       const double * p1, const double * p2)
{
    g[0] = p1[0] - p2[0];
    g[1] = p1[1] - p2[1];
    g[2] = p1[2] - p2[2];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(-k*(r0 - r)*(r0 - r));
    const double gg = 2*k*(r0 - r)*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp0(const double& r0, const double& k,
                       const double * p1, const double * p2)
{
    g[0] = p1[0] - p2[0];
    g[1] = p1[1] - p2[1];
    g[2] = p1[2] - p2[2];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(r0 - r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp(const double& k,
                       const double * p1, const double * p2)
{
    g[0] = p1[0] - p2[0];
    g[1] = p1[1] - p2[1];
    g[2] = p1[2] - p2[2];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(- r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //


double variable::v_coul(const double& k,
                        const double * p1, const double * p2)
{
    g[0] = p1[0] - p2[0];
    g[1] = p1[1] - p2[1];
    g[2] = p1[2] - p2[2];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(-r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul0(const double& r0, const double& k,
                        const double * p1, const double * p2)
{
    g[0] = p1[0] - p2[0];
    g[1] = p1[1] - p2[1];
    g[2] = p1[2] - p2[2];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(r0 - r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//----------------------------------------------------------------------------//

void variable::grads(const double& gg, double * grd1, double * grd2, 
                     const double * p1, const double * p2) {
    for (size_t i = 0; i < 3 ; i++) {
        double d = gg*g[i];
        grd1[i] += d;
        grd2[i] -= d;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh,
               const double& in_plane_g, const double& out_of_plane_g,
               double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2,
               const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* x1, double* x2)
{
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {
        oh1[1]*oh2[2] - oh1[2]*oh2[1],
        oh1[2]*oh2[0] - oh1[0]*oh2[2],
        oh1[0]*oh2[1] - oh1[1]*oh2[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5*in_plane_g*(oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g*v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const
{
    const double gm[3] = {
        g1[0] - g2[0],
        g1[1] - g2[1],
        g1[2] - g2[2]
    };

    const double t1[3] = {
        oh2[1]*gm[2] - oh2[2]*gm[1],
        oh2[2]*gm[0] - oh2[0]*gm[2],
        oh2[0]*gm[1] - oh2[1]*gm[0]
    };

    const double t2[3] = {
        oh1[1]*gm[2] - oh1[2]*gm[1],
        oh1[2]*gm[0] - oh1[0]*gm[2],
        oh1[0]*gm[1] - oh1[1]*gm[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5*in_plane_g*gsum;

        const double gh1 = in_plane + out_of_plane_g*t1[i];
        const double gh2 = in_plane - out_of_plane_g*t2[i];

        grd[i + 0] += gsum - (gh1 + gh2); // O
        grd[i + 3] += gh1; // H1
        grd[i + 6] += gh2; // H2
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

//struct vsites {
//    //void TwoParticleAverageSite() {}
//    //void ThreeParticleAverageSite() {}
//    void OutOfPlaneSite(const double& w12, const double& w13,
//                        const double& wcross, const double x1[3],
//                        const double y1[3], const double y2[3],
//                        double vs[3]);
//    //void LocalCoordinatesSite{}
//};
//
//void vsites::OutOfPlaneSite(const double& w12,
//                            const double& w13,
//                            const double& wcross,
//                            const double x1[3],
//                            const double y1[3],
//                            const double y2[3],
//                            double vs[3]) {
//    double r12[3], r13[3];
//
//    for (int i = 0; i < 3; ++i) {
//        r12[i] = y1[i] - x1[i];
//        r13[i] = y2[i] - x1[i];
//    }
//                            
//    double rc[3];
//    rc[0] = r12[1]*r13[2] - r12[2]*r13[1];
//    rc[1] = r12[2]*r13[0] - r12[0]*r13[2];
//    rc[2] = r12[0]*r13[1] - r12[1]*r13[0];
//    
//    vs[0] = x1[0] + w12 * r12[0] + w13 * r13[0] + wcross * rc[0];
//    vs[1] = x1[1] + w12 * r12[1] + w13 * r13[1] + wcross * rc[1];
//    vs[2] = x1[2] + w12 * r12[2] + w13 * r13[2] + wcross * rc[2];
//}

} // namespace

////////////////////////////////////////////////////////////////////////////////

namespace x2b_A1B2Z2_C1_deg5 {

//----------------------------------------------------------------------------//

x2b_A1B2Z2_C1_v1x::x2b_A1B2Z2_C1_v1x(std::string mon1, std::string mon2) {

    // =====>> SECTION CONSTRUCTOR <<=====
    // =>> PASTE RIGHT BELOW THIS LINE <==
    if (mon1 == "h2o" && mon2  == "he") {

        m_k_intra_AB =  3.508775028719293e-03; // A^(-1))
        m_k_intra_BB =  2.754491059307637e-02; // A^(-1))
        m_k_AC =  2.291365738385344e-01; // A^(-1))
        m_k_BC =  7.249481919751055e-01; // A^(-1))
        m_k_CZ =  1.496283150810939e-01; // A^(-1))
        m_r2i =  9.500000000000000e+00; // A
        m_r2f =  1.050000000000000e+01; // A

        coefficients = std::vector<double> {
            1.047619891465483e+01, // 0
           -5.592933284653361e+00, // 1
            1.717035630623917e+00, // 2
            3.478060071452401e+00, // 3
            5.442403051179332e+00, // 4
           -1.600797982203206e+01, // 5
            8.528816153388528e+00, // 6
            4.660765288707815e+00, // 7
           -1.019523803350925e+01, // 8
            6.747169869426612e+00, // 9
           -8.087793749227606e+00, // 10
            2.935672832365295e+00, // 11
           -3.424908606682914e+00, // 12
            1.093390964111452e+01, // 13
           -1.960474181248254e-01, // 14
            8.441442572822030e+00, // 15
           -1.426948030931950e+00, // 16
           -2.501495856062405e+00, // 17
            2.050201029044141e+01, // 18
            2.442481818876464e+00, // 19
            4.810199126368429e+00, // 20
            5.028177077405625e+00, // 21
            4.473043583170087e+01, // 22
            1.411929821136961e+01, // 23
           -8.073648328775960e+00, // 24
            1.998785502860802e+00, // 25
            4.188544030018566e+00, // 26
           -1.303780311691635e+01, // 27
           -3.877505351298825e+00, // 28
           -5.008553120280332e+00, // 29
            7.719879485538930e+00, // 30
           -1.094844808823507e+01, // 31
           -2.840855615527235e+01, // 32
            5.162527192819694e+01, // 33
            1.182170765635817e+00, // 34
           -3.317261094300446e-01, // 35
           -2.505153096595258e+00, // 36
            4.009188393755934e+00, // 37
           -2.979840001522120e+01, // 38
            4.361262883955164e+00, // 39
           -3.979439523746721e+01, // 40
            7.364036186615096e+00, // 41
           -5.798770276209423e+00, // 42
            1.166464060225255e+02, // 43
           -1.114742384483586e+00, // 44
           -1.475031895407272e+01, // 45
           -3.942888453678877e+00, // 46
            9.533068848905680e+00, // 47
           -3.596083725336976e+01, // 48
           -1.327802553956993e+00, // 49
           -2.088971525259662e+01, // 50
            4.174715808027067e+01, // 51
           -1.015262222632458e+00, // 52
            6.420924629490917e+00, // 53
            2.652328797760714e+00, // 54
           -3.084624299932218e+01, // 55
           -2.792306690950581e+00, // 56
           -6.371718393985734e+01, // 57
           -6.127717205352284e+00, // 58
            4.282767986372363e+00, // 59
           -6.541417235307753e+01, // 60
            1.220327772934842e+00, // 61
           -8.470963228012010e-01, // 62
           -2.292611247594510e+01, // 63
           -1.920973794318470e+01, // 64
            5.660286134721768e+00, // 65
            7.582308822773095e+01, // 66
            5.709461753181757e+00, // 67
           -4.366749167643710e+01, // 68
            9.763536561133947e+01, // 69
           -6.448646696899397e+01, // 70
           -8.845382967492526e+00, // 71
           -2.570019495616331e+01, // 72
           -2.889617117052240e+00, // 73
            9.562929364977032e+00, // 74
            1.954462045620424e+00, // 75
           -1.169631722582694e+01, // 76
            4.462900242429689e+01, // 77
           -1.421171477154749e+00, // 78
            6.322164672665651e+00, // 79
            1.914532617369065e+01, // 80
           -3.172626545768756e+01, // 81
            4.414569934613582e+00, // 82
            4.233680246016517e+00, // 83
           -1.411623479493569e+01, // 84
            4.152857730949442e+01, // 85
           -6.303622191946479e+01, // 86
           -5.091787842390972e+01, // 87
           -4.624938543208151e-01, // 88
           -2.292179030512292e+01, // 89
           -1.121015820278281e+01, // 90
            3.561534351817518e+00, // 91
            1.045335216270154e+02, // 92
            8.245298957982368e+01, // 93
           -3.633394682891913e+01, // 94
           -3.990178687842575e+01, // 95
           -4.344583001766976e+00, // 96
            1.104000359550617e+01, // 97
            1.950822159317334e+00, // 98
           -1.311620958586792e+02, // 99
            6.916702117430908e+00, // 100
           -3.865864765928855e+01, // 101
           -6.387258430904799e+01, // 102
           -5.528374264393681e+01, // 103
            3.429345085312808e+00, // 104
            9.572579819844700e+00, // 105
            1.355376340526917e+01, // 106
            2.180710905137487e+00, // 107
            1.209370751950300e+01, // 108
           -4.104660878202679e+00, // 109
            9.316317818245398e+01, // 110
            4.359703640491068e+01, // 111
            5.254038696144478e+01, // 112
           -3.840425037803715e+01, // 113
           -6.532687527363191e+01, // 114
           -1.318582639780055e+00, // 115
            8.463937473946285e-01, // 116
           -1.948059619707727e+00, // 117
           -4.832080142864875e+00, // 118
           -3.457058125881049e+00, // 119
            1.145261680412172e+02, // 120
            1.525148432418831e+02, // 121
           -3.538432850207552e+01, // 122
            7.220175142078011e-01, // 123
           -8.659307643541218e-01, // 124
           -1.017377522557865e+01, // 125
           -2.759491257287530e+01, // 126
           -3.997885441179304e+01, // 127
           -9.233062221578234e-01, // 128
            4.756395321877989e+01, // 129
           -6.494844568916944e-01, // 130
            3.270103507589229e+01, // 131
           -1.080572949530245e+01, // 132
            5.981635007359856e+01, // 133
            1.891623078163006e-01, // 134
           -2.122435375239316e+01, // 135
            1.378730498804651e+01, // 136
           -6.850530346346320e+00, // 137
            4.470082756110146e+01, // 138
           -1.530853711567288e+01, // 139
            1.004361175562624e+01, // 140
           -1.031236980948899e+01, // 141
           -1.951553700383321e+00, // 142
           -8.800916884989700e+00, // 143
            2.886823496089298e+00, // 144
            1.158041708160263e+02, // 145
            1.551574143190835e+00, // 146
            2.157913030888344e+00, // 147
           -1.677938729199527e+01, // 148
            4.980508335600835e+01, // 149
           -2.882827684159743e+01, // 150
           -3.581903309520713e+01, // 151
           -7.109758216597540e+00, // 152
            4.055119515295424e+00, // 153
           -3.097016173238291e+00, // 154
           -3.355896678056298e+01, // 155
            1.118491330216863e+02, // 156
            3.513918042047232e+01, // 157
           -3.954920542443490e+01, // 158
            3.258814952183082e+01, // 159
            9.269551918537802e+01, // 160
            2.162987116590357e+00, // 161
           -1.514561847572370e+01, // 162
           -1.377879402740909e+01, // 163
           -7.296112999797436e-01, // 164
           -9.242164266618058e+00, // 165
           -3.713965725785687e+01, // 166
           -1.541538297702034e+01, // 167
           -3.185398134718239e+01, // 168
            9.686078600429370e+00, // 169
           -9.488242172444471e-01, // 170
            9.328315892242317e-01, // 171
           -6.080161767872038e+01, // 172
            6.046350878603755e+00, // 173
            6.580171243366059e-01, // 174
           -2.042512055907378e+01, // 175
           -1.586084946354713e+01, // 176
           -1.286748021592243e+01, // 177
           -1.359713404517231e+01, // 178
           -5.922985458806849e+00, // 179
           -4.073764505049179e+01, // 180
           -1.379767152302846e+01, // 181
            4.230496963546021e+01, // 182
            4.239133389806573e+01, // 183
            9.406621834764912e-02, // 184
           -6.593993096633447e+01, // 185
           -9.807885736169388e+01, // 186
            6.215402892067583e+01, // 187
           -1.699697217156434e+01, // 188
           -2.451304816271987e+00, // 189
            8.787625350613896e-01, // 190
           -5.296975783385911e+01, // 191
            2.232105429773981e+01, // 192
            6.638415535512746e+01, // 193
           -1.297216285895154e+00, // 194
            3.287739550760464e+00, // 195
           -1.444916367415741e+00, // 196
            1.522026892998290e+01, // 197
            4.387565136653851e+00, // 198
            5.109318227143875e+01, // 199
            1.444338587418674e+01, // 200
           -1.957599884024636e+00, // 201
            1.379023182005369e+01, // 202
            2.009510693721779e+00, // 203
           -1.375868934814850e+01, // 204
           -6.725193603770355e-01, // 205
            6.381913116095091e+00, // 206
           -3.586735387829302e+01, // 207
            3.297748032158554e-01, // 208
           -5.788179446797186e+00, // 209
            1.098157319061988e+02, // 210
           -5.065278118510653e+00, // 211
            1.855156106347434e+02, // 212
           -2.633540961384558e+00, // 213
            4.465589384964719e+01, // 214
           -9.484691230061104e+01, // 215
            1.318759818829471e+02, // 216
            8.540558076596459e+01, // 217
           -6.402611908078936e+01, // 218
            1.466136634755235e+00, // 219
           -1.188964359827051e+01, // 220
            1.349878660800292e+01, // 221
           -3.988943268310353e+01, // 222
           -2.472761828956330e+00, // 223
           -1.255700954000611e-01, // 224
           -8.666521685520644e+00, // 225
           -2.074844296939038e+01, // 226
            1.463610829499042e+01, // 227
            1.097139940640659e+00, // 228
            5.818834202003541e+00, // 229
            7.848046834480701e+01, // 230
           -1.732871459754653e+01, // 231
            4.034506436106955e+01, // 232
            1.088548401602062e+00, // 233
           -7.273370976087504e+00, // 234
           -2.493960746432313e+01, // 235
            2.496137644102318e+01, // 236
            3.263979060602523e+01, // 237
           -1.321780480365074e+02, // 238
            4.349926864094842e+01, // 239
           -3.706380735512174e+01, // 240
            1.093771488554786e+00, // 241
           -3.308177134179517e+01, // 242
           -1.060744295746034e+01, // 243
           -6.547560573680933e+01, // 244
           -2.627906967702628e+00, // 245
           -6.394021747276081e+01, // 246
            5.632000838082318e+00, // 247
           -6.301640109274680e+01, // 248
           -6.609709740928755e+00, // 249
           -6.696575947792980e+00, // 250
            1.775943642752307e+02, // 251
           -2.036492009847257e+01, // 252
           -6.959454325325079e+01, // 253
           -6.462330532704783e+01, // 254
           -2.945072277513100e+00, // 255
           -1.658969585567128e+01, // 256
           -6.493943716384956e+01, // 257
           -6.393101392152835e+01, // 258
            1.631162301709300e+02, // 259
           -1.451449462819601e+01, // 260
            1.697038748464399e+00, // 261
            5.007479117274706e+00, // 262
            1.199453171004558e+01, // 263
           -6.601874848962370e+01, // 264
           -6.692483264295196e+01, // 265
           -5.550856392251138e+01, // 266
           -3.670405593252600e+01, // 267
           -2.126650102315943e+00, // 268
            8.635402735740290e+01, // 269
            2.593503246463827e+00, // 270
           -1.745588173138318e+01, // 271
           -2.155625919095738e+01, // 272
           -6.242427431763875e+00, // 273
           -3.757025148218255e+00, // 274
           -8.849375670692420e+01, // 275
           -9.395166070003516e+00, // 276
            6.008142386177965e+01, // 277
            1.533759684985917e+02, // 278
           -7.153186283142974e+00, // 279
           -2.702961938174839e+01, // 280
            5.311165633694766e+01, // 281
            6.608007694539657e+01, // 282
            4.398474440373346e+01, // 283
           -6.574605451078730e+01, // 284
            4.768843172198315e+01, // 285
            2.012862095452664e+00, // 286
           -3.700572027008412e+01, // 287
           -3.619094846841400e+01, // 288
           -1.017154252250506e+01, // 289
            1.073680234208362e+02, // 290
            1.249048136488786e+02, // 291
           -1.065094348739287e+01, // 292
           -1.586258605769395e+01, // 293
            8.140429324534189e+00, // 294
            1.299192642959074e+01, // 295
            9.199000234987189e+01, // 296
            3.035973193685233e+02, // 297
           -1.340565700084520e+01, // 298
           -2.191252830358686e+01, // 299
           -4.149647392964953e+01, // 300
            4.502501873083097e+01, // 301
            3.575683242952041e+01, // 302
            9.837415132605383e+00, // 303
           -1.875943092540077e+01, // 304
           -1.351907080871859e+01, // 305
            2.643249261490665e+01, // 306
            2.422303683538959e+00, // 307
           -6.626256798642545e+01, // 308
            3.444883759016775e+00, // 309
           -2.576983751754483e+01, // 310
           -1.879430115600034e+01, // 311
            5.287607270673290e+00, // 312
           -4.379711856676431e+00, // 313
            2.877427544576759e+01, // 314
           -3.193883624647096e+01, // 315
           -2.108050483933004e+02, // 316
           -1.688991299074506e+01, // 317
            7.321614983753506e-01, // 318
           -1.043959953562119e+01, // 319
           -2.160189665519399e+01, // 320
            4.990958111964252e+01, // 321
            5.638803572367080e-01, // 322
            9.719007913967171e+01, // 323
            3.164951678196188e+01, // 324
           -1.449524720974410e+02, // 325
            6.119253034728390e+00, // 326
            6.748911138743902e+00, // 327
           -1.254680389762605e+01, // 328
           -1.314920090176280e+02, // 329
           -1.481707355223805e+01, // 330
           -2.472030941207637e+00, // 331
           -1.550286593999320e+01, // 332
            1.471577545638892e+00, // 333
           -3.838818875600008e+01, // 334
           -2.047286008797803e+01, // 335
           -2.540542928310793e+01, // 336
           -3.380408254415143e+01, // 337
           -2.762870915684184e+01, // 338
            3.893064237099577e+01, // 339
           -3.500666504024999e+00, // 340
           -1.317264553526981e+00, // 341
            7.714272137262296e-01, // 342
            1.694986130823305e+00, // 343
            1.914143576753980e+01, // 344
            9.288230274999584e+01, // 345
            4.516717817089806e+01, // 346
           -4.267609918637476e+01, // 347
            3.959770343920596e-01, // 348
           -8.806797817860712e+00, // 349
           -5.802296656154554e+01, // 350
           -2.465111647936005e+01, // 351
           -1.322244412705830e+00, // 352
           -2.470601549975215e+00, // 353
           -1.535273384644041e+01, // 354
           -7.839753528339179e+01, // 355
            9.200204991192616e+01, // 356
           -1.745982033452548e+00, // 357
            1.205565559863957e+02, // 358
           -6.471831427357880e-01, // 359
            2.675602553981578e+00, // 360
           -5.483108346319526e+00, // 361
            8.775289976308388e+00, // 362
           -4.862585306066389e+01, // 363
            4.858542377925676e+01, // 364
            4.547559590940061e+00, // 365
           -1.742488923342137e+00, // 366
           -6.623435588182542e+01, // 367
            2.179696898193373e+01, // 368
            3.385891963592661e+01, // 369
           -3.567772720942693e+01, // 370
            8.557397655527351e+00, // 371
            2.861857822766695e+01, // 372
           -2.867489386391469e+00, // 373
            1.009812644139198e-01, // 374
           -1.023890958878646e+01, // 375
            6.931321835211077e+01, // 376
           -8.549518282418214e+00, // 377
           -1.243887341999646e+01, // 378
           -5.991591348436273e+01, // 379
            1.008450126589410e+02, // 380
            1.546346248479176e+01, // 381
            9.156715917900137e+00, // 382
           -1.064816980886762e+02, // 383
           -4.205502386311029e+01, // 384
           -8.759197312400548e+00, // 385
            9.231065006711577e+01, // 386
            4.247092181383061e+01, // 387
           -3.939532199272166e+01, // 388
            1.779772031985074e+01, // 389
           -8.830338712609411e+00, // 390
           -2.540628734396473e+01, // 391
           -1.601678351689730e+01, // 392
           -2.324820301605675e+01, // 393
           -3.301568061306897e+01, // 394
           -1.008587192965029e+02, // 395
           -5.038097562085874e+01, // 396
           -4.167400940319948e+01, // 397
            7.676728085147835e+00, // 398
           -3.193291686120859e+01, // 399
           -1.843574302296341e+00, // 400
           -1.253741284549795e+01, // 401
           -2.077723947499096e+01, // 402
            8.011884395937818e-03, // 403
           -4.000796189279075e+01, // 404
            1.268300642405169e+02, // 405
           -1.843144514020181e+00, // 406
           -2.973825071140674e+01, // 407
            1.232759620412620e+01, // 408
           -4.755529435856730e+01, // 409
           -2.920264400952284e+01, // 410
            8.141783986983100e+01, // 411
           -2.599986389525699e+01, // 412
           -3.140669490765233e+00, // 413
           -9.037942114633333e+00, // 414
           -1.152126243921741e+01, // 415
           -1.901116882573307e+00, // 416
           -3.850619942706252e+01, // 417
            7.668798084264310e+01, // 418
           -1.956001242781243e+02, // 419
           -2.541786513292243e+01, // 420
            1.136925852697793e+02, // 421
            2.221792605381402e+00, // 422
            9.769711425094056e-01, // 423
            1.322463556188817e+01, // 424
            1.058073501585983e+02, // 425
           -2.669930352752518e+01, // 426
           -8.154411991648328e+00, // 427
           -5.418556739408847e+01, // 428
            4.452784167756214e+01, // 429
            3.913865496486218e+01, // 430
            5.201011831668283e+01, // 431
           -3.930821635229954e+01, // 432
           -6.565288903681380e+01, // 433
           -5.376001951206851e+01, // 434
            4.723753849273180e+01, // 435
            1.909728846798037e+01, // 436
           -1.793397835539787e+01, // 437
           -4.817590170436723e+00, // 438
            2.906474809740898e+01, // 439
           -4.517409849530057e+01, // 440
            5.290338327290112e+01, // 441
            8.857880996766308e+01, // 442
            1.463811292672029e+01, // 443
            7.722820352702131e+01, // 444
           -2.688001585288604e+01, // 445
           -5.085874448314919e+00, // 446
           -9.979046722717738e+00, // 447
           -6.707743239001290e+00, // 448
           -1.051221383321633e+02, // 449
            1.366983768570001e-01, // 450
            7.689125067690664e-01, // 451
            1.345742506952996e+01, // 452
           -2.763645262650223e+01, // 453
            7.052949644485939e+01, // 454
            9.380811104821374e+00, // 455
            3.349474189549952e+01, // 456
            5.434036859991549e-01, // 457
            3.916564543049583e+01, // 458
           -6.625813737743006e+00, // 459
            1.110420183248329e+02, // 460
           -1.320381878009099e+02, // 461
           -7.752027824769236e+01, // 462
           -9.523049669548511e+00, // 463
           -1.120956954751382e+00, // 464
           -9.833289065640724e+00, // 465
           -5.807868642651756e+01, // 466
            5.774444705976917e+01, // 467
            1.779738842090345e+01, // 468
            4.113202585129107e+01, // 469
           -1.722473719955176e+01, // 470
            2.502933133022188e+00, // 471
           -2.852788744081074e+02, // 472
           -2.064671602835076e+01, // 473
            3.027825763889815e+00, // 474
            4.070887043424175e+01, // 475
            1.167203396319995e+00, // 476
           -4.084105031105870e+01, // 477
            9.659306149828835e+01, // 478
            8.440462364895650e+01, // 479
           -3.178916290604019e+01, // 480
           -6.231326913221431e+00, // 481
            1.124190448969265e+02, // 482
            1.149663798368396e+02, // 483
           -5.482873441240380e+01, // 484
            1.159528987641210e+02, // 485
           -2.995801365673218e+01, // 486
           -1.083194131399424e+01, // 487
           -1.866447729800995e+01, // 488
           -6.185230614139476e+01, // 489
           -3.445475464574990e+00, // 490
            4.849144062650989e+01, // 491
           -1.434585682620413e+00, // 492
           -3.933101942469087e+01, // 493
           -4.490626401632112e+01, // 494
           -3.586109321574056e+01}; // 495


    } // if mon1 == "h2o" && mon2  == "he"

}

//----------------------------------------------------------------------------//

double x2b_A1B2Z2_C1_v1x::f_switch(const double& r, double& g) const
{
    if (r > m_r2f) {
        g = 0.0;
        return 0.0;
    } else if (r > m_r2i) {
        const double t1 = M_PI/(m_r2f - m_r2i);
        const double x = (r - m_r2i)*t1;
        g = - std::sin(x)*t1/2.0;
        return (1.0 + std::cos(x))/2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

double x2b_A1B2Z2_C1_v1x::eval(const double* xyz1, const double* xyz2, const size_t ndim) const
{

    std::vector<double> energies(ndim,0.0);

    for (size_t j = 0; j < ndim; j++) {
        double mon1[9];
        double mon2[3];

        std::copy(xyz1 + j * 9, xyz1 + (j+1) * 9, mon1);
        std::copy(xyz2 + j * 3, xyz2 + (j+1) * 3, mon2);

        // Right now it assumes 1st atom of each monomer
        const double d12[3] = {mon1[0] -  mon2[0],
                               mon1[1] -  mon2[1],
                               mon1[2] -  mon2[2]};
    
        const double r12sq = d12[0]*d12[0] + d12[1]*d12[1] + d12[2]*d12[2];
        const double r12 = std::sqrt(r12sq);
    
        if (r12 > m_r2f)
            continue;
    
        double xcrd[12]; // coordinates of real sites ONLY
    
        std::copy(mon1, mon1 + 9, xcrd);
        std::copy(mon2, mon2 + 3, xcrd + 9);
        
        double v[8];
        
        double sw = 0.0;
        double gsw = 0.0;
    
        const double* A_1_a= xcrd + 0;
        const double* B_1_a= xcrd + 3;
        const double* B_2_a= xcrd + 6;

        double Z_1_a[3];
        double Z_2_a[3];

        const double* C_1_b= xcrd + 9;



        // vsites virt;
        double w12 =     -9.721486914088159e-02;  //from MBpol
        double w13 =     -9.721486914088159e-02;
        double wcross =   9.859272078406150e-02;

        monomer m;
        
        m.setup(A_1_a, w12, wcross,
                 Z_1_a, Z_2_a);
                        
        variable vr[8];
    
        v[0]  = vr[0].v_exp(m_k_intra_AB, A_1_a, B_1_a);
        v[1]  = vr[1].v_exp(m_k_intra_AB, A_1_a, B_2_a);
        v[2]  = vr[2].v_exp(m_k_intra_BB, B_1_a, B_2_a);
        v[3]  = vr[3].v_exp(m_k_AC, A_1_a, C_1_b);
        v[4]  = vr[4].v_exp(m_k_BC, B_1_a, C_1_b);
        v[5]  = vr[5].v_exp(m_k_BC, B_2_a, C_1_b);
        v[6]  = vr[6].v_coul(m_k_CZ, Z_1_a, C_1_b);
        v[7]  = vr[7].v_coul(m_k_CZ, Z_2_a, C_1_b);
     
    
        sw = f_switch(r12, gsw);
        
        energies[j] = sw*polynomial::eval(coefficients.data(), v);
    }

    double energy = 0.0;
    for (size_t i = 0; i < ndim; i++) {
      energy += energies[i];
    }

    return energy;
    
}

double x2b_A1B2Z2_C1_v1x::eval(const double* xyz1, const double* xyz2, 
                double * grad1, double * grad2, const size_t ndim, std::vector<double> *virial) const
{

    std::vector<double> energies(ndim,0.0);

    for (size_t j = 0; j < ndim; j++) {
        double mon1[9];
        double mon2[3];

        std::copy(xyz1 + j * 9, xyz1 + (j+1) * 9, mon1);
        std::copy(xyz2 + j * 3, xyz2 + (j+1) * 3, mon2);

        // Right now it assumes 1st atom of each monomer
        const double d12[3] = {mon1[0] -  mon2[0],
                               mon1[1] -  mon2[1],
                               mon1[2] -  mon2[2]};
    
        const double r12sq = d12[0]*d12[0] + d12[1]*d12[1] + d12[2]*d12[2];
        const double r12 = std::sqrt(r12sq);
    
        if (r12 > m_r2f)
            continue;
    
        double xcrd[12]; // coordinates of real sites ONLY
    
        std::copy(mon1, mon1 + 9, xcrd);
        std::copy(mon2, mon2 + 3, xcrd + 9);
        
        double v[8];
        
        double sw = 0.0;
        double gsw = 0.0;
    
        const double* A_1_a= xcrd + 0;
        const double* B_1_a= xcrd + 3;
        const double* B_2_a= xcrd + 6;

        double Z_1_a[3];
        double Z_2_a[3];

        const double* C_1_b= xcrd + 9;



        //vsites virt;
        double w12 =     -9.721486914088159e-02;  //from MBpol
        double w13 =     -9.721486914088159e-02;
        double wcross =   9.859272078406150e-02;

        monomer m;
        
        m.setup(A_1_a, w12, wcross, 
                 Z_1_a, Z_2_a);
                        
        variable vr[8];
    
        v[0]  = vr[0].v_exp(m_k_intra_AB, A_1_a, B_1_a);
        v[1]  = vr[1].v_exp(m_k_intra_AB, A_1_a, B_2_a);
        v[2]  = vr[2].v_exp(m_k_intra_BB, B_1_a, B_2_a);
        v[3]  = vr[3].v_exp(m_k_AC, A_1_a, C_1_b);
        v[4]  = vr[4].v_exp(m_k_BC, B_1_a, C_1_b);
        v[5]  = vr[5].v_exp(m_k_BC, B_2_a, C_1_b);
        v[6]  = vr[6].v_coul(m_k_CZ, Z_1_a, C_1_b);
        v[7]  = vr[7].v_coul(m_k_CZ, Z_2_a, C_1_b);
     
    
        double g[8];

        // the switch
        sw = f_switch(r12, gsw);
        
        energies[j] = polynomial::eval(coefficients.data(), v, g);
        
        double xgrd[18];
        std::fill(xgrd, xgrd + 18, 0.0);

        double* A_1_a_g= xgrd + 0;
        double* B_1_a_g= xgrd + 3;
        double* B_2_a_g= xgrd + 6;

        double* C_1_b_g= xgrd + 9;

        double* Z_1_a_g= xgrd + 12;
        double* Z_2_a_g= xgrd + 15;


        vr[0].grads(g[0], A_1_a_g, B_1_a_g, A_1_a, B_1_a);
        vr[1].grads(g[1], A_1_a_g, B_2_a_g, A_1_a, B_2_a);
        vr[2].grads(g[2], B_1_a_g, B_2_a_g, B_1_a, B_2_a);
        vr[3].grads(g[3], A_1_a_g, C_1_b_g, A_1_a, C_1_b);
        vr[4].grads(g[4], B_1_a_g, C_1_b_g, B_1_a, C_1_b);
        vr[5].grads(g[5], B_2_a_g, C_1_b_g, B_2_a, C_1_b);
        vr[6].grads(g[6], Z_1_a_g, C_1_b_g, Z_1_a, C_1_b);
        vr[7].grads(g[7], Z_2_a_g, C_1_b_g, Z_2_a, C_1_b);


    // ##DEFINE HERE## the redistribution of the gradients
    

        m.grads(Z_1_a_g, Z_2_a_g, 
                 w12, wcross, A_1_a_g);
    
    
        for (int i = 0; i < 9; ++i) {
            grad1[i + j*9] += sw*xgrd[i];
        }

        for (int i = 0; i < 3; ++i) {
            grad2[i + j*3] += sw*xgrd[i + 9];
        }

        // gradient of the switch

        gsw *= energies[j]/r12;
        for (int i = 0; i < 3; ++i) {
            const double d = gsw*d12[i];
            grad1[i + j*9] += d;
            grad2[i + j*3] -= d;
        }

        if (virial != 0) {
           (*virial)[0] -= xcrd[0] * grad1[0 + 9*j] +
                           xcrd[3] * grad1[3 + 9*j] +
                           xcrd[6] * grad1[6 + 9*j] +
                           xcrd[9] * grad2[0 + 3*j];

           (*virial)[1] -= xcrd[0] * grad1[1 + 9*j] +
                           xcrd[3] * grad1[4 + 9*j] +
                           xcrd[6] * grad1[7 + 9*j] +
                           xcrd[9] * grad2[1 + 3*j];

           (*virial)[2] -= xcrd[0] * grad1[2 + 9*j] +
                           xcrd[3] * grad1[5 + 9*j] +
                           xcrd[6] * grad1[8 + 9*j] +
                           xcrd[9] * grad2[2 + 3*j];

           (*virial)[4] -= xcrd[1] * grad1[1 + 9*j] +
                           xcrd[4] * grad1[4 + 9*j] +
                           xcrd[7] * grad1[7 + 9*j] +
                           xcrd[10] * grad2[1 + 3*j];

           (*virial)[5] -= xcrd[1] * grad1[2 + 9*j] +
                           xcrd[4] * grad1[5 + 9*j] +
                           xcrd[7] * grad1[8 + 9*j] +
                           xcrd[10] * grad2[2 + 3*j];

           (*virial)[8] -= xcrd[2] * grad1[2 + 9*j] +
                           xcrd[5] * grad1[5 + 9*j] +
                           xcrd[8] * grad1[8 + 9*j] +
                           xcrd[11] * grad2[2 + 3*j];


           (*virial)[3] = (*virial)[1];
           (*virial)[6] = (*virial)[2];
           (*virial)[7] = (*virial)[5];
        }

        energies[j] *= sw;

    }

    double energy = 0.0;
    for (size_t i = 0; i < ndim; i++) {
      energy += energies[i];
    }

    return energy;
}

} // namespace x2b_A1B2Z2_C1_deg5

////////////////////////////////////////////////////////////////////////////////
