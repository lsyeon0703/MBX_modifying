./bblock/sys_tools.h: * - switching function for many-body energy
./bblock/.deps/libmbx_la-external_call.Plo: potential/force_field/energyff.h potential/force_field/calculators.h \
./bblock/.deps/libmbx_la-external_call.Plo: tools/pbctools.h potential/1b/energy1b.h \
./bblock/.deps/libmbx_la-external_call.Plo: potential/1b/poly_1b_A1B2_deg6_vmbpbe.h potential/2b/energy2b.h \
./bblock/.deps/libmbx_la-external_call.Plo: potential/2b/poly_2b_A1B2Z2_A1B2Z2_deg4_vmbpbe.h potential/3b/energy3b.h \
./bblock/.deps/libmbx_la-external_call.Plo: potential/4b/energy4b.h \
./bblock/.deps/libmbx_la-external_call.Plo:potential/force_field/energyff.h:
./bblock/.deps/libmbx_la-external_call.Plo:potential/1b/energy1b.h:
./bblock/.deps/libmbx_la-external_call.Plo:potential/2b/energy2b.h:
./bblock/.deps/libmbx_la-external_call.Plo:potential/3b/energy3b.h:
./bblock/.deps/libmbx_la-external_call.Plo:potential/4b/energy4b.h:
./bblock/.deps/libmbx_la-system.Plo: potential/force_field/energyff.h potential/force_field/calculators.h \
./bblock/.deps/libmbx_la-system.Plo: tools/pbctools.h potential/1b/energy1b.h \
./bblock/.deps/libmbx_la-system.Plo: potential/1b/poly_1b_A1B2_deg6_vmbpbe.h potential/2b/energy2b.h \
./bblock/.deps/libmbx_la-system.Plo: potential/2b/poly_2b_A1B2Z2_A1B2Z2_deg4_vmbpbe.h potential/3b/energy3b.h \
./bblock/.deps/libmbx_la-system.Plo: potential/4b/energy4b.h \
./bblock/.deps/libmbx_la-system.Plo:potential/force_field/energyff.h:
./bblock/.deps/libmbx_la-system.Plo:potential/1b/energy1b.h:
./bblock/.deps/libmbx_la-system.Plo:potential/2b/energy2b.h:
./bblock/.deps/libmbx_la-system.Plo:potential/3b/energy3b.h:
./bblock/.deps/libmbx_la-system.Plo:potential/4b/energy4b.h:
Binary file ./bblock/libmbx_la-external_call.o matches
Binary file ./bblock/libmbx_la-system.o matches
./bblock/system.cpp:    // Reset energy and grads in system to 0
./bblock/system.cpp:    energy_ = 0.0;
./bblock/system.cpp:    // Call the get energy function
./bblock/system.cpp:    // Electrostatic energy
./bblock/system.cpp:    // Set up energy with the new value
./bblock/system.cpp:    energy_ = eff + e1b + e2b + e3b + e4b + edisp + ebuck + elj + Eelec;
./bblock/system.cpp:              << "Total = " << energy_ << std::endl;
./bblock/system.cpp:    return energy_;
./bblock/system.cpp:    // Reset energy and gradients
./bblock/system.cpp:    energy_ = 0.0;
./bblock/system.cpp:    // Calculate the 1b energy
./bblock/system.cpp:    energy_ = Get1B(do_grads);
./bblock/system.cpp:    return energy_;
./bblock/system.cpp:    // Reset energy and gradients
./bblock/system.cpp:    energy_ = 0.0;
./bblock/system.cpp:    // Calculate the 1b energy
./bblock/system.cpp:    energy_ = GetFF(do_grads);
./bblock/system.cpp:    return energy_;
./bblock/system.cpp:    // Loop overall the monomers and get their energy
./bblock/system.cpp:            // Get energy of the chunk as function of monomer
./bblock/system.cpp:                    eff += eff::get_ff_energy(bblock::System::connectivity_map_.at(mon), nmon, xyz, grad2, allMonGood_,
./bblock/system.cpp:                    // EY: ONLY get the energy
./bblock/system.cpp:                    eff += eff::get_ff_energy(bblock::System::connectivity_map_.at(mon), nmon, xyz, allMonGood_,
./bblock/system.cpp:    // Loop overall the monomers and get their energy
./bblock/system.cpp:            // Get energy of the chunk as function of monomer
./bblock/system.cpp:                e1b += e1b::get_1b_energy(mon, nmon, xyz, grad2, indexes, &virial_);
./bblock/system.cpp:                e1b += e1b::get_1b_energy(mon, nmon, xyz, indexes);
./bblock/system.cpp:    // Reset energy and gradients
./bblock/system.cpp:    energy_ = 0.0;
./bblock/system.cpp:    // Calculate the 2b energy
./bblock/system.cpp:    energy_ = Get2B(do_grads, use_ghost);
./bblock/system.cpp:    return energy_;
./bblock/system.cpp:                        e2b_pool[rank] += e2b::get_2b_energy(m1, m2, nd, xyz1, xyz2, grad1, grad2, &virial);
./bblock/system.cpp:                        e2b_pool[rank] += e2b::get_2b_energy(m1, m2, nd, xyz1, xyz2);
./bblock/system.cpp:    // Condensate energy
./bblock/system.cpp:    energy_ = 0.0;
./bblock/system.cpp:    energy_ = Get3B(do_grads, use_ghost);
./bblock/system.cpp:    return energy_;
./bblock/system.cpp:    energy_ = 0.0;
./bblock/system.cpp:        energy_ = Get4B(do_grads, use_ghost);
./bblock/system.cpp:    return energy_;
./bblock/system.cpp:                        e3b_pool[rank] += e3b::get_3b_energy(m1, m2, m3, nt, xyz1, xyz2, xyz3, grad1, grad2, grad3, &virial);
./bblock/system.cpp:                        e3b_pool[rank] += e3b::get_3b_energy(m1, m2, m3, nt, xyz1, xyz2, xyz3);
./bblock/system.cpp:    // Condensate energy
./bblock/system.cpp:                    double e = e4b::get_4b_energy(ms[0], ms[1], ms[2], ms[3], 1, coords[0], coords[1], coords[2],
./bblock/system.cpp:                        e4b::get_4b_energy(ms[0], ms[1], ms[2], ms[3], 1, coords[0], coords[1], coords[2], coords[3]);
./bblock/system.cpp:    // Condensate energy
./bblock/system.cpp:    energy_ = 0.0;
./bblock/system.cpp:    energy_ = GetDispersion(do_grads, use_ghost);
./bblock/system.cpp:    return energy_;
./bblock/system.cpp:    energy_ = 0.0;
./bblock/system.cpp:    energy_ = GetLennardJones(do_grads, use_ghost);
./bblock/system.cpp:    return energy_;
./bblock/system.cpp:    energy_ = 0.0;
./bblock/system.cpp:    energy_ = GetDispersionPME(do_grads, use_ghost);
./bblock/system.cpp:    return energy_;
./bblock/system.cpp:    energy_ = 0.0;
./bblock/system.cpp:    energy_ = GetDispersionPMElocal(do_grads, use_ghost);
./bblock/system.cpp:    return energy_;
./bblock/system.cpp:    energy_ = 0.0;
./bblock/system.cpp:    energy_ = GetBuckingham(do_grads, use_ghost);
./bblock/system.cpp:    return energy_;
./bblock/system.cpp:    energy_ = 0.0;
./bblock/system.cpp:    energy_ = GetElectrostatics(do_grads, use_ghost);
./bblock/system.cpp:    return energy_;
./bblock/system.cpp:    energy_ = 0.0;
./bblock/system.cpp:    energy_ = GetElectrostatics(do_grads, use_ghost);
./bblock/system.cpp:    // correct energy and forces for number of processors
./bblock/system.cpp:    energy_ *= rnprocs;
./bblock/system.cpp:    return energy_;
./bblock/system.cpp:    energy_ = 0.0;
./bblock/system.cpp:    energy_ = GetElectrostaticsMPIlocal(do_grads, use_ghost);
./bblock/system.cpp:    return energy_;
./bblock/system.h:#include "potential/force_field/energyff.h"
./bblock/system.h:#include "potential/1b/energy1b.h"
./bblock/system.h:#include "potential/2b/energy2b.h"
./bblock/system.h:#include "potential/3b/energy3b.h"
./bblock/system.h:#include "potential/4b/energy4b.h"
./bblock/system.h:     * @param[in] ff_mons Vector of monomers for which classical forcefield energy will be calculated
./bblock/system.h:     * Returns the energy of the system.
./bblock/system.h:     * Obtains the one-body energy. This is the sum of all the monomer
./bblock/system.h:     * @return One-body energy of the system
./bblock/system.h:     * Obtains the classic potential energy. This is the sum of the bonds,
./bblock/system.h:     * Obtains the two-body energy. This is the sum of all two-body
./bblock/system.h:     * @return Two-body energy of the system
./bblock/system.h:     * Obtains the three-body energy. This is the sum of all the 3B
./bblock/system.h:     * @return Three-body energy of the system
./bblock/system.h:     * Obtains the four-body energy. This is the sum of all the 4B
./bblock/system.h:     * @return Four-body energy of the system
./bblock/system.h:     * Obtains the electrostatic energy. This is the sum of the permanent
./bblock/system.h:     * @return Electrostatic energy of the system
./bblock/system.h:     * Obtains the dispersion energy for the whole system.
./bblock/system.h:     * @return Dispersion energy of the system
./bblock/system.h:     * Obtains the Lennard-Jones energy for the whole system.
./bblock/system.h:     * @return Lennard-Jones energy of the system
./bblock/system.h:     * Obtains only the k-space dispersion energy for the whole system.
./bblock/system.h:     * @return Dispersion energy of the system
./bblock/system.h:     * Obtains the buckingham energy for the whole system.
./bblock/system.h:     * @return Buckingham energy of the system
./bblock/system.h:     * Private function to internally get the 1b energy.
./bblock/system.h:     * @return  One-body energy of the system
./bblock/system.h:     * Private function to internally get the 1b force field energy.
./bblock/system.h:     * @return One-body classical energy of the system
./bblock/system.h:     * Private function to internally get the 2b energy.
./bblock/system.h:     * @return  Two-body energy of the system
./bblock/system.h:     * Private function to internally get the 3b energy.
./bblock/system.h:     * @return  Three-body energy of the system
./bblock/system.h:     * Private function to internally get the 4b energy.
./bblock/system.h:     * @return  Four-body energy of the system
./bblock/system.h:     * Private function to internally get the electrostatic energy.
./bblock/system.h:     * @return  Electrostatic energy of the system
./bblock/system.h:     * Private function to internally get the lennard-jones energy.
./bblock/system.h:     * @return  Lennard-Jones energy of the system
./bblock/system.h:     * Private function to internally get the k-space portion of lennard-jones energy.
./bblock/system.h:     * @return Lennard-Jones energy of the system
./bblock/system.h:     * Private function to internally get the dispersion energy.
./bblock/system.h:     * @return  Dispersion energy of the system
./bblock/system.h:     * Private function to internally get the k-space portion of dispersion energy.
./bblock/system.h:     * @return  Dispersion energy of the system
./bblock/system.h:     * Private function to internally get the buckinham energy.
./bblock/system.h:     * @return  Buckingham energy of the system
./bblock/system.h:     * Stores the energy of the system
./bblock/system.h:    double energy_;
./bblock/system.h:     * energy calculation
./bblock/system.h:     * taken into account for the clusters, energy calculations, and any
./bblock/system.h:     * Dispersion class that will be used to get the dispersion energy
./bblock/system.h:     * Dispersion class that will be used to get the dispersion energy
./bblock/system.h:     * Electrostatic class that will be used to get the electrostatic energy
./bblock/external_call.cpp: * @brief Functions to use the system class and its energy functions from other languages
./bblock/external_call.cpp: * Given the coordinates, calculates the energy for a gas phase system
./bblock/external_call.cpp: * @param[out] energy Energy of the system
./bblock/external_call.cpp:void get_energy_(double* coords, int* nat, double* energy) {
./bblock/external_call.cpp:    *energy = my_s->Energy(false);
./bblock/external_call.cpp:void get_energy2_(double* coords, int* nat, double* energy, int* rank) {
./bblock/external_call.cpp:    *energy = my_sf[*rank]->Energy(false);
./bblock/external_call.cpp: * Given the coordinates, calculates the energy iand gradients for a gas phase system
./bblock/external_call.cpp: * @param[out] energy Energy of the system
./bblock/external_call.cpp:void get_energy_g_(double* coords, int* nat, double* energy, double* grads) {
./bblock/external_call.cpp:    *energy = my_s->Energy(true);
./bblock/external_call.cpp:void get_energy_g2_(double* coords, int* nat, double* energy, double* grads, int* rank) {
./bblock/external_call.cpp:    *energy = my_sf[*rank]->Energy(true);
./bblock/external_call.cpp: * Given the coordinates, calculates the energy for PBC systems
./bblock/external_call.cpp: * @param[out] energy Energy of the system
./bblock/external_call.cpp:void get_energy_pbc_(double* coords, int* nat, double* box, double* energy) {
./bblock/external_call.cpp:    *energy = my_s->Energy(false);
./bblock/external_call.cpp: * Given the coordinates, calculates the energy iand gradients for a PBC system
./bblock/external_call.cpp: * @param[out] energy Energy of the system
./bblock/external_call.cpp:void get_energy_pbc_g_(double* coords, int* nat, double* box, double* energy, double* grads) {
./bblock/external_call.cpp:    *energy = my_s->Energy(true);
./bblock/external_call.cpp:void get_external_field_contribution_to_energy_(double* e) {
./io_tools/write_connectivity.cpp:    // Save system information in energy file
./io_tools/write_nrg.cpp:    // Save system information in energy file
./io_tools/.deps/libmbx_la-read_nrg.Plo: io_tools/read_connectivity.h potential/force_field/energyff.h \
./io_tools/.deps/libmbx_la-read_nrg.Plo: potential/1b/energy1b.h potential/1b/x1b_A1B4_deg5_exp0_v1x.h \
./io_tools/.deps/libmbx_la-read_nrg.Plo: potential/1b/poly_1b_A1B2_deg6_vmbpbe.h potential/2b/energy2b.h \
./io_tools/.deps/libmbx_la-read_nrg.Plo: potential/2b/poly_2b_A1B2Z2_A1B2Z2_deg4_vmbpbe.h potential/3b/energy3b.h \
./io_tools/.deps/libmbx_la-read_nrg.Plo: potential/4b/energy4b.h \
./io_tools/.deps/libmbx_la-read_nrg.Plo:potential/force_field/energyff.h:
./io_tools/.deps/libmbx_la-read_nrg.Plo:potential/1b/energy1b.h:
./io_tools/.deps/libmbx_la-read_nrg.Plo:potential/2b/energy2b.h:
./io_tools/.deps/libmbx_la-read_nrg.Plo:potential/3b/energy3b.h:
./io_tools/.deps/libmbx_la-read_nrg.Plo:potential/4b/energy4b.h:
./io_tools/.deps/libmbx_la-read_xyz.Plo: io_tools/read_connectivity.h potential/force_field/energyff.h \
./io_tools/.deps/libmbx_la-read_xyz.Plo: potential/1b/energy1b.h potential/1b/x1b_A1B4_deg5_exp0_v1x.h \
./io_tools/.deps/libmbx_la-read_xyz.Plo: potential/1b/poly_1b_A1B2_deg6_vmbpbe.h potential/2b/energy2b.h \
./io_tools/.deps/libmbx_la-read_xyz.Plo: potential/2b/poly_2b_A1B2Z2_A1B2Z2_deg4_vmbpbe.h potential/3b/energy3b.h \
./io_tools/.deps/libmbx_la-read_xyz.Plo: potential/4b/energy4b.h \
./io_tools/.deps/libmbx_la-read_xyz.Plo:potential/force_field/energyff.h:
./io_tools/.deps/libmbx_la-read_xyz.Plo:potential/1b/energy1b.h:
./io_tools/.deps/libmbx_la-read_xyz.Plo:potential/2b/energy2b.h:
./io_tools/.deps/libmbx_la-read_xyz.Plo:potential/3b/energy3b.h:
./io_tools/.deps/libmbx_la-read_xyz.Plo:potential/4b/energy4b.h:
./io_tools/.deps/libmbx_la-write_connectivity.Plo: potential/force_field/energyff.h potential/force_field/calculators.h \
./io_tools/.deps/libmbx_la-write_connectivity.Plo: tools/pbctools.h potential/1b/energy1b.h \
./io_tools/.deps/libmbx_la-write_connectivity.Plo: potential/1b/poly_1b_A1B2_deg6_vmbpbe.h potential/2b/energy2b.h \
./io_tools/.deps/libmbx_la-write_connectivity.Plo: potential/2b/poly_2b_A1B2Z2_A1B2Z2_deg4_vmbpbe.h potential/3b/energy3b.h \
./io_tools/.deps/libmbx_la-write_connectivity.Plo: potential/4b/energy4b.h \
./io_tools/.deps/libmbx_la-write_connectivity.Plo:potential/force_field/energyff.h:
./io_tools/.deps/libmbx_la-write_connectivity.Plo:potential/1b/energy1b.h:
./io_tools/.deps/libmbx_la-write_connectivity.Plo:potential/2b/energy2b.h:
./io_tools/.deps/libmbx_la-write_connectivity.Plo:potential/3b/energy3b.h:
./io_tools/.deps/libmbx_la-write_connectivity.Plo:potential/4b/energy4b.h:
./io_tools/.deps/libmbx_la-write_nrg.Plo: io_tools/read_connectivity.h potential/force_field/energyff.h \
./io_tools/.deps/libmbx_la-write_nrg.Plo: potential/1b/energy1b.h potential/1b/x1b_A1B4_deg5_exp0_v1x.h \
./io_tools/.deps/libmbx_la-write_nrg.Plo: potential/1b/poly_1b_A1B2_deg6_vmbpbe.h potential/2b/energy2b.h \
./io_tools/.deps/libmbx_la-write_nrg.Plo: potential/2b/poly_2b_A1B2Z2_A1B2Z2_deg4_vmbpbe.h potential/3b/energy3b.h \
./io_tools/.deps/libmbx_la-write_nrg.Plo: potential/4b/energy4b.h \
./io_tools/.deps/libmbx_la-write_nrg.Plo:potential/force_field/energyff.h:
./io_tools/.deps/libmbx_la-write_nrg.Plo:potential/1b/energy1b.h:
./io_tools/.deps/libmbx_la-write_nrg.Plo:potential/2b/energy2b.h:
./io_tools/.deps/libmbx_la-write_nrg.Plo:potential/3b/energy3b.h:
./io_tools/.deps/libmbx_la-write_nrg.Plo:potential/4b/energy4b.h:
./io_tools/.deps/libmbx_la-write_xyz.Plo: io_tools/read_connectivity.h potential/force_field/energyff.h \
./io_tools/.deps/libmbx_la-write_xyz.Plo: potential/1b/energy1b.h potential/1b/x1b_A1B4_deg5_exp0_v1x.h \
./io_tools/.deps/libmbx_la-write_xyz.Plo: potential/1b/poly_1b_A1B2_deg6_vmbpbe.h potential/2b/energy2b.h \
./io_tools/.deps/libmbx_la-write_xyz.Plo: potential/2b/poly_2b_A1B2Z2_A1B2Z2_deg4_vmbpbe.h potential/3b/energy3b.h \
./io_tools/.deps/libmbx_la-write_xyz.Plo: potential/4b/energy4b.h \
./io_tools/.deps/libmbx_la-write_xyz.Plo:potential/force_field/energyff.h:
./io_tools/.deps/libmbx_la-write_xyz.Plo:potential/1b/energy1b.h:
./io_tools/.deps/libmbx_la-write_xyz.Plo:potential/2b/energy2b.h:
./io_tools/.deps/libmbx_la-write_xyz.Plo:potential/3b/energy3b.h:
./io_tools/.deps/libmbx_la-write_xyz.Plo:potential/4b/energy4b.h:
./main/mb_decomp.cpp:        // dictionary: subset indicies {i,j,k} -> energy
./main/mb_decomp.cpp:                // calculate subsystem energy
./main/mb_decomp.cpp:                    // at this point, energies[subset[nn][jj]] stores total energy
./main/mb_decomp.cpp:                    // energies[subset[<nn][:]] stores many-body energy
./main/mb_decomp.cpp:                    // at this point, energies[subset[nn][jj]] stores many-body energy
./main/mb_decomp.cpp:    "\nby the energy value. Every subsystem uses one line. Otherwise, energies"
./main/normal-modes.cpp:        double energy = s[0].Energy(true);
./main/normal-modes.cpp:        std::cout << argv[1] << " : E = " << energy << " , |g| = " << gg << std::endl;
./main/optimize.cpp:    double energy = s[0].Energy(true);
./main/optimize.cpp:    return energy;
./main/optimize.cpp:    double energy = e0;
./main/optimize.cpp:    tools::xmin(GradFunction, &nat, xyz_opt.data(), grad.data(), &energy, &grms, &optmzr);
./main/order_frames.cpp:        double energy = s[0].Energy(false);
./main/order_frames.cpp:        energies.push_back(std::make_pair(i, energy));
./Makefile:am__objects_4 = potential/1b/libmbx_la-energy1b.lo \
./Makefile:am__objects_5 = potential/2b/libmbx_la-energy2b.lo \
./Makefile:am__objects_6 = potential/3b/libmbx_la-energy3b.lo \
./Makefile:am__objects_7 = potential/4b/libmbx_la-energy4b.lo \
./Makefile:	potential/force_field/libmbx_la-energyff.lo \
./Makefile:oneb_sources = potential/1b/energy1b.cpp potential/1b/mbnrg_1b_A1B3_deg5_v1.cpp potential/1b/mbnrg_1b_A2_deg8_v1.cpp potential/1b/poly_1b_A1B2_deg4_v1x.cpp potential/1b/poly_1b_A1B3_deg5_grad_v1.cpp potential/1b/poly_1b_A1B3_deg5_nograd_v1.cpp potential/1b/poly_1b_A1B4_deg5_exp0_v1.cpp potential/1b/poly_1b_A1B4_deg5_exp0_v1x.cpp potential/1b/poly_1b_A2_deg8_grad_v1.cpp potential/1b/poly_1b_A2_deg8_nograd_v1.cpp potential/1b/ps.cpp potential/1b/x1b_A1B2_deg4_v1x.cpp potential/1b/x1b_A1B4_deg5_exp0_v1x.cpp potential/1b/poly_1b_A1B2_deg6_grad_vmbpbe.cpp potential/1b/poly_1b_A1B2_deg6_nograd_vmbpbe.cpp  potential/1b/mbnrg_1b_A1B2_deg6_vmbpbe.cpp
./Makefile:twob_sources = potential/2b/energy2b.cpp \
./Makefile:threeb_sources = potential/3b/energy3b.cpp \
./Makefile:fourb_sources = potential/4b/energy4b.cpp  potential/4b/mbnrg_4b_A1B2_A1B2_A1B2_A1B2_deg4_v1.cpp  potential/4b/poly_4b_A1B2_A1B2_A1B2_A1B2_deg4_grad_v1.cpp  potential/4b/poly_4b_A1B2_A1B2_A1B2_A1B2_deg4_nograd_v1.cpp
./Makefile:ff_sources = potential/force_field/angles.cpp potential/force_field/bond.cpp potential/force_field/calculators.cpp potential/force_field/connectivity.cpp potential/force_field/dihedral.cpp potential/force_field/energyff.cpp potential/force_field/inversion.cpp potential/force_field/topology.cpp
./Makefile:potential/1b/libmbx_la-energy1b.lo: potential/1b/$(am__dirstamp) \
./Makefile:potential/2b/libmbx_la-energy2b.lo: potential/2b/$(am__dirstamp) \
./Makefile:potential/3b/libmbx_la-energy3b.lo: potential/3b/$(am__dirstamp) \
./Makefile:potential/4b/libmbx_la-energy4b.lo: potential/4b/$(am__dirstamp) \
./Makefile:potential/force_field/libmbx_la-energyff.lo:  \
./Makefile:include potential/1b/$(DEPDIR)/libmbx_la-energy1b.Plo
./Makefile:include potential/2b/$(DEPDIR)/libmbx_la-energy2b.Plo
./Makefile:include potential/3b/$(DEPDIR)/libmbx_la-energy3b.Plo
./Makefile:include potential/4b/$(DEPDIR)/libmbx_la-energy4b.Plo
./Makefile:include potential/force_field/$(DEPDIR)/libmbx_la-energyff.Plo
./Makefile:potential/1b/libmbx_la-energy1b.lo: potential/1b/energy1b.cpp
./Makefile:	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmbx_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT potential/1b/libmbx_la-energy1b.lo -MD -MP -MF potential/1b/$(DEPDIR)/libmbx_la-energy1b.Tpo -c -o potential/1b/libmbx_la-energy1b.lo `test -f 'potential/1b/energy1b.cpp' || echo '$(srcdir)/'`potential/1b/energy1b.cpp
./Makefile:	$(AM_V_at)$(am__mv) potential/1b/$(DEPDIR)/libmbx_la-energy1b.Tpo potential/1b/$(DEPDIR)/libmbx_la-energy1b.Plo
./Makefile:#	$(AM_V_CXX)source='potential/1b/energy1b.cpp' object='potential/1b/libmbx_la-energy1b.lo' libtool=yes \
./Makefile:#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmbx_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o potential/1b/libmbx_la-energy1b.lo `test -f 'potential/1b/energy1b.cpp' || echo '$(srcdir)/'`potential/1b/energy1b.cpp
./Makefile:potential/2b/libmbx_la-energy2b.lo: potential/2b/energy2b.cpp
./Makefile:	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmbx_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT potential/2b/libmbx_la-energy2b.lo -MD -MP -MF potential/2b/$(DEPDIR)/libmbx_la-energy2b.Tpo -c -o potential/2b/libmbx_la-energy2b.lo `test -f 'potential/2b/energy2b.cpp' || echo '$(srcdir)/'`potential/2b/energy2b.cpp
./Makefile:	$(AM_V_at)$(am__mv) potential/2b/$(DEPDIR)/libmbx_la-energy2b.Tpo potential/2b/$(DEPDIR)/libmbx_la-energy2b.Plo
./Makefile:#	$(AM_V_CXX)source='potential/2b/energy2b.cpp' object='potential/2b/libmbx_la-energy2b.lo' libtool=yes \
./Makefile:#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmbx_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o potential/2b/libmbx_la-energy2b.lo `test -f 'potential/2b/energy2b.cpp' || echo '$(srcdir)/'`potential/2b/energy2b.cpp
./Makefile:potential/3b/libmbx_la-energy3b.lo: potential/3b/energy3b.cpp
./Makefile:	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmbx_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT potential/3b/libmbx_la-energy3b.lo -MD -MP -MF potential/3b/$(DEPDIR)/libmbx_la-energy3b.Tpo -c -o potential/3b/libmbx_la-energy3b.lo `test -f 'potential/3b/energy3b.cpp' || echo '$(srcdir)/'`potential/3b/energy3b.cpp
./Makefile:	$(AM_V_at)$(am__mv) potential/3b/$(DEPDIR)/libmbx_la-energy3b.Tpo potential/3b/$(DEPDIR)/libmbx_la-energy3b.Plo
./Makefile:#	$(AM_V_CXX)source='potential/3b/energy3b.cpp' object='potential/3b/libmbx_la-energy3b.lo' libtool=yes \
./Makefile:#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmbx_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o potential/3b/libmbx_la-energy3b.lo `test -f 'potential/3b/energy3b.cpp' || echo '$(srcdir)/'`potential/3b/energy3b.cpp
./Makefile:potential/4b/libmbx_la-energy4b.lo: potential/4b/energy4b.cpp
./Makefile:	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmbx_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT potential/4b/libmbx_la-energy4b.lo -MD -MP -MF potential/4b/$(DEPDIR)/libmbx_la-energy4b.Tpo -c -o potential/4b/libmbx_la-energy4b.lo `test -f 'potential/4b/energy4b.cpp' || echo '$(srcdir)/'`potential/4b/energy4b.cpp
./Makefile:	$(AM_V_at)$(am__mv) potential/4b/$(DEPDIR)/libmbx_la-energy4b.Tpo potential/4b/$(DEPDIR)/libmbx_la-energy4b.Plo
./Makefile:#	$(AM_V_CXX)source='potential/4b/energy4b.cpp' object='potential/4b/libmbx_la-energy4b.lo' libtool=yes \
./Makefile:#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmbx_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o potential/4b/libmbx_la-energy4b.lo `test -f 'potential/4b/energy4b.cpp' || echo '$(srcdir)/'`potential/4b/energy4b.cpp
./Makefile:potential/force_field/libmbx_la-energyff.lo: potential/force_field/energyff.cpp
./Makefile:	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmbx_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT potential/force_field/libmbx_la-energyff.lo -MD -MP -MF potential/force_field/$(DEPDIR)/libmbx_la-energyff.Tpo -c -o potential/force_field/libmbx_la-energyff.lo `test -f 'potential/force_field/energyff.cpp' || echo '$(srcdir)/'`potential/force_field/energyff.cpp
./Makefile:	$(AM_V_at)$(am__mv) potential/force_field/$(DEPDIR)/libmbx_la-energyff.Tpo potential/force_field/$(DEPDIR)/libmbx_la-energyff.Plo
./Makefile:#	$(AM_V_CXX)source='potential/force_field/energyff.cpp' object='potential/force_field/libmbx_la-energyff.lo' libtool=yes \
./Makefile:#	$(AM_V_CXX_no)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmbx_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o potential/force_field/libmbx_la-energyff.lo `test -f 'potential/force_field/energyff.cpp' || echo '$(srcdir)/'`potential/force_field/energyff.cpp
./Makefile.am:oneb_sources = potential/1b/energy1b.cpp potential/1b/mbnrg_1b_A1B3_deg5_v1.cpp potential/1b/mbnrg_1b_A2_deg8_v1.cpp potential/1b/poly_1b_A1B2_deg4_v1x.cpp potential/1b/poly_1b_A1B3_deg5_grad_v1.cpp potential/1b/poly_1b_A1B3_deg5_nograd_v1.cpp potential/1b/poly_1b_A1B4_deg5_exp0_v1.cpp potential/1b/poly_1b_A1B4_deg5_exp0_v1x.cpp potential/1b/poly_1b_A2_deg8_grad_v1.cpp potential/1b/poly_1b_A2_deg8_nograd_v1.cpp potential/1b/ps.cpp potential/1b/x1b_A1B2_deg4_v1x.cpp potential/1b/x1b_A1B4_deg5_exp0_v1x.cpp potential/1b/poly_1b_A1B2_deg6_grad_vmbpbe.cpp potential/1b/poly_1b_A1B2_deg6_nograd_vmbpbe.cpp  potential/1b/mbnrg_1b_A1B2_deg6_vmbpbe.cpp
./Makefile.am:twob_sources = potential/2b/energy2b.cpp potential/2b/mbnrg_2b_A1_A1_deg9_v1.cpp potential/2b/mbnrg_2b_A1_B1C2X2_deg5_v1.cpp potential/2b/mbnrg_2b_A1_B1_deg9_v1.cpp potential/2b/mbnrg_2b_A1_B2_deg7_v1.cpp potential/2b/mbnrg_2b_A1B2Z2_C2_deg5_v1.cpp potential/2b/mbnrg_2b_A1B3_A1B3_deg4_v1.cpp potential/2b/mbnrg_2b_A2_A2_deg6_v1.cpp potential/2b/poly_2b_A1_A1_deg9_grad_v1.cpp potential/2b/poly_2b_A1_A1_deg9_nograd_v1.cpp potential/2b/poly_2b_A1_B1C2X2_deg5_grad_v1.cpp potential/2b/poly_2b_A1_B1C2X2_deg5_nograd_v1.cpp potential/2b/poly_2b_A1_B1_deg9_grad_v1.cpp potential/2b/poly_2b_A1_B1_deg9_nograd_v1.cpp potential/2b/poly_2b_A1B2_A1B2_v1.cpp potential/2b/poly_2b_A1B2_A1B2_v1x.cpp potential/2b/poly_2b_A1B2C4_D1E2_deg3_v1.cpp potential/2b/poly_2b_A1B2C4_D1E2_deg3_v1x.cpp potential/2b/poly_2b_A1_B2_deg7_grad_v1.cpp potential/2b/poly_2b_A1_B2_deg7_nograd_v1.cpp potential/2b/poly_2b_A1B2Z2_C1D2_v1.cpp potential/2b/poly_2b_A1B2Z2_C1D2_v1x.cpp potential/2b/poly_2b_A1B2Z2_C1D4_deg3_exp0_v1.cpp potential/2b/poly_2b_A1B2Z2_C1D4_deg3_exp0_v1x.cpp potential/2b/poly_2b_A1B2Z2_C2_deg5_grad_v1.cpp potential/2b/poly_2b_A1B2Z2_C2_deg5_nograd_v1.cpp potential/2b/poly-2b-A1B2Z2_C-v1.cpp potential/2b/poly-2b-A1B2Z2_C-v1x.cpp potential/2b/poly_2b_A1B3_A1B3_deg4_grad_v1.cpp potential/2b/poly_2b_A1B3_A1B3_deg4_nograd_v1.cpp potential/2b/poly_2b_A1B4_A1B4_deg4_exp0_v1.cpp potential/2b/poly_2b_A1B4_A1B4_deg4_exp0_v1x.cpp potential/2b/poly_2b_A2_A2_deg6_grad_v1.cpp potential/2b/poly_2b_A2_A2_deg6_nograd_v1.cpp potential/2b/poly-2b-v6x.cpp potential/2b/poly-2b-v6x-nogrd.cpp potential/2b/x2b_A1B2_A1B2_v1x.cpp potential/2b/x2b_A1B2C4_D1E2_deg3_v1x.cpp potential/2b/x2b_A1B2Z2_C1D2_v1x.cpp potential/2b/x2b_A1B2Z2_C1D4_deg3_exp0_v1x.cpp potential/2b/x2b-A1B2Z2_C-v1x.cpp potential/2b/x2b_A1B4_A1B4_deg4_exp0_v1x.cpp potential/2b/x2b-v9x.cpp potential/2b/mbnrg_2b_A1B2Z2_A1B2Z2_deg4_vmbpbe.cpp potential/2b/poly_2b_A1B2Z2_A1B2Z2_deg4_nograd_vmbpbe.cpp potential/2b/poly_2b_A1B2Z2_A1B2Z2_deg4_grad_vmbpbe.cpp potential/2b/mbnrg_2b_A1B4_C1D2_deg4_v1.cpp potential/2b/poly_2b_A1B4_C1D2_deg4_nograd_v1.cpp potential/2b/poly_2b_A1B4_C1D2_deg4_grad_v1.cpp potential/2b/x2b_A1_A1_deg23_v1x.cpp potential/2b/poly_2b_A1_A1_deg23_v1.cpp potential/2b/poly_2b_A1_A1_deg23_v1x.cpp potential/2b/x2b_A1B2Z2_C1_deg5_v1x.cpp potential/2b/poly_2b_A1B2Z2_C1_deg5_v1.cpp potential/2b/poly_2b_A1B2Z2_C1_deg5_v1x.cpp
./Makefile.am:threeb_sources = potential/3b/energy3b.cpp potential/3b/mbnrg_3b_A1_B1C2X2_B1C2X2_deg4_v1.cpp potential/3b/mbnrg_3b_A1B2_A1B2_A1B2_deg4_v1.cpp potential/3b/mbnrg_3b_A1B2C4_D1E2_D1E2_deg3_v1.cpp potential/3b/mbnrg_3b_A1B4_C1D2_C1D2_deg3_v1.cpp potential/3b/poly_3b_A1_B1C2X2_B1C2X2_deg4_grad_v1.cpp potential/3b/poly_3b_A1_B1C2X2_B1C2X2_deg4_nograd_v1.cpp potential/3b/poly_3b_A1B2_A1B2_A1B2_deg4_grad_v1.cpp potential/3b/poly_3b_A1B2_A1B2_A1B2_deg4_nograd_v1.cpp potential/3b/poly_3b_A1B4_C1D2_C1D2_deg3_grad_v1.cpp potential/3b/poly_3b_A1B4_C1D2_C1D2_deg3_nograd_v1.cpp potential/3b/poly-3b-h2o-ion-v1x_deg4_filtered.cpp potential/3b/poly-3b-v2x.cpp potential/3b/poly-3b-v2x-nogrd.cpp potential/3b/x3b-h2o-ion-v1x-deg4-filtered.cpp potential/3b/x3b-v2x.cpp potential/3b/poly_3b_A1B2_A1B2_A1B2_deg4_grad_vmbpbe.cpp potential/3b/mbnrg_3b_A1B2_A1B2_A1B2_deg4_vmbpbe.cpp potential/3b/poly_3b_A1B2_A1B2_A1B2_deg4_nograd_vmbpbe.cpp potential/3b/mbnrg_3b_A1_B1C2X2_B1C2X2_deg4_v1_oldswitch.cpp potential/3b/poly_3b_A1_B1C2X2_B1C2X2_deg4_grad_v1_oldswitch.cpp potential/3b/poly_3b_A1_B1C2X2_B1C2X2_deg4_nograd_v1_oldswitch.cpp
./Makefile.am:fourb_sources = potential/4b/energy4b.cpp  potential/4b/mbnrg_4b_A1B2_A1B2_A1B2_A1B2_deg4_v1.cpp  potential/4b/poly_4b_A1B2_A1B2_A1B2_A1B2_deg4_grad_v1.cpp  potential/4b/poly_4b_A1B2_A1B2_A1B2_A1B2_deg4_nograd_v1.cpp
./Makefile.am:ff_sources = potential/force_field/angles.cpp potential/force_field/bond.cpp potential/force_field/calculators.cpp potential/force_field/connectivity.cpp potential/force_field/dihedral.cpp potential/force_field/energyff.cpp potential/force_field/inversion.cpp potential/force_field/topology.cpp
./Makefile.in:am__objects_4 = potential/1b/libmbx_la-energy1b.lo \
./Makefile.in:am__objects_5 = potential/2b/libmbx_la-energy2b.lo \
./Makefile.in:am__objects_6 = potential/3b/libmbx_la-energy3b.lo \
./Makefile.in:am__objects_7 = potential/4b/libmbx_la-energy4b.lo \
./Makefile.in:	potential/force_field/libmbx_la-energyff.lo \
./Makefile.in:oneb_sources = potential/1b/energy1b.cpp potential/1b/mbnrg_1b_A1B3_deg5_v1.cpp potential/1b/mbnrg_1b_A2_deg8_v1.cpp potential/1b/poly_1b_A1B2_deg4_v1x.cpp potential/1b/poly_1b_A1B3_deg5_grad_v1.cpp potential/1b/poly_1b_A1B3_deg5_nograd_v1.cpp potential/1b/poly_1b_A1B4_deg5_exp0_v1.cpp potential/1b/poly_1b_A1B4_deg5_exp0_v1x.cpp potential/1b/poly_1b_A2_deg8_grad_v1.cpp potential/1b/poly_1b_A2_deg8_nograd_v1.cpp potential/1b/ps.cpp potential/1b/x1b_A1B2_deg4_v1x.cpp potential/1b/x1b_A1B4_deg5_exp0_v1x.cpp potential/1b/poly_1b_A1B2_deg6_grad_vmbpbe.cpp potential/1b/poly_1b_A1B2_deg6_nograd_vmbpbe.cpp  potential/1b/mbnrg_1b_A1B2_deg6_vmbpbe.cpp
./Makefile.in:twob_sources = potential/2b/energy2b.cpp \
./Makefile.in:threeb_sources = potential/3b/energy3b.cpp \
./Makefile.in:fourb_sources = potential/4b/energy4b.cpp  potential/4b/mbnrg_4b_A1B2_A1B2_A1B2_A1B2_deg4_v1.cpp  potential/4b/poly_4b_A1B2_A1B2_A1B2_A1B2_deg4_grad_v1.cpp  potential/4b/poly_4b_A1B2_A1B2_A1B2_A1B2_deg4_nograd_v1.cpp
./Makefile.in:ff_sources = potential/force_field/angles.cpp potential/force_field/bond.cpp potential/force_field/calculators.cpp potential/force_field/connectivity.cpp potential/force_field/dihedral.cpp potential/force_field/energyff.cpp potential/force_field/inversion.cpp potential/force_field/topology.cpp
./Makefile.in:potential/1b/libmbx_la-energy1b.lo: potential/1b/$(am__dirstamp) \
./Makefile.in:potential/2b/libmbx_la-energy2b.lo: potential/2b/$(am__dirstamp) \
./Makefile.in:potential/3b/libmbx_la-energy3b.lo: potential/3b/$(am__dirstamp) \
./Makefile.in:potential/4b/libmbx_la-energy4b.lo: potential/4b/$(am__dirstamp) \
./Makefile.in:potential/force_field/libmbx_la-energyff.lo:  \
./Makefile.in:@AMDEP_TRUE@@am__include@ @am__quote@potential/1b/$(DEPDIR)/libmbx_la-energy1b.Plo@am__quote@
./Makefile.in:@AMDEP_TRUE@@am__include@ @am__quote@potential/2b/$(DEPDIR)/libmbx_la-energy2b.Plo@am__quote@
./Makefile.in:@AMDEP_TRUE@@am__include@ @am__quote@potential/3b/$(DEPDIR)/libmbx_la-energy3b.Plo@am__quote@
./Makefile.in:@AMDEP_TRUE@@am__include@ @am__quote@potential/4b/$(DEPDIR)/libmbx_la-energy4b.Plo@am__quote@
./Makefile.in:@AMDEP_TRUE@@am__include@ @am__quote@potential/force_field/$(DEPDIR)/libmbx_la-energyff.Plo@am__quote@
./Makefile.in:potential/1b/libmbx_la-energy1b.lo: potential/1b/energy1b.cpp
./Makefile.in:@am__fastdepCXX_TRUE@	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmbx_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT potential/1b/libmbx_la-energy1b.lo -MD -MP -MF potential/1b/$(DEPDIR)/libmbx_la-energy1b.Tpo -c -o potential/1b/libmbx_la-energy1b.lo `test -f 'potential/1b/energy1b.cpp' || echo '$(srcdir)/'`potential/1b/energy1b.cpp
./Makefile.in:@am__fastdepCXX_TRUE@	$(AM_V_at)$(am__mv) potential/1b/$(DEPDIR)/libmbx_la-energy1b.Tpo potential/1b/$(DEPDIR)/libmbx_la-energy1b.Plo
./Makefile.in:@AMDEP_TRUE@@am__fastdepCXX_FALSE@	$(AM_V_CXX)source='potential/1b/energy1b.cpp' object='potential/1b/libmbx_la-energy1b.lo' libtool=yes @AMDEPBACKSLASH@
./Makefile.in:@am__fastdepCXX_FALSE@	$(AM_V_CXX@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmbx_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o potential/1b/libmbx_la-energy1b.lo `test -f 'potential/1b/energy1b.cpp' || echo '$(srcdir)/'`potential/1b/energy1b.cpp
./Makefile.in:potential/2b/libmbx_la-energy2b.lo: potential/2b/energy2b.cpp
./Makefile.in:@am__fastdepCXX_TRUE@	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmbx_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT potential/2b/libmbx_la-energy2b.lo -MD -MP -MF potential/2b/$(DEPDIR)/libmbx_la-energy2b.Tpo -c -o potential/2b/libmbx_la-energy2b.lo `test -f 'potential/2b/energy2b.cpp' || echo '$(srcdir)/'`potential/2b/energy2b.cpp
./Makefile.in:@am__fastdepCXX_TRUE@	$(AM_V_at)$(am__mv) potential/2b/$(DEPDIR)/libmbx_la-energy2b.Tpo potential/2b/$(DEPDIR)/libmbx_la-energy2b.Plo
./Makefile.in:@AMDEP_TRUE@@am__fastdepCXX_FALSE@	$(AM_V_CXX)source='potential/2b/energy2b.cpp' object='potential/2b/libmbx_la-energy2b.lo' libtool=yes @AMDEPBACKSLASH@
./Makefile.in:@am__fastdepCXX_FALSE@	$(AM_V_CXX@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmbx_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o potential/2b/libmbx_la-energy2b.lo `test -f 'potential/2b/energy2b.cpp' || echo '$(srcdir)/'`potential/2b/energy2b.cpp
./Makefile.in:potential/3b/libmbx_la-energy3b.lo: potential/3b/energy3b.cpp
./Makefile.in:@am__fastdepCXX_TRUE@	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmbx_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT potential/3b/libmbx_la-energy3b.lo -MD -MP -MF potential/3b/$(DEPDIR)/libmbx_la-energy3b.Tpo -c -o potential/3b/libmbx_la-energy3b.lo `test -f 'potential/3b/energy3b.cpp' || echo '$(srcdir)/'`potential/3b/energy3b.cpp
./Makefile.in:@am__fastdepCXX_TRUE@	$(AM_V_at)$(am__mv) potential/3b/$(DEPDIR)/libmbx_la-energy3b.Tpo potential/3b/$(DEPDIR)/libmbx_la-energy3b.Plo
./Makefile.in:@AMDEP_TRUE@@am__fastdepCXX_FALSE@	$(AM_V_CXX)source='potential/3b/energy3b.cpp' object='potential/3b/libmbx_la-energy3b.lo' libtool=yes @AMDEPBACKSLASH@
./Makefile.in:@am__fastdepCXX_FALSE@	$(AM_V_CXX@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmbx_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o potential/3b/libmbx_la-energy3b.lo `test -f 'potential/3b/energy3b.cpp' || echo '$(srcdir)/'`potential/3b/energy3b.cpp
./Makefile.in:potential/4b/libmbx_la-energy4b.lo: potential/4b/energy4b.cpp
./Makefile.in:@am__fastdepCXX_TRUE@	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmbx_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT potential/4b/libmbx_la-energy4b.lo -MD -MP -MF potential/4b/$(DEPDIR)/libmbx_la-energy4b.Tpo -c -o potential/4b/libmbx_la-energy4b.lo `test -f 'potential/4b/energy4b.cpp' || echo '$(srcdir)/'`potential/4b/energy4b.cpp
./Makefile.in:@am__fastdepCXX_TRUE@	$(AM_V_at)$(am__mv) potential/4b/$(DEPDIR)/libmbx_la-energy4b.Tpo potential/4b/$(DEPDIR)/libmbx_la-energy4b.Plo
./Makefile.in:@AMDEP_TRUE@@am__fastdepCXX_FALSE@	$(AM_V_CXX)source='potential/4b/energy4b.cpp' object='potential/4b/libmbx_la-energy4b.lo' libtool=yes @AMDEPBACKSLASH@
./Makefile.in:@am__fastdepCXX_FALSE@	$(AM_V_CXX@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmbx_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o potential/4b/libmbx_la-energy4b.lo `test -f 'potential/4b/energy4b.cpp' || echo '$(srcdir)/'`potential/4b/energy4b.cpp
./Makefile.in:potential/force_field/libmbx_la-energyff.lo: potential/force_field/energyff.cpp
./Makefile.in:@am__fastdepCXX_TRUE@	$(AM_V_CXX)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmbx_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT potential/force_field/libmbx_la-energyff.lo -MD -MP -MF potential/force_field/$(DEPDIR)/libmbx_la-energyff.Tpo -c -o potential/force_field/libmbx_la-energyff.lo `test -f 'potential/force_field/energyff.cpp' || echo '$(srcdir)/'`potential/force_field/energyff.cpp
./Makefile.in:@am__fastdepCXX_TRUE@	$(AM_V_at)$(am__mv) potential/force_field/$(DEPDIR)/libmbx_la-energyff.Tpo potential/force_field/$(DEPDIR)/libmbx_la-energyff.Plo
./Makefile.in:@AMDEP_TRUE@@am__fastdepCXX_FALSE@	$(AM_V_CXX)source='potential/force_field/energyff.cpp' object='potential/force_field/libmbx_la-energyff.lo' libtool=yes @AMDEPBACKSLASH@
./Makefile.in:@am__fastdepCXX_FALSE@	$(AM_V_CXX@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libmbx_la_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o potential/force_field/libmbx_la-energyff.lo `test -f 'potential/force_field/energyff.cpp' || echo '$(srcdir)/'`potential/force_field/energyff.cpp
./pol.dat:./bblock/.deps/libmbx_la-external_call.Plo: potential/1b/poly_1b_A1B2_deg6_vmbpbe.h potential/2b/energy2b.h \
./pol.dat:./bblock/.deps/libmbx_la-external_call.Plo: potential/2b/poly_2b_A1B2Z2_A1B2Z2_deg4_vmbpbe.h potential/3b/energy3b.h \
./pol.dat:./bblock/.deps/libmbx_la-system.Plo: potential/1b/poly_1b_A1B2_deg6_vmbpbe.h potential/2b/energy2b.h \
./pol.dat:./bblock/.deps/libmbx_la-system.Plo: potential/2b/poly_2b_A1B2Z2_A1B2Z2_deg4_vmbpbe.h potential/3b/energy3b.h \
./pol.dat:./io_tools/.deps/libmbx_la-read_nrg.Plo: potential/1b/poly_1b_A1B2_deg6_vmbpbe.h potential/2b/energy2b.h \
./pol.dat:./io_tools/.deps/libmbx_la-read_nrg.Plo: potential/2b/poly_2b_A1B2Z2_A1B2Z2_deg4_vmbpbe.h potential/3b/energy3b.h \
./pol.dat:./io_tools/.deps/libmbx_la-read_xyz.Plo: potential/1b/poly_1b_A1B2_deg6_vmbpbe.h potential/2b/energy2b.h \
./pol.dat:./io_tools/.deps/libmbx_la-read_xyz.Plo: potential/2b/poly_2b_A1B2Z2_A1B2Z2_deg4_vmbpbe.h potential/3b/energy3b.h \
./pol.dat:./io_tools/.deps/libmbx_la-write_connectivity.Plo: potential/1b/poly_1b_A1B2_deg6_vmbpbe.h potential/2b/energy2b.h \
./pol.dat:./io_tools/.deps/libmbx_la-write_connectivity.Plo: potential/2b/poly_2b_A1B2Z2_A1B2Z2_deg4_vmbpbe.h potential/3b/energy3b.h \
./pol.dat:./io_tools/.deps/libmbx_la-write_nrg.Plo: potential/1b/poly_1b_A1B2_deg6_vmbpbe.h potential/2b/energy2b.h \
./pol.dat:./io_tools/.deps/libmbx_la-write_nrg.Plo: potential/2b/poly_2b_A1B2Z2_A1B2Z2_deg4_vmbpbe.h potential/3b/energy3b.h \
./pol.dat:./io_tools/.deps/libmbx_la-write_xyz.Plo: potential/1b/poly_1b_A1B2_deg6_vmbpbe.h potential/2b/energy2b.h \
./pol.dat:./io_tools/.deps/libmbx_la-write_xyz.Plo: potential/2b/poly_2b_A1B2Z2_A1B2Z2_deg4_vmbpbe.h potential/3b/energy3b.h \
./pol.dat:./Makefile:oneb_sources = potential/1b/energy1b.cpp potential/1b/mbnrg_1b_A1B3_deg5_v1.cpp potential/1b/mbnrg_1b_A2_deg8_v1.cpp potential/1b/poly_1b_A1B2_deg4_v1x.cpp potential/1b/poly_1b_A1B3_deg5_grad_v1.cpp potential/1b/poly_1b_A1B3_deg5_nograd_v1.cpp potential/1b/poly_1b_A1B4_deg5_exp0_v1.cpp potential/1b/poly_1b_A1B4_deg5_exp0_v1x.cpp potential/1b/poly_1b_A2_deg8_grad_v1.cpp potential/1b/poly_1b_A2_deg8_nograd_v1.cpp potential/1b/ps.cpp potential/1b/x1b_A1B2_deg4_v1x.cpp potential/1b/x1b_A1B4_deg5_exp0_v1x.cpp potential/1b/poly_1b_A1B2_deg6_grad_vmbpbe.cpp potential/1b/poly_1b_A1B2_deg6_nograd_vmbpbe.cpp  potential/1b/mbnrg_1b_A1B2_deg6_vmbpbe.cpp
./pol.dat:./Makefile:fourb_sources = potential/4b/energy4b.cpp  potential/4b/mbnrg_4b_A1B2_A1B2_A1B2_A1B2_deg4_v1.cpp  potential/4b/poly_4b_A1B2_A1B2_A1B2_A1B2_deg4_grad_v1.cpp  potential/4b/poly_4b_A1B2_A1B2_A1B2_A1B2_deg4_nograd_v1.cpp
./pol.dat:./Makefile:ff_sources = potential/force_field/angles.cpp potential/force_field/bond.cpp potential/force_field/calculators.cpp potential/force_field/connectivity.cpp potential/force_field/dihedral.cpp potential/force_field/energyff.cpp potential/force_field/inversion.cpp potential/force_field/topology.cpp
./pol.dat:./Makefile.am:oneb_sources = potential/1b/energy1b.cpp potential/1b/mbnrg_1b_A1B3_deg5_v1.cpp potential/1b/mbnrg_1b_A2_deg8_v1.cpp potential/1b/poly_1b_A1B2_deg4_v1x.cpp potential/1b/poly_1b_A1B3_deg5_grad_v1.cpp potential/1b/poly_1b_A1B3_deg5_nograd_v1.cpp potential/1b/poly_1b_A1B4_deg5_exp0_v1.cpp potential/1b/poly_1b_A1B4_deg5_exp0_v1x.cpp potential/1b/poly_1b_A2_deg8_grad_v1.cpp potential/1b/poly_1b_A2_deg8_nograd_v1.cpp potential/1b/ps.cpp potential/1b/x1b_A1B2_deg4_v1x.cpp potential/1b/x1b_A1B4_deg5_exp0_v1x.cpp potential/1b/poly_1b_A1B2_deg6_grad_vmbpbe.cpp potential/1b/poly_1b_A1B2_deg6_nograd_vmbpbe.cpp  potential/1b/mbnrg_1b_A1B2_deg6_vmbpbe.cpp
./pol.dat:./Makefile.am:twob_sources = potential/2b/energy2b.cpp potential/2b/mbnrg_2b_A1_A1_deg9_v1.cpp potential/2b/mbnrg_2b_A1_B1C2X2_deg5_v1.cpp potential/2b/mbnrg_2b_A1_B1_deg9_v1.cpp potential/2b/mbnrg_2b_A1_B2_deg7_v1.cpp potential/2b/mbnrg_2b_A1B2Z2_C2_deg5_v1.cpp potential/2b/mbnrg_2b_A1B3_A1B3_deg4_v1.cpp potential/2b/mbnrg_2b_A2_A2_deg6_v1.cpp potential/2b/poly_2b_A1_A1_deg9_grad_v1.cpp potential/2b/poly_2b_A1_A1_deg9_nograd_v1.cpp potential/2b/poly_2b_A1_B1C2X2_deg5_grad_v1.cpp potential/2b/poly_2b_A1_B1C2X2_deg5_nograd_v1.cpp potential/2b/poly_2b_A1_B1_deg9_grad_v1.cpp potential/2b/poly_2b_A1_B1_deg9_nograd_v1.cpp potential/2b/poly_2b_A1B2_A1B2_v1.cpp potential/2b/poly_2b_A1B2_A1B2_v1x.cpp potential/2b/poly_2b_A1B2C4_D1E2_deg3_v1.cpp potential/2b/poly_2b_A1B2C4_D1E2_deg3_v1x.cpp potential/2b/poly_2b_A1_B2_deg7_grad_v1.cpp potential/2b/poly_2b_A1_B2_deg7_nograd_v1.cpp potential/2b/poly_2b_A1B2Z2_C1D2_v1.cpp potential/2b/poly_2b_A1B2Z2_C1D2_v1x.cpp potential/2b/poly_2b_A1B2Z2_C1D4_deg3_exp0_v1.cpp potential/2b/poly_2b_A1B2Z2_C1D4_deg3_exp0_v1x.cpp potential/2b/poly_2b_A1B2Z2_C2_deg5_grad_v1.cpp potential/2b/poly_2b_A1B2Z2_C2_deg5_nograd_v1.cpp potential/2b/poly-2b-A1B2Z2_C-v1.cpp potential/2b/poly-2b-A1B2Z2_C-v1x.cpp potential/2b/poly_2b_A1B3_A1B3_deg4_grad_v1.cpp potential/2b/poly_2b_A1B3_A1B3_deg4_nograd_v1.cpp potential/2b/poly_2b_A1B4_A1B4_deg4_exp0_v1.cpp potential/2b/poly_2b_A1B4_A1B4_deg4_exp0_v1x.cpp potential/2b/poly_2b_A2_A2_deg6_grad_v1.cpp potential/2b/poly_2b_A2_A2_deg6_nograd_v1.cpp potential/2b/poly-2b-v6x.cpp potential/2b/poly-2b-v6x-nogrd.cpp potential/2b/x2b_A1B2_A1B2_v1x.cpp potential/2b/x2b_A1B2C4_D1E2_deg3_v1x.cpp potential/2b/x2b_A1B2Z2_C1D2_v1x.cpp potential/2b/x2b_A1B2Z2_C1D4_deg3_exp0_v1x.cpp potential/2b/x2b-A1B2Z2_C-v1x.cpp potential/2b/x2b_A1B4_A1B4_deg4_exp0_v1x.cpp potential/2b/x2b-v9x.cpp potential/2b/mbnrg_2b_A1B2Z2_A1B2Z2_deg4_vmbpbe.cpp potential/2b/poly_2b_A1B2Z2_A1B2Z2_deg4_nograd_vmbpbe.cpp potential/2b/poly_2b_A1B2Z2_A1B2Z2_deg4_grad_vmbpbe.cpp potential/2b/mbnrg_2b_A1B4_C1D2_deg4_v1.cpp potential/2b/poly_2b_A1B4_C1D2_deg4_nograd_v1.cpp potential/2b/poly_2b_A1B4_C1D2_deg4_grad_v1.cpp potential/2b/x2b_A1_A1_deg23_v1x.cpp potential/2b/poly_2b_A1_A1_deg23_v1.cpp potential/2b/poly_2b_A1_A1_deg23_v1x.cpp potential/2b/x2b_A1B2Z2_C1_deg5_v1x.cpp potential/2b/poly_2b_A1B2Z2_C1_deg5_v1.cpp potential/2b/poly_2b_A1B2Z2_C1_deg5_v1x.cpp
./pol.dat:./Makefile.am:threeb_sources = potential/3b/energy3b.cpp potential/3b/mbnrg_3b_A1_B1C2X2_B1C2X2_deg4_v1.cpp potential/3b/mbnrg_3b_A1B2_A1B2_A1B2_deg4_v1.cpp potential/3b/mbnrg_3b_A1B2C4_D1E2_D1E2_deg3_v1.cpp potential/3b/mbnrg_3b_A1B4_C1D2_C1D2_deg3_v1.cpp potential/3b/poly_3b_A1_B1C2X2_B1C2X2_deg4_grad_v1.cpp potential/3b/poly_3b_A1_B1C2X2_B1C2X2_deg4_nograd_v1.cpp potential/3b/poly_3b_A1B2_A1B2_A1B2_deg4_grad_v1.cpp potential/3b/poly_3b_A1B2_A1B2_A1B2_deg4_nograd_v1.cpp potential/3b/poly_3b_A1B4_C1D2_C1D2_deg3_grad_v1.cpp potential/3b/poly_3b_A1B4_C1D2_C1D2_deg3_nograd_v1.cpp potential/3b/poly-3b-h2o-ion-v1x_deg4_filtered.cpp potential/3b/poly-3b-v2x.cpp potential/3b/poly-3b-v2x-nogrd.cpp potential/3b/x3b-h2o-ion-v1x-deg4-filtered.cpp potential/3b/x3b-v2x.cpp potential/3b/poly_3b_A1B2_A1B2_A1B2_deg4_grad_vmbpbe.cpp potential/3b/mbnrg_3b_A1B2_A1B2_A1B2_deg4_vmbpbe.cpp potential/3b/poly_3b_A1B2_A1B2_A1B2_deg4_nograd_vmbpbe.cpp potential/3b/mbnrg_3b_A1_B1C2X2_B1C2X2_deg4_v1_oldswitch.cpp potential/3b/poly_3b_A1_B1C2X2_B1C2X2_deg4_grad_v1_oldswitch.cpp potential/3b/poly_3b_A1_B1C2X2_B1C2X2_deg4_nograd_v1_oldswitch.cpp
./pol.dat:./Makefile.am:fourb_sources = potential/4b/energy4b.cpp  potential/4b/mbnrg_4b_A1B2_A1B2_A1B2_A1B2_deg4_v1.cpp  potential/4b/poly_4b_A1B2_A1B2_A1B2_A1B2_deg4_grad_v1.cpp  potential/4b/poly_4b_A1B2_A1B2_A1B2_A1B2_deg4_nograd_v1.cpp
./pol.dat:./Makefile.am:ff_sources = potential/force_field/angles.cpp potential/force_field/bond.cpp potential/force_field/calculators.cpp potential/force_field/connectivity.cpp potential/force_field/dihedral.cpp potential/force_field/energyff.cpp potential/force_field/inversion.cpp potential/force_field/topology.cpp
./pol.dat:./Makefile.in:oneb_sources = potential/1b/energy1b.cpp potential/1b/mbnrg_1b_A1B3_deg5_v1.cpp potential/1b/mbnrg_1b_A2_deg8_v1.cpp potential/1b/poly_1b_A1B2_deg4_v1x.cpp potential/1b/poly_1b_A1B3_deg5_grad_v1.cpp potential/1b/poly_1b_A1B3_deg5_nograd_v1.cpp potential/1b/poly_1b_A1B4_deg5_exp0_v1.cpp potential/1b/poly_1b_A1B4_deg5_exp0_v1x.cpp potential/1b/poly_1b_A2_deg8_grad_v1.cpp potential/1b/poly_1b_A2_deg8_nograd_v1.cpp potential/1b/ps.cpp potential/1b/x1b_A1B2_deg4_v1x.cpp potential/1b/x1b_A1B4_deg5_exp0_v1x.cpp potential/1b/poly_1b_A1B2_deg6_grad_vmbpbe.cpp potential/1b/poly_1b_A1B2_deg6_nograd_vmbpbe.cpp  potential/1b/mbnrg_1b_A1B2_deg6_vmbpbe.cpp
./pol.dat:./Makefile.in:fourb_sources = potential/4b/energy4b.cpp  potential/4b/mbnrg_4b_A1B2_A1B2_A1B2_A1B2_deg4_v1.cpp  potential/4b/poly_4b_A1B2_A1B2_A1B2_A1B2_deg4_grad_v1.cpp  potential/4b/poly_4b_A1B2_A1B2_A1B2_A1B2_deg4_nograd_v1.cpp
./pol.dat:./Makefile.in:ff_sources = potential/force_field/angles.cpp potential/force_field/bond.cpp potential/force_field/calculators.cpp potential/force_field/connectivity.cpp potential/force_field/dihedral.cpp potential/force_field/energyff.cpp potential/force_field/inversion.cpp potential/force_field/topology.cpp
./pol.dat:./potential/1b/poly_1b_A1B2_deg4_v1x.cpp:    std::cerr << "Output polynomial energy: " << e << std::endl;
./pol.dat:./potential/1b/poly_1b_A1B4_deg5_exp0_v1.cpp:    std::cerr << "Output polynomial energy: " << e << std::endl;
./pol.dat:./potential/1b/poly_1b_A1B4_deg5_exp0_v1x.cpp:    std::cerr << "Output polynomial energy: " << e << std::endl;
./pol.dat:./potential/1b/.deps/libmbx_la-energy1b.Plo: potential/1b/poly_1b_A1B4_deg5_exp0_v1x.h \
./pol.dat:./potential/1b/.deps/libmbx_la-energy1b.Plo: potential/1b/poly_1b_A1B2_deg4_v1x.h potential/1b/mbnrg_1b_A2_deg8_v1.h \
./pol.dat:./potential/1b/.deps/libmbx_la-energy1b.Plo: tools/water_monomer_lp.h potential/1b/poly_1b_A2_deg8_v1.h \
./pol.dat:./potential/1b/.deps/libmbx_la-energy1b.Plo: potential/1b/poly_1b_A1B2C4_deg5_v1x.h \
./pol.dat:./potential/1b/.deps/libmbx_la-energy1b.Plo: potential/1b/mbnrg_1b_A1B3_deg5_v1.h potential/1b/poly_1b_A1B3_deg5_v1.h \
./pol.dat:./potential/1b/.deps/libmbx_la-energy1b.Plo: potential/1b/poly_1b_A1B2_deg6_vmbpbe.h tools/definitions.h \
./pol.dat:./potential/1b/.deps/libmbx_la-energy1b.Plo:potential/1b/poly_1b_A1B4_deg5_exp0_v1x.h:
./pol.dat:./potential/1b/.deps/libmbx_la-energy1b.Plo:potential/1b/poly_1b_A1B2_deg4_v1x.h:
./pol.dat:./potential/1b/.deps/libmbx_la-energy1b.Plo:potential/1b/poly_1b_A2_deg8_v1.h:
./pol.dat:./potential/1b/.deps/libmbx_la-energy1b.Plo:potential/1b/poly_1b_A1B2C4_deg5_v1x.h:
./pol.dat:./potential/1b/.deps/libmbx_la-energy1b.Plo:potential/1b/poly_1b_A1B3_deg5_v1.h:
./pol.dat:./potential/1b/.deps/libmbx_la-energy1b.Plo:potential/1b/poly_1b_A1B2_deg6_vmbpbe.h:
./pol.dat:./potential/2b/energy2b.cpp:        // The order is bc the poly were generated this way
./pol.dat:./potential/2b/energy2b.cpp:        // The order is bc the poly were generated this way
./pol.dat:./potential/2b/poly_2b_A1B2Z2_C1D2_v1x.cpp:    std::cerr << "Output polynomial energy: " << e << std::endl;
./pol.dat:./potential/2b/poly_2b_A1B2Z2_C1D4_deg3_exp0_v1x.cpp:    std::cerr << "Output polynomial energy: " << e << std::endl;
./pol.dat:./potential/2b/poly_2b_A1B2_A1B2_v1x.cpp:    std::cerr << "Output polynomial energy: " << e << std::endl;
./pol.dat:./potential/2b/poly_2b_A1B4_A1B4_deg4_exp0_v1x.cpp:    std::cerr << "Output polynomial energy: " << e << std::endl;
./pol.dat:./potential/2b/.deps/libmbx_la-energy2b.Plo: potential/2b/poly-2b-v6x.h \
./pol.dat:./potential/2b/.deps/libmbx_la-energy2b.Plo: potential/2b/poly-2b-A1B2Z2_C-v1x.h potential/2b/x2b_A1_A1_deg23_v1x.h \
./pol.dat:./potential/2b/.deps/libmbx_la-energy2b.Plo: potential/2b/poly_2b_A1_A1_deg23_v1x.h \
./pol.dat:./potential/2b/.deps/libmbx_la-energy2b.Plo: potential/2b/poly_2b_A1B4_A1B4_deg4_exp0_v1x.h \
./pol.dat:./potential/2b/.deps/libmbx_la-energy2b.Plo: potential/2b/poly_2b_A1B2Z2_C1D4_deg3_exp0_v1x.h \
./pol.dat:./potential/2b/.deps/libmbx_la-energy2b.Plo: potential/2b/x2b_A1B2_A1B2_v1x.h potential/2b/poly_2b_A1B2_A1B2_v1x.h \
./pol.dat:./potential/2b/.deps/libmbx_la-energy2b.Plo: potential/2b/poly_2b_A1B2Z2_C1_deg5_v1x.h \
./pol.dat:./potential/2b/.deps/libmbx_la-energy2b.Plo: potential/2b/poly_2b_A1B2Z2_C1D2_v1x.h \
./pol.dat:./potential/2b/.deps/libmbx_la-energy2b.Plo: tools/water_monomer_lp.h potential/2b/poly_2b_A1B4_C1D2_deg4_v1.h \
./pol.dat:./potential/2b/.deps/libmbx_la-energy2b.Plo: potential/2b/poly_2b_A2_A2_deg6_v1.h \
./pol.dat:./potential/2b/.deps/libmbx_la-energy2b.Plo: potential/2b/poly_2b_A1B2Z2_C2_deg5_v1.h \
./pol.dat:./potential/2b/.deps/libmbx_la-energy2b.Plo: potential/2b/poly_2b_A1_B1C2X2_deg5_v1.h \
./pol.dat:./potential/2b/.deps/libmbx_la-energy2b.Plo: potential/2b/poly_2b_A1_B2_deg7_v1.h \
./pol.dat:./potential/2b/.deps/libmbx_la-energy2b.Plo: potential/2b/poly_2b_A1_A1_deg9_v1.h \
./pol.dat:./potential/2b/.deps/libmbx_la-energy2b.Plo: potential/2b/poly_2b_A1_B1_deg9_v1.h \
./pol.dat:./potential/2b/.deps/libmbx_la-energy2b.Plo: potential/2b/poly_2b_A1B2C4_D1E2_deg3_v1x.h \
./pol.dat:./potential/2b/.deps/libmbx_la-energy2b.Plo: potential/2b/poly_2b_A1B3_A1B3_deg4_v1.h \
./pol.dat:./potential/2b/.deps/libmbx_la-energy2b.Plo: potential/2b/poly_2b_A1B2Z2_A1B2Z2_deg4_vmbpbe.h
./pol.dat:./potential/2b/.deps/libmbx_la-energy2b.Plo:potential/2b/poly-2b-v6x.h:
./pol.dat:./potential/2b/.deps/libmbx_la-energy2b.Plo:potential/2b/poly-2b-A1B2Z2_C-v1x.h:
./pol.dat:./potential/2b/.deps/libmbx_la-energy2b.Plo:potential/2b/poly_2b_A1_A1_deg23_v1x.h:
./pol.dat:./potential/2b/.deps/libmbx_la-energy2b.Plo:potential/2b/poly_2b_A1B4_A1B4_deg4_exp0_v1x.h:
./pol.dat:./potential/2b/.deps/libmbx_la-energy2b.Plo:potential/2b/poly_2b_A1B2Z2_C1D4_deg3_exp0_v1x.h:
./pol.dat:./potential/2b/.deps/libmbx_la-energy2b.Plo:potential/2b/poly_2b_A1B2_A1B2_v1x.h:
./pol.dat:./potential/2b/.deps/libmbx_la-energy2b.Plo:potential/2b/poly_2b_A1B2Z2_C1_deg5_v1x.h:
./pol.dat:./potential/2b/.deps/libmbx_la-energy2b.Plo:potential/2b/poly_2b_A1B2Z2_C1D2_v1x.h:
./pol.dat:./potential/2b/.deps/libmbx_la-energy2b.Plo:potential/2b/poly_2b_A1B4_C1D2_deg4_v1.h:
./pol.dat:./potential/2b/.deps/libmbx_la-energy2b.Plo:potential/2b/poly_2b_A2_A2_deg6_v1.h:
./pol.dat:./potential/2b/.deps/libmbx_la-energy2b.Plo:potential/2b/poly_2b_A1B2Z2_C2_deg5_v1.h:
./pol.dat:./potential/2b/.deps/libmbx_la-energy2b.Plo:potential/2b/poly_2b_A1_B1C2X2_deg5_v1.h:
./pol.dat:./potential/2b/.deps/libmbx_la-energy2b.Plo:potential/2b/poly_2b_A1_B2_deg7_v1.h:
./pol.dat:./potential/2b/.deps/libmbx_la-energy2b.Plo:potential/2b/poly_2b_A1_A1_deg9_v1.h:
./pol.dat:./potential/2b/.deps/libmbx_la-energy2b.Plo:potential/2b/poly_2b_A1_B1_deg9_v1.h:
./pol.dat:./potential/2b/.deps/libmbx_la-energy2b.Plo:potential/2b/poly_2b_A1B2C4_D1E2_deg3_v1x.h:
./pol.dat:./potential/2b/.deps/libmbx_la-energy2b.Plo:potential/2b/poly_2b_A1B3_A1B3_deg4_v1.h:
./pol.dat:./potential/2b/.deps/libmbx_la-energy2b.Plo:potential/2b/poly_2b_A1B2Z2_A1B2Z2_deg4_vmbpbe.h:
./pol.dat:./potential/3b/energy3b.h:#include "potential/3b/poly-3b-v2x.h"
./pol.dat:./potential/3b/poly-3b-h2o-ion-v1x_deg4_filtered.cpp:    std::cerr << "Output polynomial energy: " << e << std::endl;
./pol.dat:./potential/3b/poly-3b-v2x.cpp:    std::cerr << "Output polynomial energy: " << e << std::endl;
./pol.dat:./potential/3b/poly_3b_A1B4_C1D2_C1D2_deg3_grad_v1.cpp:    std::cerr << "Output polynomial energy: " << e << std::endl;
./pol.dat:./potential/3b/.deps/libmbx_la-energy3b.Plo: /usr/include/bits/mathinline.h potential/3b/poly-3b-v2x.h \
./pol.dat:./potential/3b/.deps/libmbx_la-energy3b.Plo: potential/3b/poly-3b-h2o-ion-v1x_deg4_filtered.h \
./pol.dat:./potential/3b/.deps/libmbx_la-energy3b.Plo: potential/3b/poly_3b_A1B4_C1D2_C1D2_deg3_v1.h \
./pol.dat:./potential/3b/.deps/libmbx_la-energy3b.Plo: potential/3b/poly_3b_A1B2_A1B2_A1B2_deg4_v1.h \
./pol.dat:./potential/3b/.deps/libmbx_la-energy3b.Plo: potential/3b/poly_3b_A1_B1C2X2_B1C2X2_deg4_v1.h \
./pol.dat:./potential/3b/.deps/libmbx_la-energy3b.Plo: potential/3b/poly_3b_A1B2C4_D1E2_D1E2_deg3_v1.h \
./pol.dat:./potential/3b/.deps/libmbx_la-energy3b.Plo: potential/3b/poly_3b_A1B2_A1B2_A1B2_deg4_vmbpbe.h
./pol.dat:./potential/3b/.deps/libmbx_la-energy3b.Plo:potential/3b/poly-3b-v2x.h:
./pol.dat:./potential/3b/.deps/libmbx_la-energy3b.Plo:potential/3b/poly-3b-h2o-ion-v1x_deg4_filtered.h:
./pol.dat:./potential/3b/.deps/libmbx_la-energy3b.Plo:potential/3b/poly_3b_A1B4_C1D2_C1D2_deg3_v1.h:
./pol.dat:./potential/3b/.deps/libmbx_la-energy3b.Plo:potential/3b/poly_3b_A1B2_A1B2_A1B2_deg4_v1.h:
./pol.dat:./potential/3b/.deps/libmbx_la-energy3b.Plo:potential/3b/poly_3b_A1_B1C2X2_B1C2X2_deg4_v1.h:
./pol.dat:./potential/3b/.deps/libmbx_la-energy3b.Plo:potential/3b/poly_3b_A1B2C4_D1E2_D1E2_deg3_v1.h:
./pol.dat:./potential/3b/.deps/libmbx_la-energy3b.Plo:potential/3b/poly_3b_A1B2_A1B2_A1B2_deg4_vmbpbe.h:
./pol.dat:./potential/4b/.deps/libmbx_la-energy4b.Plo: potential/4b/poly_4b_A1B2_A1B2_A1B2_A1B2_deg4_v1.h
./pol.dat:./potential/4b/.deps/libmbx_la-energy4b.Plo:potential/4b/poly_4b_A1B2_A1B2_A1B2_A1B2_deg4_v1.h:
./pol.dat:./potential/electrostatics/electrostatics.cpp:    // Induced Electrostatic energy (chg-dip, dip-dip, pol)
./pol.dat:./potential/electrostatics/electrostatics.cpp:    // Induced Electrostatic energy (chg-dip, dip-dip, pol)
./pol.dat:./potential/electrostatics/electrostatics.cpp:            double fulldummy_rec_energy = pme_solver_.computeEFVRecIsotropicInducedDipoles(
./pol.dat:./potential/electrostatics/electrostatics.cpp:            double fulldummy_rec_energy = pme_solver_.computeEFVRecIsotropicInducedDipoles(
./pol.dat:./potential/force_field/energyff.cpp:            // energy match dlpoly. It is currently unknown why dlpoly chooses to
./pol.dat:./potential/force_field/energyff.cpp:            // Get topology gradient. Each bond will contribute a gradient to
./pol.dat:./potential/force_field/energyff.cpp:            double delta_grad = bond->GetTopologyGradient(distance);
./pol.dat:./potential/force_field/energyff.cpp:            // dimension for each atom in the topology
./pol.dat:./potential/force_field/energyff.cpp:            // Get topology gradient. Each angle will contribute a gradient to
./pol.dat:./potential/force_field/energyff.cpp:            double delta_grad = angle->GetTopologyGradient(theta);
./pol.dat:./potential/force_field/energyff.cpp:                // idx = 0 is atom on the end. Dlpoly defines this to be atom j. This is
./pol.dat:./potential/force_field/energyff.cpp:                    // to dl_poly manual)
./pol.dat:./potential/force_field/energyff.cpp:            // Get topology gradient. Each dihedral angle will contribute a gradient to
./pol.dat:./potential/force_field/energyff.cpp:            double delta_grad = dihedral->GetTopologyGradient(phi);
./pol.dat:./potential/force_field/energyff.cpp:            // Multiply by minus 1 because we want gradient not force. Check Dlpoly
./pol.dat:./potential/force_field/energyff.cpp:            // energy match dlpoly. It is currently unknown why dlpoly chooses to
./pol.dat:./potential/force_field/energyff.cpp:            // in the incorrect order from dlpoly
./pol.dat:./potential/force_field/energyff.cpp:                double delta_grad = (1.0 / (3.0 * sin(phis[i]))) * inversion->GetTopologyGradient(phis[i]);
./pol.dat:./potential/force_field/.deps/libmbx_la-energyff.Plo: potential/force_field/topology.h \
./pol.dat:./potential/force_field/.deps/libmbx_la-energyff.Plo: potential/force_field/inversion.h potential/force_field/topology.h \
./pol.dat:./potential/force_field/.deps/libmbx_la-energyff.Plo:potential/force_field/topology.h:
./pol.dat:./potential/force_field/.deps/libmbx_la-energyff.Plo:potential/force_field/topology.h:
./pol.dat:Binary file ./potential/force_field/libmbx_la-energyff.o matches
./pol.dat:./unittests/Makefile.am:TESTS = unittest-angle unittest-bond unittest-buckingham unittest-bucktools unittest-connectivity unittest-dihedral unittest-dispersion unittest-disptools unittest-electrostatics unittest-energy1b unittest-energy2b unittest-energy3b unittest-energy4b unittest-energyff unittest-ffcalculators unittest-gamma unittest-inversion unittest-lj unittest-ljtools unittest-pme-nopolarization unittest-pme-nopolarization-findif unittest-pme-withpolarization unittest-pme-withpolarization-findif unittest-poly-1b unittest-poly-2b unittest-poly-3b unittest-poly-holder-1b unittest-poly-holder-2b unittest-poly-holder-3b unittest-ps unittest-system unittest-systools unittest-tools unittest-topology
./pol.dat:./unittests/Makefile.am:check_PROGRAMS = unittest-angle unittest-bond unittest-buckingham unittest-bucktools unittest-connectivity unittest-dihedral unittest-dispersion unittest-disptools unittest-electrostatics unittest-energy1b unittest-energy2b unittest-energy3b unittest-energy4b unittest-energyff unittest-ffcalculators unittest-gamma unittest-inversion unittest-lj unittest-ljtools unittest-pme-nopolarization unittest-pme-nopolarization-findif unittest-pme-withpolarization unittest-pme-withpolarization-findif unittest-poly-1b unittest-poly-2b unittest-poly-3b unittest-poly-holder-1b unittest-poly-holder-2b unittest-poly-holder-3b unittest-ps unittest-system unittest-systools unittest-tools unittest-topology
./pol.dat:./unittests/unittest-system.cpp:    // Calculate energy to fill dipole vectors
./potential/1b/energy1b.cpp:#include "energy1b.h"
./potential/1b/energy1b.cpp:double get_1b_energy(std::string mon1, size_t nm, std::vector<double> xyz1, std::vector<size_t> &bad_idxs) {
./potential/1b/energy1b.cpp:    // Look for the proper call to energy depending on the monomer id
./potential/1b/energy1b.cpp:    // Add total energy, and check for too high energies
./potential/1b/energy1b.cpp:    std::cerr << "Output energy: " << e << std::endl;
./potential/1b/energy1b.cpp:    // Return energy
./potential/1b/energy1b.cpp:double get_1b_energy(std::string mon1, size_t nm, std::vector<double> xyz1, std::vector<double> &grad1,
./potential/1b/energy1b.cpp:    // Look for the proper call to energy depending on the monomer id
./potential/1b/energy1b.cpp:    // Add total energy, and check for too high energies
./potential/1b/energy1b.cpp:    std::cerr << "Output energy: " << e << std::endl;
./potential/1b/energy1b.cpp:    // Return energy
./potential/1b/energy1b.h: * @file energy1b.h
./potential/1b/energy1b.h: * @brief Contains the calls to the one-body energy with and without gradients
./potential/1b/energy1b.h: * @brief Sets the namespace for the energy calls for the 1 body energy
./potential/1b/energy1b.h: * @brief Gets the one body energy for a given set of monomers of the same
./potential/1b/energy1b.h: * of the 1b energy of those monomers.
./potential/1b/energy1b.h: * has an energy larger than the value set in definitions.h (EMAX1B)
./potential/1b/energy1b.h:double get_1b_energy(std::string mon, size_t nm, std::vector<double> xyz1, std::vector<size_t> &bad_idxs);
./potential/1b/energy1b.h: * @brief Gets the one body energy for a given set of monomers of the same
./potential/1b/energy1b.h: * of the 1b energy of those monomers and their corresponding gradients.
./potential/1b/energy1b.h: * @param[in,out] grad Gradients of the one-body energy
./potential/1b/energy1b.h: * has an energy larger than the value set in definitions.h (EMAX1B)
./potential/1b/energy1b.h:double get_1b_energy(std::string mon1, size_t nm, std::vector<double> xyz1, std::vector<double> &grad1,
./potential/1b/mbnrg_1b_A2_deg8_v1.h:     * @brief Computes the one body energy for the monomers
./potential/1b/mbnrg_1b_A2_deg8_v1.h:     * @return Vector of doubles with the energy.
./potential/1b/mbnrg_1b_A2_deg8_v1.h:     * @brief Computes the one body energy for the monomers
./potential/1b/mbnrg_1b_A2_deg8_v1.h:     * @return Vector of doubles with the energy.
./potential/1b/poly_1b_A1B2_deg4_v1x.cpp:    std::cerr << "Output polynomial energy: " << e << std::endl;
./potential/1b/poly_1b_A1B4_deg5_exp0_v1.cpp:    std::cerr << "Output polynomial energy: " << e << std::endl;
./potential/1b/poly_1b_A1B4_deg5_exp0_v1x.cpp:    std::cerr << "Output polynomial energy: " << e << std::endl;
./potential/1b/ps.cpp:    // energy
./potential/1b/ps.h: * @brief This file contains the calls for the energy of water
./potential/1b/ps.h: * @brief Namespace of the water energy functions
./potential/1b/ps.h: * @brief Computes the energy and gradients for a water monomer
./potential/1b/ps.h: * Given the coordinates of a water monomer, it returns the 1b energy of
./potential/1b/ps.h: * @return Deformation energy of the water molecule
./potential/1b/ps.h: * @brief Computes the energy and gradients for a water monomer
./potential/1b/ps.h: * Given the coordinates of a water monomer, it returns the 1b energy of
./potential/1b/ps.h: * @return Deformation energy of all the water molecules in a vector
./potential/1b/x1b_A1B2_deg4_v1x.h:     * @brief Computes the one body energy for the monomers
./potential/1b/x1b_A1B2_deg4_v1x.h:     * @brief Computes the one body energy for the monomers and their gradients
./potential/1b/x1b_A1B4_deg5_exp0_v1x.h:     * @brief Computes the one body energy for the monomers
./potential/1b/x1b_A1B4_deg5_exp0_v1x.h:     * @brief Computes the one body energy for the monomers and their gradients
./potential/1b/.deps/libmbx_la-energy1b.Plo:potential/1b/libmbx_la-energy1b.lo: potential/1b/energy1b.cpp \
./potential/1b/.deps/libmbx_la-energy1b.Plo: /usr/include/stdc-predef.h potential/1b/energy1b.h \
./potential/1b/.deps/libmbx_la-energy1b.Plo:potential/1b/energy1b.h:
Binary file ./potential/1b/libmbx_la-energy1b.o matches
./potential/1b/libmbx_la-energy1b.lo:# potential/1b/libmbx_la-energy1b.lo - a libtool object file
./potential/1b/libmbx_la-energy1b.lo:non_pic_object='libmbx_la-energy1b.o'
./potential/2b/energy2b.cpp:#include "energy2b.h"
./potential/2b/energy2b.cpp: * @file energy2b.cpp
./potential/2b/energy2b.cpp: * @brief Contains the implementation of the 2b energy calls
./potential/2b/energy2b.cpp:double get_2b_energy(std::string mon1, std::string mon2, size_t nm, std::vector<double> xyz1,
./potential/2b/energy2b.cpp:    double energy = 0.0;
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), nm);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz2.data(), xyz1.data(), nm);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), nm);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz2.data(), xyz1.data(), nm);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), nm);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), nm);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), nm);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), nm);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), nm);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), nm);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), nm);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), nm);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), nm);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), nm);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), nm);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), nm);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), nm);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz2.data(), xyz1.data(), nm);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz2.data(), xyz1.data(), nm);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz2.data(), xyz1.data(), nm);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), nm);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), nm);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz2.data(), xyz1.data(), nm);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), nm);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), nm);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), nm);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), nm);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz2.data(), xyz1.data(), nm);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), nm);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz2.data(), xyz1.data(), nm);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz2.data(), xyz1.data(), nm);
./potential/2b/energy2b.cpp:        energy = 0.0;
./potential/2b/energy2b.cpp:    std::cerr << "Output energy: " << energy << std::endl;
./potential/2b/energy2b.cpp:    return energy;
./potential/2b/energy2b.cpp:double get_2b_energy(std::string mon1, std::string mon2, size_t nm, std::vector<double> xyz1, std::vector<double> xyz2,
./potential/2b/energy2b.cpp:    double energy = 0.0;
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), grad1.data(), grad2.data(), nm, virial);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz2.data(), xyz1.data(), grad2.data(), grad1.data(), nm, virial);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), grad1.data(), grad2.data(), nm, virial);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz2.data(), xyz1.data(), grad2.data(), grad1.data(), nm, virial);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), grad1.data(), grad2.data(), nm, virial);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), grad1.data(), grad2.data(), nm, virial);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), grad1.data(), grad2.data(), nm, virial);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), grad1.data(), grad2.data(), nm, virial);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), grad1.data(), grad2.data(), nm, virial);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), grad1.data(), grad2.data(), nm, virial);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), grad1.data(), grad2.data(), nm, virial);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), grad1.data(), grad2.data(), nm, virial);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), grad1.data(), grad2.data(), nm, virial);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), grad1.data(), grad2.data(), nm, virial);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), grad1.data(), grad2.data(), nm, virial);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), grad1.data(), grad2.data(), nm, virial);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz2.data(), xyz1.data(), grad2.data(), grad1.data(), nm, virial);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz2.data(), xyz1.data(), grad2.data(), grad1.data(), nm, virial);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz2.data(), xyz1.data(), grad2.data(), grad1.data(), nm, virial);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), grad1.data(), grad2.data(), nm, virial);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), grad1.data(), grad2.data(), nm, virial);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz2.data(), xyz1.data(), grad2.data(), grad1.data(), nm, virial);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), grad1.data(), grad2.data(), nm, virial);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), grad1.data(), grad2.data(), nm, virial);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), grad1.data(), grad2.data(), nm, virial);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), grad1.data(), grad2.data(), nm, virial);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), grad1.data(), grad2.data(), nm, virial);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz2.data(), xyz1.data(), grad2.data(), grad1.data(), nm, virial);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz2.data(), xyz1.data(), grad2.data(), grad1.data(), nm, virial);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz2.data(), xyz1.data(), grad2.data(), grad1.data(), nm, virial);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), grad1.data(), grad2.data(), nm, virial);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), grad1.data(), grad2.data(), nm, virial);
./potential/2b/energy2b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), grad1.data(), grad2.data(), nm, virial);
./potential/2b/energy2b.cpp:        energy = 0.0;
./potential/2b/energy2b.cpp:    std::cerr << "Output energy: " << energy << std::endl;
./potential/2b/energy2b.cpp:    return energy;
./potential/2b/energy2b.h: * @file energy2b.h
./potential/2b/energy2b.h: * @brief Contains the calls to the two-body energy with and without gradients
./potential/2b/energy2b.h: * @brief Sets the namespace for the energy calls for the 2 body energy
./potential/2b/energy2b.h: * @brief Gets the two body energy for a given set of dimers
./potential/2b/energy2b.h: * of the 2b energy of those dimers. A dimer will be mon1-mon2.
./potential/2b/energy2b.h:double get_2b_energy(std::string m1, std::string m2, size_t nm, std::vector<double> xyz1, std::vector<double> xyz2);
./potential/2b/energy2b.h: * @brief Gets the two body energy for a given set of dimers
./potential/2b/energy2b.h: * of the 2b energy of those dimers. A dimer will be mon1-mon2.
./potential/2b/energy2b.h:double get_2b_energy(std::string m1, std::string m2, size_t nm, std::vector<double> xyz1, std::vector<double> xyz2,
./potential/2b/mbnrg_2b_A1B2Z2_A1B2Z2_deg4_vmbpbe.cpp:    double energy = 0.0;
./potential/2b/mbnrg_2b_A1B2Z2_A1B2Z2_deg4_vmbpbe.cpp:    for (size_t i = 0; i < n; i++) energy += energies_sw[i];
./potential/2b/mbnrg_2b_A1B2Z2_A1B2Z2_deg4_vmbpbe.cpp:    return energy;
./potential/2b/mbnrg_2b_A1B2Z2_A1B2Z2_deg4_vmbpbe.cpp:    double energy = 0.0;
./potential/2b/mbnrg_2b_A1B2Z2_A1B2Z2_deg4_vmbpbe.cpp:    for (size_t i = 0; i < n; i++) energy += energies_sw[i];
./potential/2b/mbnrg_2b_A1B2Z2_A1B2Z2_deg4_vmbpbe.cpp:    return energy;
./potential/2b/mbnrg_2b_A1B2Z2_C2_deg5_v1.cpp:    double energy = 0.0;
./potential/2b/mbnrg_2b_A1B2Z2_C2_deg5_v1.cpp:    for (size_t i = 0; i < n; i++) energy += energies_sw[i];
./potential/2b/mbnrg_2b_A1B2Z2_C2_deg5_v1.cpp:    return energy;
./potential/2b/mbnrg_2b_A1B2Z2_C2_deg5_v1.cpp:    double energy = 0.0;
./potential/2b/mbnrg_2b_A1B2Z2_C2_deg5_v1.cpp:    for (size_t i = 0; i < n; i++) energy += energies_sw[i];
./potential/2b/mbnrg_2b_A1B2Z2_C2_deg5_v1.cpp:    return energy;
./potential/2b/mbnrg_2b_A1B2Z2_C2_deg5_v1.h:     * @brief Computes the one body energy for the monomers
./potential/2b/mbnrg_2b_A1B2Z2_C2_deg5_v1.h:     * @return Double with the energy.
./potential/2b/mbnrg_2b_A1B2Z2_C2_deg5_v1.h:     * @brief Computes the one body energy for the monomers
./potential/2b/mbnrg_2b_A1B2Z2_C2_deg5_v1.h:     * @return Double with the energy.
./potential/2b/mbnrg_2b_A1B3_A1B3_deg4_v1.cpp:    double energy = 0.0;
./potential/2b/mbnrg_2b_A1B3_A1B3_deg4_v1.cpp:    for (size_t i = 0; i < n; i++) energy += energies_sw[i];
./potential/2b/mbnrg_2b_A1B3_A1B3_deg4_v1.cpp:    return energy;
./potential/2b/mbnrg_2b_A1B3_A1B3_deg4_v1.cpp:    double energy = 0.0;
./potential/2b/mbnrg_2b_A1B3_A1B3_deg4_v1.cpp:    for (size_t i = 0; i < n; i++) energy += energies_sw[i];
./potential/2b/mbnrg_2b_A1B3_A1B3_deg4_v1.cpp:    return energy;
./potential/2b/mbnrg_2b_A1B4_C1D2_deg4_v1.cpp:    double energy = 0.0;
./potential/2b/mbnrg_2b_A1B4_C1D2_deg4_v1.cpp:    for (size_t i = 0; i < n; i++) energy += energies_sw[i];
./potential/2b/mbnrg_2b_A1B4_C1D2_deg4_v1.cpp:    return energy;
./potential/2b/mbnrg_2b_A1B4_C1D2_deg4_v1.cpp:    double energy = 0.0;
./potential/2b/mbnrg_2b_A1B4_C1D2_deg4_v1.cpp:    for (size_t i = 0; i < n; i++) energy += energies_sw[i];
./potential/2b/mbnrg_2b_A1B4_C1D2_deg4_v1.cpp:    return energy;
./potential/2b/mbnrg_2b_A1B4_C1D2_deg4_v1.h:     * @brief Computes the one body energy for the monomers
./potential/2b/mbnrg_2b_A1B4_C1D2_deg4_v1.h:     * @return Double with the energy.
./potential/2b/mbnrg_2b_A1B4_C1D2_deg4_v1.h:     * @brief Computes the one body energy for the monomers
./potential/2b/mbnrg_2b_A1B4_C1D2_deg4_v1.h:     * @return Double with the energy.
./potential/2b/mbnrg_2b_A1_A1_deg9_v1.cpp:    double energy = 0.0;
./potential/2b/mbnrg_2b_A1_A1_deg9_v1.cpp:    for (size_t i = 0; i < n; i++) energy += energies_sw[i];
./potential/2b/mbnrg_2b_A1_A1_deg9_v1.cpp:    return energy;
./potential/2b/mbnrg_2b_A1_A1_deg9_v1.cpp:    double energy = 0.0;
./potential/2b/mbnrg_2b_A1_A1_deg9_v1.cpp:    for (size_t i = 0; i < n; i++) energy += energies_sw[i];
./potential/2b/mbnrg_2b_A1_A1_deg9_v1.cpp:    return energy;
./potential/2b/mbnrg_2b_A1_A1_deg9_v1.h:     * @brief Computes the one body energy for the monomers
./potential/2b/mbnrg_2b_A1_A1_deg9_v1.h:     * @return Double with the energy.
./potential/2b/mbnrg_2b_A1_A1_deg9_v1.h:     * @brief Computes the one body energy for the monomers
./potential/2b/mbnrg_2b_A1_A1_deg9_v1.h:     * @return Double with the energy.
./potential/2b/mbnrg_2b_A1_B1C2X2_deg5_v1.cpp:    double energy = 0.0;
./potential/2b/mbnrg_2b_A1_B1C2X2_deg5_v1.cpp:    for (size_t i = 0; i < n; i++) energy += energies_sw[i];
./potential/2b/mbnrg_2b_A1_B1C2X2_deg5_v1.cpp:    return energy;
./potential/2b/mbnrg_2b_A1_B1C2X2_deg5_v1.cpp:    double energy = 0.0;
./potential/2b/mbnrg_2b_A1_B1C2X2_deg5_v1.cpp:    for (size_t i = 0; i < n; i++) energy += energies_sw[i];
./potential/2b/mbnrg_2b_A1_B1C2X2_deg5_v1.cpp:    return energy;
./potential/2b/mbnrg_2b_A1_B1C2X2_deg5_v1.h:     * @brief Computes the one body energy for the monomers
./potential/2b/mbnrg_2b_A1_B1C2X2_deg5_v1.h:     * @return Double with the energy.
./potential/2b/mbnrg_2b_A1_B1C2X2_deg5_v1.h:     * @brief Computes the one body energy for the monomers
./potential/2b/mbnrg_2b_A1_B1C2X2_deg5_v1.h:     * @return Double with the energy.
./potential/2b/mbnrg_2b_A1_B1_deg9_v1.cpp:    double energy = 0.0;
./potential/2b/mbnrg_2b_A1_B1_deg9_v1.cpp:    for (size_t i = 0; i < n; i++) energy += energies_sw[i];
./potential/2b/mbnrg_2b_A1_B1_deg9_v1.cpp:    return energy;
./potential/2b/mbnrg_2b_A1_B1_deg9_v1.cpp:    double energy = 0.0;
./potential/2b/mbnrg_2b_A1_B1_deg9_v1.cpp:    for (size_t i = 0; i < n; i++) energy += energies_sw[i];
./potential/2b/mbnrg_2b_A1_B1_deg9_v1.cpp:    return energy;
./potential/2b/mbnrg_2b_A1_B1_deg9_v1.h:     * @brief Computes the one body energy for the monomers
./potential/2b/mbnrg_2b_A1_B1_deg9_v1.h:     * @return Double with the energy.
./potential/2b/mbnrg_2b_A1_B1_deg9_v1.h:     * @brief Computes the one body energy for the monomers
./potential/2b/mbnrg_2b_A1_B1_deg9_v1.h:     * @return Double with the energy.
./potential/2b/mbnrg_2b_A1_B2_deg7_v1.cpp:    double energy = 0.0;
./potential/2b/mbnrg_2b_A1_B2_deg7_v1.cpp:    for (size_t i = 0; i < n; i++) energy += energies_sw[i];
./potential/2b/mbnrg_2b_A1_B2_deg7_v1.cpp:    return energy;
./potential/2b/mbnrg_2b_A1_B2_deg7_v1.cpp:    double energy = 0.0;
./potential/2b/mbnrg_2b_A1_B2_deg7_v1.cpp:    for (size_t i = 0; i < n; i++) energy += energies_sw[i];
./potential/2b/mbnrg_2b_A1_B2_deg7_v1.cpp:    return energy;
./potential/2b/mbnrg_2b_A1_B2_deg7_v1.h:     * @brief Computes the one body energy for the monomers
./potential/2b/mbnrg_2b_A1_B2_deg7_v1.h:     * @return Double with the energy.
./potential/2b/mbnrg_2b_A1_B2_deg7_v1.h:     * @brief Computes the one body energy for the monomers
./potential/2b/mbnrg_2b_A1_B2_deg7_v1.h:     * @return Double with the energy.
./potential/2b/mbnrg_2b_A2_A2_deg6_v1.cpp:    double energy = 0.0;
./potential/2b/mbnrg_2b_A2_A2_deg6_v1.cpp:    for (size_t i = 0; i < n; i++) energy += energies_sw[i];
./potential/2b/mbnrg_2b_A2_A2_deg6_v1.cpp:    return energy;
./potential/2b/mbnrg_2b_A2_A2_deg6_v1.cpp:    double energy = 0.0;
./potential/2b/mbnrg_2b_A2_A2_deg6_v1.cpp:    for (size_t i = 0; i < n; i++) energy += energies_sw[i];
./potential/2b/mbnrg_2b_A2_A2_deg6_v1.cpp:    return energy;
./potential/2b/mbnrg_2b_A2_A2_deg6_v1.h:     * @brief Computes the one body energy for the monomers
./potential/2b/mbnrg_2b_A2_A2_deg6_v1.h:     * @return Double with the energy.
./potential/2b/mbnrg_2b_A2_A2_deg6_v1.h:     * @brief Computes the one body energy for the monomers
./potential/2b/mbnrg_2b_A2_A2_deg6_v1.h:     * @return Double with the energy.
./potential/2b/poly-2b-A1B2Z2_C-v1.cpp:    std::vector<double> energy(nd, 0.0);
./potential/2b/poly-2b-A1B2Z2_C-v1.cpp:        energy[nv] =
./potential/2b/poly-2b-A1B2Z2_C-v1.cpp:    return energy;
./potential/2b/poly-2b-A1B2Z2_C-v1x.cpp:    std::vector<double> energy(nd, 0.0);
./potential/2b/poly-2b-A1B2Z2_C-v1x.cpp:        energy[nv] = (t1 + t12) * t7 + (t1 + t25 + t41) * t33 + (t44 + t55 + t74 + t116) * t98 +
./potential/2b/poly-2b-A1B2Z2_C-v1x.cpp:    for (size_t j = 0; j < energy.size(); j++) {
./potential/2b/poly-2b-A1B2Z2_C-v1x.cpp:        std::cerr << energy[j] << " , ";
./potential/2b/poly-2b-A1B2Z2_C-v1x.cpp:    return energy;
./potential/2b/poly-2b-v6x-nogrd.cpp:    std::vector<double> energy(nd, 0.0);
./potential/2b/poly-2b-v6x-nogrd.cpp:        energy[nv] = t2724 + t7682;
./potential/2b/poly-2b-v6x-nogrd.cpp:    return energy;
./potential/2b/poly-2b-v6x.cpp:    std::vector<double> energy(nd, 0.0);
./potential/2b/poly-2b-v6x.cpp:        energy[nv] = t4988 + t7682;
./potential/2b/poly-2b-v6x.cpp:    for (size_t j = 0; j < energy.size(); j++) {
./potential/2b/poly-2b-v6x.cpp:        std::cerr << energy[j] << " , ";
./potential/2b/poly-2b-v6x.cpp:    return energy;
./potential/2b/poly_2b_A1B2Z2_C1D2_v1x.cpp:    std::cerr << "Output polynomial energy: " << e << std::endl;
./potential/2b/poly_2b_A1B2Z2_C1D4_deg3_exp0_v1x.cpp:    std::cerr << "Output polynomial energy: " << e << std::endl;
./potential/2b/poly_2b_A1B2_A1B2_v1x.cpp:    std::cerr << "Output polynomial energy: " << e << std::endl;
./potential/2b/poly_2b_A1B4_A1B4_deg4_exp0_v1x.cpp:    std::cerr << "Output polynomial energy: " << e << std::endl;
./potential/2b/x2b-A1B2Z2_C-v1x.cpp:    std::vector<double> energy(nd, 0.0);
./potential/2b/x2b-A1B2Z2_C-v1x.cpp:        energy[dimers_todo[i]] = e2b[i];
./potential/2b/x2b-A1B2Z2_C-v1x.cpp:        e += sw * energy[i];
./potential/2b/x2b-A1B2Z2_C-v1x.cpp:    std::cerr << "Output energy: " << e << std::endl;
./potential/2b/x2b-A1B2Z2_C-v1x.cpp:    std::vector<double> energy(nd, 0.0);
./potential/2b/x2b-A1B2Z2_C-v1x.cpp:    std::cerr << "Output energy: " << e << std::endl;
./potential/2b/x2b-v9x.cpp:    std::vector<double> energy(nd, 0.0);
./potential/2b/x2b-v9x.cpp:        energy[dimers_todo[i]] = e2b[i];
./potential/2b/x2b-v9x.cpp:        e += sw * energy[i];
./potential/2b/x2b-v9x.cpp:    std::cerr << "Output energy: " << e << std::endl;
./potential/2b/x2b-v9x.cpp:    std::vector<double> energy(nd, 0.0);
./potential/2b/x2b-v9x.cpp:    std::cerr << "Output energy: " << e << std::endl;
./potential/2b/x2b_A1B2C4_D1E2_deg3_v1x.cpp:    double energy = 0.0;
./potential/2b/x2b_A1B2C4_D1E2_deg3_v1x.cpp:        energy += energies[i];
./potential/2b/x2b_A1B2C4_D1E2_deg3_v1x.cpp:    return energy;
./potential/2b/x2b_A1B2C4_D1E2_deg3_v1x.cpp:    double energy = 0.0;
./potential/2b/x2b_A1B2C4_D1E2_deg3_v1x.cpp:        energy += energies[i];
./potential/2b/x2b_A1B2C4_D1E2_deg3_v1x.cpp:    return energy;
./potential/2b/x2b_A1B2Z2_C1D2_v1x.cpp:    double energy = 0.0;
./potential/2b/x2b_A1B2Z2_C1D2_v1x.cpp:        energy += energies[i];
./potential/2b/x2b_A1B2Z2_C1D2_v1x.cpp:    std::cerr << "Output energy: " << energy << std::endl;
./potential/2b/x2b_A1B2Z2_C1D2_v1x.cpp:    return energy;
./potential/2b/x2b_A1B2Z2_C1D2_v1x.cpp:    double energy = 0.0;
./potential/2b/x2b_A1B2Z2_C1D2_v1x.cpp:        energy += energies[i];
./potential/2b/x2b_A1B2Z2_C1D2_v1x.cpp:    std::cerr << "Output energy: " << energy << std::endl;
./potential/2b/x2b_A1B2Z2_C1D2_v1x.cpp:    return energy;
./potential/2b/x2b_A1B2Z2_C1D4_deg3_exp0_v1x.cpp:    double energy = 0.0;
./potential/2b/x2b_A1B2Z2_C1D4_deg3_exp0_v1x.cpp:        energy += energies[i];
./potential/2b/x2b_A1B2Z2_C1D4_deg3_exp0_v1x.cpp:    std::cerr << "Output energy: " << energy << std::endl;
./potential/2b/x2b_A1B2Z2_C1D4_deg3_exp0_v1x.cpp:    return energy;
./potential/2b/x2b_A1B2Z2_C1D4_deg3_exp0_v1x.cpp:    double energy = 0.0;
./potential/2b/x2b_A1B2Z2_C1D4_deg3_exp0_v1x.cpp:        energy += energies[i];
./potential/2b/x2b_A1B2Z2_C1D4_deg3_exp0_v1x.cpp:    std::cerr << "Output energy: " << energy << std::endl;
./potential/2b/x2b_A1B2Z2_C1D4_deg3_exp0_v1x.cpp:    return energy;
./potential/2b/x2b_A1B2Z2_C1_deg5_v1x.cpp:    double energy = 0.0;
./potential/2b/x2b_A1B2Z2_C1_deg5_v1x.cpp:      energy += energies[i];
./potential/2b/x2b_A1B2Z2_C1_deg5_v1x.cpp:    return energy;
./potential/2b/x2b_A1B2Z2_C1_deg5_v1x.cpp:    double energy = 0.0;
./potential/2b/x2b_A1B2Z2_C1_deg5_v1x.cpp:      energy += energies[i];
./potential/2b/x2b_A1B2Z2_C1_deg5_v1x.cpp:    return energy;
./potential/2b/x2b_A1B2_A1B2_v1x.cpp:    double energy = 0.0;
./potential/2b/x2b_A1B2_A1B2_v1x.cpp:        energy += energies[i];
./potential/2b/x2b_A1B2_A1B2_v1x.cpp:    std::cerr << "Output energy: " << energy << std::endl;
./potential/2b/x2b_A1B2_A1B2_v1x.cpp:    return energy;
./potential/2b/x2b_A1B2_A1B2_v1x.cpp:    double energy = 0.0;
./potential/2b/x2b_A1B2_A1B2_v1x.cpp:        energy += energies[i];
./potential/2b/x2b_A1B2_A1B2_v1x.cpp:    std::cerr << "Output energy: " << energy << std::endl;
./potential/2b/x2b_A1B2_A1B2_v1x.cpp:    return energy;
./potential/2b/x2b_A1B4_A1B4_deg4_exp0_v1x.cpp:    double energy = 0.0;
./potential/2b/x2b_A1B4_A1B4_deg4_exp0_v1x.cpp:        energy += energies[i];
./potential/2b/x2b_A1B4_A1B4_deg4_exp0_v1x.cpp:    std::cerr << "Output energy: " << energy << std::endl;
./potential/2b/x2b_A1B4_A1B4_deg4_exp0_v1x.cpp:    return energy;
./potential/2b/x2b_A1B4_A1B4_deg4_exp0_v1x.cpp:    double energy = 0.0;
./potential/2b/x2b_A1B4_A1B4_deg4_exp0_v1x.cpp:        energy += energies[i];
./potential/2b/x2b_A1B4_A1B4_deg4_exp0_v1x.cpp:    std::cerr << "Output energy: " << energy << std::endl;
./potential/2b/x2b_A1B4_A1B4_deg4_exp0_v1x.cpp:    return energy;
./potential/2b/x2b_A1_A1_deg23_v1x.cpp:    double energy = 0.0;
./potential/2b/x2b_A1_A1_deg23_v1x.cpp:      energy += energies[i];
./potential/2b/x2b_A1_A1_deg23_v1x.cpp:    return energy;
./potential/2b/x2b_A1_A1_deg23_v1x.cpp:    double energy = 0.0;
./potential/2b/x2b_A1_A1_deg23_v1x.cpp:      energy += energies[i];
./potential/2b/x2b_A1_A1_deg23_v1x.cpp:    return energy;
./potential/2b/.deps/libmbx_la-energy2b.Plo:potential/2b/libmbx_la-energy2b.lo: potential/2b/energy2b.cpp \
./potential/2b/.deps/libmbx_la-energy2b.Plo: /usr/include/stdc-predef.h potential/2b/energy2b.h \
./potential/2b/.deps/libmbx_la-energy2b.Plo:potential/2b/energy2b.h:
Binary file ./potential/2b/libmbx_la-energy2b.o matches
./potential/2b/libmbx_la-energy2b.lo:# potential/2b/libmbx_la-energy2b.lo - a libtool object file
./potential/2b/libmbx_la-energy2b.lo:non_pic_object='libmbx_la-energy2b.o'
./potential/3b/energy3b.cpp:#include "energy3b.h"
./potential/3b/energy3b.cpp:double get_3b_energy(std::string mon1, std::string mon2, std::string mon3, size_t nm, std::vector<double> xyz1,
./potential/3b/energy3b.cpp:    double energy = 0.0;
./potential/3b/energy3b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), xyz3.data(), nm);
./potential/3b/energy3b.cpp:        energy = pot(xyz1.data(), xyz2.data(), xyz3.data(), nm);
./potential/3b/energy3b.cpp:        energy = pot(xyz2.data(), xyz3.data(), xyz1.data(), nm);
./potential/3b/energy3b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), xyz3.data(), nm);
./potential/3b/energy3b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), xyz3.data(), nm);
./potential/3b/energy3b.cpp:        energy = pot.eval(xyz3.data(), xyz1.data(), xyz2.data(), nm);
./potential/3b/energy3b.cpp:        energy = 0.0;
./potential/3b/energy3b.cpp:    std::cerr << "Output energy: " << energy << std::endl;
./potential/3b/energy3b.cpp:    return energy;
./potential/3b/energy3b.cpp:double get_3b_energy(std::string mon1, std::string mon2, std::string mon3, size_t nm, std::vector<double> xyz1,
./potential/3b/energy3b.cpp:    double energy = 0.0;
./potential/3b/energy3b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), xyz3.data(), grad1.data(), grad2.data(), grad3.data(), nm, virial);
./potential/3b/energy3b.cpp:        energy = pot(xyz1.data(), xyz2.data(), xyz3.data(), grad1.data(), grad2.data(), grad3.data(), nm, virial);
./potential/3b/energy3b.cpp:        energy = pot(xyz2.data(), xyz3.data(), xyz1.data(), grad2.data(), grad3.data(), grad1.data(), nm, virial);
./potential/3b/energy3b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), xyz3.data(), grad1.data(), grad2.data(), grad3.data(), nm, virial);
./potential/3b/energy3b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), xyz3.data(), grad1.data(), grad2.data(), grad3.data(), nm, virial);
./potential/3b/energy3b.cpp:        energy = pot.eval(xyz3.data(), xyz1.data(), xyz2.data(), grad3.data(), grad1.data(), grad2.data(), nm, virial);
./potential/3b/energy3b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), xyz3.data(), grad1.data(), grad2.data(), grad3.data(), nm, virial);
./potential/3b/energy3b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), xyz3.data(), grad1.data(), grad2.data(), grad3.data(), nm, virial);
./potential/3b/energy3b.cpp:        energy = pot.eval(xyz3.data(), xyz1.data(), xyz2.data(), grad3.data(), grad1.data(), grad2.data(), nm, virial);
./potential/3b/energy3b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), xyz3.data(), grad1.data(), grad2.data(), grad3.data(), nm, virial);
./potential/3b/energy3b.cpp:        energy = 0.0;
./potential/3b/energy3b.cpp:    std::cerr << "Output energy: " << energy << std::endl;
./potential/3b/energy3b.cpp:    return energy;
./potential/3b/energy3b.h: * @file energy3b.h
./potential/3b/energy3b.h: * @brief Contains the calls to the three-body energy with and without gradients
./potential/3b/energy3b.h: * @brief Sets the namespace for the energy calls for the 3 body energy
./potential/3b/energy3b.h: * @brief Gets the two body energy for a given set of trimers
./potential/3b/energy3b.h: * of the 3b energy of those trimers. A trimer will be mon1-mon2-mon3.
./potential/3b/energy3b.h:double get_3b_energy(std::string m1, std::string m2, std::string m3, size_t nm, std::vector<double> xyz1,
./potential/3b/energy3b.h: * @brief Gets the three body energy for a given set of trimers
./potential/3b/energy3b.h: * of the 3b energy of those trimers. A trimer will be mon1-mon2-mon3.
./potential/3b/energy3b.h:double get_3b_energy(std::string m1, std::string m2, std::string m3, size_t nm, std::vector<double> xyz1,
./potential/3b/mbnrg_3b_A1B2C4_D1E2_D1E2_deg3_v1.cpp:    double energy = 0.0;
./potential/3b/mbnrg_3b_A1B2C4_D1E2_D1E2_deg3_v1.cpp:    for (size_t i = 0; i < n; i++) energy += energies_sw[i];
./potential/3b/mbnrg_3b_A1B2C4_D1E2_D1E2_deg3_v1.cpp:    return energy;
./potential/3b/mbnrg_3b_A1B2C4_D1E2_D1E2_deg3_v1.cpp:    double energy = 0.0;
./potential/3b/mbnrg_3b_A1B2C4_D1E2_D1E2_deg3_v1.cpp:    for (size_t i = 0; i < n; i++) energy += energies_sw[i];
./potential/3b/mbnrg_3b_A1B2C4_D1E2_D1E2_deg3_v1.cpp:    return energy;
./potential/3b/mbnrg_3b_A1B2_A1B2_A1B2_deg4_v1.cpp:    double energy = 0.0;
./potential/3b/mbnrg_3b_A1B2_A1B2_A1B2_deg4_v1.cpp:    for (size_t i = 0; i < n; i++) energy += energies_sw[i];
./potential/3b/mbnrg_3b_A1B2_A1B2_A1B2_deg4_v1.cpp:    return energy;
./potential/3b/mbnrg_3b_A1B2_A1B2_A1B2_deg4_v1.cpp:    double energy = 0.0;
./potential/3b/mbnrg_3b_A1B2_A1B2_A1B2_deg4_v1.cpp:    for (size_t i = 0; i < n; i++) energy += energies_sw[i];
./potential/3b/mbnrg_3b_A1B2_A1B2_A1B2_deg4_v1.cpp:    return energy;
./potential/3b/mbnrg_3b_A1B2_A1B2_A1B2_deg4_v1.h:     * @brief Computes the one body energy for the monomers
./potential/3b/mbnrg_3b_A1B2_A1B2_A1B2_deg4_v1.h:     * @return Double with the energy.
./potential/3b/mbnrg_3b_A1B2_A1B2_A1B2_deg4_v1.h:     * @brief Computes the one body energy for the monomers
./potential/3b/mbnrg_3b_A1B2_A1B2_A1B2_deg4_v1.h:     * @return Double with the energy.
./potential/3b/mbnrg_3b_A1B2_A1B2_A1B2_deg4_vmbpbe.cpp:    double energy = 0.0;
./potential/3b/mbnrg_3b_A1B2_A1B2_A1B2_deg4_vmbpbe.cpp:    for (size_t i = 0; i < n; i++) energy += energies_sw[i];
./potential/3b/mbnrg_3b_A1B2_A1B2_A1B2_deg4_vmbpbe.cpp:    return energy;
./potential/3b/mbnrg_3b_A1B2_A1B2_A1B2_deg4_vmbpbe.cpp:    double energy = 0.0;
./potential/3b/mbnrg_3b_A1B2_A1B2_A1B2_deg4_vmbpbe.cpp:    for (size_t i = 0; i < n; i++) energy += energies_sw[i];
./potential/3b/mbnrg_3b_A1B2_A1B2_A1B2_deg4_vmbpbe.cpp:    return energy;
./potential/3b/mbnrg_3b_A1B4_C1D2_C1D2_deg3_v1.cpp:    double energy = 0.0;
./potential/3b/mbnrg_3b_A1B4_C1D2_C1D2_deg3_v1.cpp:    for (size_t i = 0; i < n; i++) energy += energies_sw[i];
./potential/3b/mbnrg_3b_A1B4_C1D2_C1D2_deg3_v1.cpp:    return energy;
./potential/3b/mbnrg_3b_A1B4_C1D2_C1D2_deg3_v1.cpp:    double energy = 0.0;
./potential/3b/mbnrg_3b_A1B4_C1D2_C1D2_deg3_v1.cpp:    for (size_t i = 0; i < n; i++) energy += energies_sw[i];
./potential/3b/mbnrg_3b_A1B4_C1D2_C1D2_deg3_v1.cpp:    std::cerr << "Output energy: " << energy << std::endl;
./potential/3b/mbnrg_3b_A1B4_C1D2_C1D2_deg3_v1.cpp:    return energy;
./potential/3b/mbnrg_3b_A1_B1C2X2_B1C2X2_deg4_v1.cpp:    double energy = 0.0;
./potential/3b/mbnrg_3b_A1_B1C2X2_B1C2X2_deg4_v1.cpp:    for (size_t i = 0; i < n; i++) energy += energies_sw[i];
./potential/3b/mbnrg_3b_A1_B1C2X2_B1C2X2_deg4_v1.cpp:    return energy;
./potential/3b/mbnrg_3b_A1_B1C2X2_B1C2X2_deg4_v1.cpp:    double energy = 0.0;
./potential/3b/mbnrg_3b_A1_B1C2X2_B1C2X2_deg4_v1.cpp:    for (size_t i = 0; i < n; i++) energy += energies_sw[i];
./potential/3b/mbnrg_3b_A1_B1C2X2_B1C2X2_deg4_v1.cpp:    return energy;
./potential/3b/mbnrg_3b_A1_B1C2X2_B1C2X2_deg4_v1_oldswitch.cpp:    double energy = 0.0;
./potential/3b/mbnrg_3b_A1_B1C2X2_B1C2X2_deg4_v1_oldswitch.cpp:    for (size_t i = 0; i < n; i++) energy += energies_sw[i];
./potential/3b/mbnrg_3b_A1_B1C2X2_B1C2X2_deg4_v1_oldswitch.cpp:    return energy;
./potential/3b/mbnrg_3b_A1_B1C2X2_B1C2X2_deg4_v1_oldswitch.cpp:    double energy = 0.0;
./potential/3b/mbnrg_3b_A1_B1C2X2_B1C2X2_deg4_v1_oldswitch.cpp:    for (size_t i = 0; i < n; i++) energy += energies_sw[i];
./potential/3b/mbnrg_3b_A1_B1C2X2_B1C2X2_deg4_v1_oldswitch.cpp:    return energy;
./potential/3b/poly-3b-h2o-ion-v1x_deg4_filtered.cpp:    std::cerr << "Output polynomial energy: " << e << std::endl;
./potential/3b/poly-3b-v2x.cpp:    std::cerr << "Output polynomial energy: " << e << std::endl;
./potential/3b/poly_3b_A1B4_C1D2_C1D2_deg3_grad_v1.cpp:    std::cerr << "Output polynomial energy: " << e << std::endl;
./potential/3b/x3b-h2o-ion-v1x-deg4-filtered.cpp:    double energy = 0.0;
./potential/3b/x3b-h2o-ion-v1x-deg4-filtered.cpp:        energy += retval;
./potential/3b/x3b-h2o-ion-v1x-deg4-filtered.cpp:    return energy;
./potential/3b/x3b-h2o-ion-v1x-deg4-filtered.cpp:    double energy = 0.0;
./potential/3b/x3b-h2o-ion-v1x-deg4-filtered.cpp:        energy += retval;
./potential/3b/x3b-h2o-ion-v1x-deg4-filtered.cpp:    std::cerr << "Output energy: " << energy << std::endl;
./potential/3b/x3b-h2o-ion-v1x-deg4-filtered.cpp:    return energy;
./potential/3b/x3b-v2x.cpp:    std::vector<double> energy(nt, 0.0);
./potential/3b/x3b-v2x.cpp:        energy[i] = e3b;
./potential/3b/x3b-v2x.cpp:        e += s * energy[i];
./potential/3b/x3b-v2x.cpp:    std::vector<double> energy(nt, 0.0);
./potential/3b/x3b-v2x.cpp:        energy[i] = e3b;
./potential/3b/x3b-v2x.cpp:        gab *= (sac + sbc) * energy[sh] / rab[sh];
./potential/3b/x3b-v2x.cpp:        gac *= (sab + sbc) * energy[sh] / rac[sh];
./potential/3b/x3b-v2x.cpp:        gbc *= (sab + sac) * energy[sh] / rbc[sh];
./potential/3b/x3b-v2x.cpp:        e += s * energy[sh];
./potential/3b/x3b-v2x.cpp:    // Ref energy
./potential/3b/x3b-v2x.cpp:    std::cerr << "Output energy: " << e << std::endl;
./potential/3b/.deps/libmbx_la-energy3b.Plo:potential/3b/libmbx_la-energy3b.lo: potential/3b/energy3b.cpp \
./potential/3b/.deps/libmbx_la-energy3b.Plo: /usr/include/stdc-predef.h potential/3b/energy3b.h \
./potential/3b/.deps/libmbx_la-energy3b.Plo:potential/3b/energy3b.h:
Binary file ./potential/3b/libmbx_la-energy3b.o matches
./potential/3b/libmbx_la-energy3b.lo:# potential/3b/libmbx_la-energy3b.lo - a libtool object file
./potential/3b/libmbx_la-energy3b.lo:non_pic_object='libmbx_la-energy3b.o'
./potential/4b/energy4b.cpp:#include "energy4b.h"
./potential/4b/energy4b.cpp:double get_4b_energy(std::string mon1, std::string mon2, std::string mon3, std::string mon4, size_t nm,
./potential/4b/energy4b.cpp:    double energy = 0.0;
./potential/4b/energy4b.cpp:        energy = 0.0;
./potential/4b/energy4b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), xyz3.data(), xyz4.data(), nm);
./potential/4b/energy4b.cpp:        energy = 0.0;
./potential/4b/energy4b.cpp:    std::cerr << "Output energy: " << energy << std::endl;
./potential/4b/energy4b.cpp:    return energy;
./potential/4b/energy4b.cpp:double get_4b_energy(std::string mon1, std::string mon2, std::string mon3, std::string mon4, size_t nm,
./potential/4b/energy4b.cpp:    double energy = 0.0;
./potential/4b/energy4b.cpp:        energy = 0.0;
./potential/4b/energy4b.cpp:        energy = pot.eval(xyz1.data(), xyz2.data(), xyz3.data(), xyz4.data(), grad1.data(), grad2.data(), grad3.data(),
./potential/4b/energy4b.cpp:        energy = 0.0;
./potential/4b/energy4b.cpp:    std::cerr << "Output energy: " << energy << std::endl;
./potential/4b/energy4b.cpp:    return energy;
./potential/4b/energy4b.h: * @file energy4b.h
./potential/4b/energy4b.h: * @brief Contains the calls to the four-body energy with and without gradients
./potential/4b/energy4b.h: * @brief Sets the namespace for the energy calls for the 4 body energy
./potential/4b/energy4b.h: * @brief Gets the four body energy for a given set of tetramers
./potential/4b/energy4b.h: * of the 4b energy of those tetramers. A tetramer will be mon1-mon2-mon3-mon4.
./potential/4b/energy4b.h:double get_4b_energy(std::string m1, std::string m2, std::string m3, std::string m4, size_t nm,
./potential/4b/energy4b.h: * @brief Gets the four body energy for a given set of tetramers
./potential/4b/energy4b.h: * of the 4b energy of those tetramers. A tetramer will be mon1-mon2-mon3-mon4.
./potential/4b/energy4b.h:double get_4b_energy(std::string m1, std::string m2, std::string m3, std::string m4, size_t nm,
./potential/4b/mbnrg_4b_A1B2_A1B2_A1B2_A1B2_deg4_v1.cpp:    double energy = 0.0;
./potential/4b/mbnrg_4b_A1B2_A1B2_A1B2_A1B2_deg4_v1.cpp:        energy += energies_sw[i];
./potential/4b/mbnrg_4b_A1B2_A1B2_A1B2_A1B2_deg4_v1.cpp:    return energy;
./potential/4b/mbnrg_4b_A1B2_A1B2_A1B2_A1B2_deg4_v1.cpp:    double energy = 0.0;
./potential/4b/mbnrg_4b_A1B2_A1B2_A1B2_A1B2_deg4_v1.cpp:        energy += energies_sw[i];
./potential/4b/mbnrg_4b_A1B2_A1B2_A1B2_A1B2_deg4_v1.cpp:    return energy;
./potential/4b/mbnrg_4b_A1B2_A1B2_A1B2_A1B2_deg4_v1.h:     * @brief Computes the one body energy for the monomers
./potential/4b/mbnrg_4b_A1B2_A1B2_A1B2_A1B2_deg4_v1.h:     * @return Double with the energy.
./potential/4b/mbnrg_4b_A1B2_A1B2_A1B2_A1B2_deg4_v1.h:     * @brief Computes the one body energy for the monomers
./potential/4b/mbnrg_4b_A1B2_A1B2_A1B2_A1B2_deg4_v1.h:     * @return Double with the energy.
./potential/4b/.deps/libmbx_la-energy4b.Plo:potential/4b/libmbx_la-energy4b.lo: potential/4b/energy4b.cpp \
./potential/4b/.deps/libmbx_la-energy4b.Plo: /usr/include/stdc-predef.h potential/4b/energy4b.h \
./potential/4b/.deps/libmbx_la-energy4b.Plo:potential/4b/energy4b.h:
Binary file ./potential/4b/libmbx_la-energy4b.o matches
./potential/4b/libmbx_la-energy4b.lo:# potential/4b/libmbx_la-energy4b.lo - a libtool object file
./potential/4b/libmbx_la-energy4b.lo:non_pic_object='libmbx_la-energy4b.o'
./potential/buckingham/buckingham.cpp:    std::cerr << "Repulsion energy = " << rep_energy_ << std::endl;
./potential/buckingham/buckingham.cpp:    return rep_energy_;
./potential/buckingham/buckingham.cpp:    rep_energy_ = 0.0;
./potential/buckingham/buckingham.cpp:            std::vector<double> energy_pool(nthreads, 0.0);
./potential/buckingham/buckingham.cpp:                            energy_pool[rank] +=
./potential/buckingham/buckingham.cpp:                rep_energy_ += energy_pool[rank];
./potential/buckingham/buckingham.cpp:                std::vector<double> energy_pool(nthreads, 0.0);
./potential/buckingham/buckingham.cpp:                            energy_pool[rank] += Repulsion(a, b, xyz_sitei.data(), xyz_.data() + fi_crd2, g1.data(),
./potential/buckingham/buckingham.cpp:                    rep_energy_ += energy_pool[rank];
./potential/buckingham/buckingham.cpp:                std::vector<double> energy_pool(nthreads, 0.0);
./potential/buckingham/buckingham.cpp:                                    energy_pool[rank] +=
./potential/buckingham/buckingham.cpp:                    rep_energy_ += energy_pool[rank];
./potential/buckingham/buckingham.h:     * @brief Calculates the repulsion energy of the system
./potential/buckingham/buckingham.h:     * calculate the buckingham energy for the system.
./potential/buckingham/buckingham.h:     * @return Total repulsion energy
./potential/buckingham/buckingham.h:     * energy without having to initialize it all over again
./potential/buckingham/buckingham.h:     * Once the system is initialized, this function calculates the repulsion energy
./potential/buckingham/buckingham.h:     * Once the system is initialized, this function calculates the repulsion energy for the pairs involving monoemrs
./potential/buckingham/buckingham.h:    // Repulsion energy
./potential/buckingham/buckingham.h:    double rep_energy_;
./potential/buckingham/bucktools.cpp:    double repulsion_energy = 0;
./potential/buckingham/bucktools.cpp:            double pair_energy = ttsw * fac;
./potential/buckingham/bucktools.cpp:            if (isls == 1) pair_energy *= 0.5;
./potential/buckingham/bucktools.cpp:            repulsion_energy += pair_energy;
./potential/buckingham/bucktools.cpp:                // Complciated due to the small energy/grad in this area.
./potential/buckingham/bucktools.cpp:    return repulsion_energy;
./potential/buckingham/bucktools.h: * involved in the energy
./potential/buckingham/bucktools.h: * @param[in] start2 Index of the first monomer of type 2 that will have the repulsion energy calculated. This is meant
./potential/buckingham/bucktools.h: * @param[in] end2 Index of the last monomer of type 2 that will have the repulsion energy calculated. This is meant for
./potential/buckingham/bucktools.h: * @brief Retrieves the parameters for repulsion energy
./potential/dispersion/dispersion.cpp:    std::cerr << "Dispersion energy = " << disp_energy_ << std::endl;
./potential/dispersion/dispersion.cpp:    return disp_energy_;
./potential/dispersion/dispersion.cpp:    return disp_energy_;
./potential/dispersion/dispersion.cpp:    return disp_energy_;
./potential/dispersion/dispersion.cpp:    disp_energy_ = 0.0;
./potential/dispersion/dispersion.cpp:        std::vector<double> energy_pool(nthreads, 0.0);
./potential/dispersion/dispersion.cpp:                        energy_pool[rank] +=
./potential/dispersion/dispersion.cpp:            disp_energy_ += energy_pool[rank];
./potential/dispersion/dispersion.cpp:            std::vector<double> energy_pool(nthreads, 0.0);
./potential/dispersion/dispersion.cpp:                        energy_pool[rank] += disp6(
./potential/dispersion/dispersion.cpp:                disp_energy_ += energy_pool[rank];
./potential/dispersion/dispersion.cpp:        double rec_energy = pme_solver_.computeEFVRec(0, params, coords, forces, rec_virial);
./potential/dispersion/dispersion.cpp:        // The Ewald self energy
./potential/dispersion/dispersion.cpp:        double self_energy = 0;
./potential/dispersion/dispersion.cpp:            self_energy += c6 * c6 * prefac;
./potential/dispersion/dispersion.cpp:        disp_energy_ += rec_energy + self_energy;
./potential/dispersion/dispersion.cpp:    disp_energy_ = 0.0;
./potential/dispersion/dispersion.cpp:        double rec_energy = pme_solver_.computeEFVRec(0, params, coords, forces, rec_virial);
./potential/dispersion/dispersion.cpp:        // The Ewald self energy
./potential/dispersion/dispersion.cpp:        double self_energy = 0;
./potential/dispersion/dispersion.cpp:            self_energy += c6 * c6 * prefac;
./potential/dispersion/dispersion.cpp:        self_energy /= (double)num_procs;
./potential/dispersion/dispersion.cpp:        disp_energy_ += rec_energy + self_energy;
./potential/dispersion/dispersion.cpp:    disp_energy_ = 0.0;
./potential/dispersion/dispersion.cpp:    double rec_energy = pme_solver_.computeEFVRec(0, params, coords, forces, rec_virial);
./potential/dispersion/dispersion.cpp:    // The Ewald self energy
./potential/dispersion/dispersion.cpp:    double self_energy = 0;
./potential/dispersion/dispersion.cpp:    for (int i = 0; i < natoms_; ++i) self_energy += c6_long_range_[i] * c6_long_range_[i] * islocal_atom_[i];
./potential/dispersion/dispersion.cpp:    self_energy *= prefac;
./potential/dispersion/dispersion.cpp:    disp_energy_ += rec_energy + self_energy;
./potential/dispersion/dispersion.h: * @brief Class that calculates the dispersion energy of a system given its information
./potential/dispersion/dispersion.h:     * @brief Calculates the dispersion energy
./potential/dispersion/dispersion.h:     * @return Dispersion energy
./potential/dispersion/dispersion.h:     * @brief Calculates the dispersion energy __CHRIS_HELP_DOCS__
./potential/dispersion/dispersion.h:     * @return Dispersion energy
./potential/dispersion/dispersion.h:     * @brief Calculates the dispersion energy __CHRIS_HELP_DOCS__
./potential/dispersion/dispersion.h:     * @return Dispersion energy
./potential/dispersion/dispersion.h:    // Dispersion energy
./potential/dispersion/dispersion.h:    double disp_energy_;
./potential/dispersion/disptools.cpp:    double dispersion_energy = 0;
./potential/dispersion/disptools.cpp:    double ipair_energy[n_idxs];
./potential/dispersion/disptools.cpp:        ipair_energy[i] =
./potential/dispersion/disptools.cpp:        if (iisls[i] == 1) ipair_energy[i] *= 0.5;
./potential/dispersion/disptools.cpp:        dispersion_energy -= ipair_energy[i];
./potential/dispersion/disptools.cpp:    std::cerr << "dispersion_energy = " << dispersion_energy << std::endl;
./potential/dispersion/disptools.cpp:    return dispersion_energy;
./potential/dispersion/disptools.h: * involved in the energy
./potential/dispersion/disptools.h: * @param[in] start2 Index of the first monomer of type 2 that will have the repulsion energy calculated. This is meant
./potential/dispersion/disptools.h: * @param[in] end2 Index of the last monomer of type 2 that will have the repulsion energy calculated. This is meant for
./potential/dispersion/disptools.h: * @brief Retrieves the parameters for dispersion energy
./potential/electrostatics/electrostatics.cpp:// Any large value will do; it doesn't enter the energy or forces below about 1e-12 anyway
./potential/electrostatics/electrostatics.cpp:    has_energy_ = false;
./potential/electrostatics/electrostatics.cpp:    has_energy_ = false;
./potential/electrostatics/electrostatics.cpp:    // Induced Electrostatic energy (chg-dip, dip-dip, pol)
./potential/electrostatics/electrostatics.cpp:    // Induced Electrostatic energy (chg-dip, dip-dip, pol)
./potential/electrostatics/electrostatics.cpp:            double fulldummy_rec_energy = pme_solver_.computeEFVRecIsotropicInducedDipoles(
./potential/electrostatics/electrostatics.cpp:            double fulldummy_rec_energy = pme_solver_.computeEFVRecIsotropicInducedDipoles(
./potential/electrostatics/electrostatics.cpp:    has_energy_ = true;
./potential/electrostatics/electrostatics.cpp:    std::cerr << "Elec tot energy: " << Eperm_ + Eind_ << std::endl;
./potential/electrostatics/electrostatics.cpp:    has_energy_ = true;
./potential/electrostatics/electrostatics.h:     * @brief Gets the electrostatic energy
./potential/electrostatics/electrostatics.h:     * Once the system has been initialized, computes the electrostatic energy
./potential/electrostatics/electrostatics.h:     * @return Total electrostatic energy
./potential/electrostatics/electrostatics.h:     * @brief Returns permanent electrostatic energy.
./potential/electrostatics/electrostatics.h:     * @return Permanent electrostatic energy. Undefined if energy has not yet been calculated
./potential/electrostatics/electrostatics.h:     * @brief Returns induced electrostatic energy.
./potential/electrostatics/electrostatics.h:     * @return Induced electrostatic energy. Undefined if energy has not yet been calculated
./potential/electrostatics/electrostatics.h:     * Calculates the gradients of the potential energy surface
./potential/electrostatics/electrostatics.h:    // Has the energy been calculated?
./potential/electrostatics/electrostatics.h:    bool has_energy_;
./potential/electrostatics/helpme.h:    /// A function pointer to call the approprate function to compute self energy, templated to the rPower value.
./potential/electrostatics/helpme.h:    /// A function pointer to call the approprate function to compute the direct energy, templated to the rPower value.
./potential/electrostatics/helpme.h:    /// A function pointer to call the approprate function to compute the adjusted energy, templated to the rPower
./potential/electrostatics/helpme.h:    /// A function pointer to call the approprate function to compute the direct energy and force, templated to the
./potential/electrostatics/helpme.h:    /// A function pointer to call the approprate function to compute the adjusted energy and force, templated to the
./potential/electrostatics/helpme.h:     * \param energy pointer to the variable holding the energy; this is incremented, not assigned.
./potential/electrostatics/helpme.h:     * \brief convolveEVImpl performs the reciprocal space convolution, returning the energy, for conventional PME.
./potential/electrostatics/helpme.h:     * \return the reciprocal space energy.
./potential/electrostatics/helpme.h:        Real energy = 0;
./potential/electrostatics/helpme.h:            energy += prefac * (gridPtr[0].real() * gridPtr[0].real() + gridPtr[0].imag() * gridPtr[0].imag());
./potential/electrostatics/helpme.h:#pragma omp parallel for reduction(+ : energy, Vxx, Vxy, Vyy, Vxz, Vyz, Vzz) num_threads(nThreads)
./potential/electrostatics/helpme.h:            energy += eTerm;
./potential/electrostatics/helpme.h:        energy /= 2;
./potential/electrostatics/helpme.h:        virial[0][0] -= Vxx - energy;
./potential/electrostatics/helpme.h:        virial[0][2] -= Vyy - energy;
./potential/electrostatics/helpme.h:        virial[0][5] -= Vzz - energy;
./potential/electrostatics/helpme.h:        return energy;
./potential/electrostatics/helpme.h:     * \brief convolveEVCompressedImpl performs the reciprocal space convolution, returning the energy, for compressed
./potential/electrostatics/helpme.h:     * \return the reciprocal space energy.
./potential/electrostatics/helpme.h:        Real energy = 0;
./potential/electrostatics/helpme.h:            energy += prefac * gridPtrIn[0] * gridPtrIn[0];
./potential/electrostatics/helpme.h:#pragma omp parallel for reduction(+ : energy, Vxx, Vxy, Vyy, Vxz, Vyz, Vzz) num_threads(nThreads)
./potential/electrostatics/helpme.h:            energy += eTerm;
./potential/electrostatics/helpme.h:        energy /= 2;
./potential/electrostatics/helpme.h:        virial[0][0] -= Vxx - energy;
./potential/electrostatics/helpme.h:        virial[0][2] -= Vyy - energy;
./potential/electrostatics/helpme.h:        virial[0][5] -= Vzz - energy;
./potential/electrostatics/helpme.h:        return energy;
./potential/electrostatics/helpme.h:     * \return the energy for the m=0 term.
./potential/electrostatics/helpme.h:     * \brief dirEImpl computes the kernel for the direct energy for a pair.
./potential/electrostatics/helpme.h:     * \return the energy kernel.
./potential/electrostatics/helpme.h:     * \brief dirEFImpl computes the kernels for the direct energy and force for a pair.
./potential/electrostatics/helpme.h:     * \return a tuple containing the energy and force kernels, respectively.
./potential/electrostatics/helpme.h:     * \brief adjEImpl computes the kernel for the adjusted energy for a pair.
./potential/electrostatics/helpme.h:     * \return the energy kernel.
./potential/electrostatics/helpme.h:     * \brief adjEFImpl computes the kernels for the adjusted energy and force for a pair.
./potential/electrostatics/helpme.h:     * \return a tuple containing the energy and force kernels, respectively.
./potential/electrostatics/helpme.h:     * \brief slfEImpl computes the self energy due to particles feeling their own potential.
./potential/electrostatics/helpme.h:     * \return the self energy.  N.B. there is no self force associated with this term.
./potential/electrostatics/helpme.h:     * \param splineDerivativeLevel the derivative level (parameter angular momentum + energy derivative level) of the
./potential/electrostatics/helpme.h:     * \return the reciprocal space energy.
./potential/electrostatics/helpme.h:        Real energy = 0;
./potential/electrostatics/helpme.h:            energy += prefac * transformedGrid[0] * transformedGrid[0];
./potential/electrostatics/helpme.h:#pragma omp parallel for reduction(+ : energy) num_threads(nThreads_)
./potential/electrostatics/helpme.h:            energy += transformedGrid[yxz] * transformedGrid[yxz] * influenceFunction[yxz];
./potential/electrostatics/helpme.h:        return energy / 2;
./potential/electrostatics/helpme.h:     * \return the reciprocal space energy.
./potential/electrostatics/helpme.h:        Real energy = 0;
./potential/electrostatics/helpme.h:            energy += prefac * std::norm(transformedGrid[0]);
./potential/electrostatics/helpme.h:#pragma omp parallel for reduction(+ : energy) num_threads(nThreads_)
./potential/electrostatics/helpme.h:            energy += permPrefac * structFactorNorm * influenceFunction[yxz];
./potential/electrostatics/helpme.h:        return energy / 2;
./potential/electrostatics/helpme.h:     * \return the reciprocal space energy.
./potential/electrostatics/helpme.h:     * \return the reciprocal space energy.
./potential/electrostatics/helpme.h:     * \brief computeESlf computes the Ewald self interaction energy.
./potential/electrostatics/helpme.h:     * \return the self energy.
./potential/electrostatics/helpme.h:     * \brief computeEDir computes the direct space energy.  This is provided mostly for debugging and testing
./potential/electrostatics/helpme.h:     * \return the direct space energy.
./potential/electrostatics/helpme.h:        Real energy = 0;
./potential/electrostatics/helpme.h:            energy += parameters(i, 0) * parameters(j, 0) * dirEFxn_(rSquared, kappaSquared);
./potential/electrostatics/helpme.h:        return scaleFactor_ * energy;
./potential/electrostatics/helpme.h:     * \brief computeEFDir computes the direct space energy and force.  This is provided mostly for debugging and
./potential/electrostatics/helpme.h:     * \return the direct space energy.
./potential/electrostatics/helpme.h:        Real energy = 0;
./potential/electrostatics/helpme.h:            energy += prefactor * eKernel;
./potential/electrostatics/helpme.h:        return energy;
./potential/electrostatics/helpme.h:     * \brief computeEFVDir computes the direct space energy, force and virial.  This is provided mostly for
./potential/electrostatics/helpme.h:     * \return the direct space energy.
./potential/electrostatics/helpme.h:        Real energy = 0;
./potential/electrostatics/helpme.h:            energy += prefactor * eKernel;
./potential/electrostatics/helpme.h:        return energy;
./potential/electrostatics/helpme.h:     * \brief computeEAdj computes the adjusted real space energy which extracts the energy for excluded pairs that
./potential/electrostatics/helpme.h:     * \return the adjusted energy.
./potential/electrostatics/helpme.h:        Real energy = 0;
./potential/electrostatics/helpme.h:            energy += parameters(i, 0) * parameters(j, 0) * adjEFxn_(rSquared, kappaSquared);
./potential/electrostatics/helpme.h:        return scaleFactor_ * energy;
./potential/electrostatics/helpme.h:     * \brief computeEFAdj computes the adjusted energy and force.  This is provided mostly for debugging and
./potential/electrostatics/helpme.h:     * \return the adjusted energy.
./potential/electrostatics/helpme.h:        Real energy = 0;
./potential/electrostatics/helpme.h:            energy += prefactor * eKernel;
./potential/electrostatics/helpme.h:        return energy;
./potential/electrostatics/helpme.h:     * \brief computeEFVAdj computes the adjusted energy, forces and virial.  This is provided mostly for debugging
./potential/electrostatics/helpme.h:     * \return the adjusted energy.
./potential/electrostatics/helpme.h:        Real energy = 0;
./potential/electrostatics/helpme.h:            energy += prefactor * eKernel;
./potential/electrostatics/helpme.h:        return energy;
./potential/electrostatics/helpme.h:     * \param energy pointer to the variable holding the energy; this is incremented, not assigned.
./potential/electrostatics/helpme.h:     * \param energy pointer to the variable holding the energy; this is incremented, not assigned.
./potential/electrostatics/helpme.h:     * \param energy pointer to the variable holding the energy; this is incremented, not assigned.
./potential/electrostatics/helpme.h:     * \return the reciprocal space energy.
./potential/electrostatics/helpme.h:        Real energy;
./potential/electrostatics/helpme.h:            energy = convolveE(gridAddress);
./potential/electrostatics/helpme.h:            energy = convolveE(gridAddress);
./potential/electrostatics/helpme.h:        return energy;
./potential/electrostatics/helpme.h:     * \param energy pointer to the variable holding the energy; this is incremented, not assigned.
./potential/electrostatics/helpme.h:     * \return the reciprocal space energy.
./potential/electrostatics/helpme.h:        // Spline derivative level bumped by 1, for energy gradients.
./potential/electrostatics/helpme.h:        Real energy;
./potential/electrostatics/helpme.h:            energy = convolveE(gridAddress);
./potential/electrostatics/helpme.h:            energy = convolveE(gridAddress);
./potential/electrostatics/helpme.h:        return energy;
./potential/electrostatics/helpme.h:     * \param energy pointer to the variable holding the energy; this is incremented, not assigned.
./potential/electrostatics/helpme.h:     * \return the reciprocal space energy.
./potential/electrostatics/helpme.h:        // Spline derivative level bumped by 1, for energy gradients.
./potential/electrostatics/helpme.h:        Real energy;
./potential/electrostatics/helpme.h:            energy = convolveEV(gridAddress, virial);
./potential/electrostatics/helpme.h:            energy = convolveEV(gridAddress, convolvedGrid, virial);
./potential/electrostatics/helpme.h:        return energy;
./potential/electrostatics/helpme.h:     * \param energy pointer to the variable holding the energy; this is incremented, not assigned.
./potential/electrostatics/helpme.h:     * \return the reciprocal space energy.
./potential/electrostatics/helpme.h:        double energy = 0;
./potential/electrostatics/helpme.h:            energy += 0.5 * charge * phi;
./potential/electrostatics/helpme.h:        return energy;
./potential/electrostatics/helpme.h:     * \brief Runs a full (direct and reciprocal space) PME calculation, computing the energy.  The direct space
./potential/electrostatics/helpme.h:     * \param energy pointer to the variable holding the energy; this is incremented, not assigned.
./potential/electrostatics/helpme.h:     * \return the full PME energy.
./potential/electrostatics/helpme.h:        Real energy = computeERec(parameterAngMom, parameters, coordinates);
./potential/electrostatics/helpme.h:        energy += computeESlf(parameterAngMom, parameters);
./potential/electrostatics/helpme.h:        energy += computeEDir(includedList, parameterAngMom, parameters, coordinates);
./potential/electrostatics/helpme.h:        energy += computeEAdj(excludedList, parameterAngMom, parameters, coordinates);
./potential/electrostatics/helpme.h:        return energy;
./potential/electrostatics/helpme.h:     * \param energy pointer to the variable holding the energy; this is incremented, not assigned.
./potential/electrostatics/helpme.h:     * \return the full PME energy.
./potential/electrostatics/helpme.h:        Real energy = computeEFRec(parameterAngMom, parameters, coordinates, forces);
./potential/electrostatics/helpme.h:        energy += computeESlf(parameterAngMom, parameters);
./potential/electrostatics/helpme.h:        energy += computeEFDir(includedList, parameterAngMom, parameters, coordinates, forces);
./potential/electrostatics/helpme.h:        energy += computeEFAdj(excludedList, parameterAngMom, parameters, coordinates, forces);
./potential/electrostatics/helpme.h:        return energy;
./potential/electrostatics/helpme.h:     * \param energy pointer to the variable holding the energy; this is incremented, not assigned.
./potential/electrostatics/helpme.h:     * \return the full PME energy.
./potential/electrostatics/helpme.h:        Real energy = computeEFVRec(parameterAngMom, parameters, coordinates, forces, virial);
./potential/electrostatics/helpme.h:        energy += computeESlf(parameterAngMom, parameters);
./potential/electrostatics/helpme.h:        energy += computeEFVDir(includedList, parameterAngMom, parameters, coordinates, forces, virial);
./potential/electrostatics/helpme.h:        energy += computeEFVAdj(excludedList, parameterAngMom, parameters, coordinates, forces, virial);
./potential/electrostatics/helpme.h:        return energy;
./potential/force_field/angles.cpp:    double energy = 0.0;
./potential/force_field/angles.cpp:        energy = linear_parameters_[0] * 0.5 * (x - nonlinear_parameters_[0]) * (x - nonlinear_parameters_[0]);
./potential/force_field/angles.cpp:        energy = 0.5 * linear_parameters_[0] * (x - nonlinear_parameters_[0]) * (x - nonlinear_parameters_[0]) +
./potential/force_field/angles.cpp:    return energy;
./potential/force_field/angles.h: * potential energy or gradients
./potential/force_field/angles.h:     *                            the energy
./potential/force_field/angles.h:     * @brief Calculates the potential energy using the nonlinear and linear
./potential/force_field/angles.h:     * @return The potential energy for a given theta
./potential/force_field/bond.cpp:    double energy = 0.0;
./potential/force_field/bond.cpp:        energy = linear_parameters_[0] * 0.5 * (x - nonlinear_parameters_[0]) * (x - nonlinear_parameters_[0]);
./potential/force_field/bond.cpp:        energy = linear_parameters_[0] * exp1 * exp1;
./potential/force_field/bond.cpp:        energy = 0.5 * linear_parameters_[0] * (x - nonlinear_parameters_[0]) * (x - nonlinear_parameters_[0]) +
./potential/force_field/bond.cpp:    return energy;
./potential/force_field/bond.h: * potential energy and gradients
./potential/force_field/bond.h:     *                            the energy
./potential/force_field/bond.h:     * @brief Calculates the potential energy using the nonlinear and linear
./potential/force_field/bond.h:     * @return The potential energy for a given bond length rij
./potential/force_field/dihedral.cpp:    double energy = 0.0;
./potential/force_field/dihedral.cpp:        energy = linear_parameters_[0] * (1 + cos(nonlinear_parameters_[0] * x - nonlinear_parameters_[1]));
./potential/force_field/dihedral.cpp:        energy = 0.5 * linear_parameters_[0] * x * x;
./potential/force_field/dihedral.cpp:        energy = 0.5 * linear_parameters_[0] * (cos(x) - cos(nonlinear_parameters_[0])) *
./potential/force_field/dihedral.cpp:        energy = 0.5 * linear_parameters_[0] * (1 + cos(x)) + 0.5 * linear_parameters_[1] * (1 - cos(2 * x)) +
./potential/force_field/dihedral.cpp:    return energy;
./potential/force_field/dihedral.h: * potential energy or gradients
./potential/force_field/dihedral.h:     *                            the energy
./potential/force_field/dihedral.h:     * @brief Calculates the potential energy using the nonlinear and linear
./potential/force_field/dihedral.h:     * @return The potential energy for a given dihedral angle phi ijkn
./potential/force_field/energyff.cpp:#include "energyff.h"
./potential/force_field/energyff.cpp:double get_ff_energy(eff::Conn &connectivity, size_t nm, std::vector<double> xyz1, bool &good, int nat,
./potential/force_field/energyff.cpp:            // Accumulate inversion energy over all 3 inversion angles
./potential/force_field/energyff.cpp:            // energy match dlpoly. It is currently unknown why dlpoly chooses to
./potential/force_field/energyff.cpp:            // average its inversion potential energy.
./potential/force_field/energyff.cpp:double get_ff_energy(eff::Conn &connectivity, size_t nm, std::vector<double> xyz1, std::vector<double> &grad1,
./potential/force_field/energyff.cpp:            // Accumulate inversion energy over all 3 inversion angles
./potential/force_field/energyff.cpp:            // energy match dlpoly. It is currently unknown why dlpoly chooses to
./potential/force_field/energyff.cpp:            // average it inversion potential energy.
./potential/force_field/energyff.h: * @file energyff.h
./potential/force_field/energyff.h: * @brief Contains the calls to the classic energy with and without gradients
./potential/force_field/energyff.h: * @brief Gets the classical force field potential energy for a given set of
./potential/force_field/energyff.h: * of the classical potential energy of those monomers.
./potential/force_field/energyff.h: * has an energy larger than the value set in definitions.h (EMAX1B)
./potential/force_field/energyff.h:double get_ff_energy(eff::Conn &connectivity, size_t nm, std::vector<double> xyz1, bool &good, int nat,
./potential/force_field/energyff.h: * @brief Gets the classical force field potential energy for a given set of monomers of
./potential/force_field/energyff.h: * of the classical potential energy of those monomers and their corresponding gradients.
./potential/force_field/energyff.h: * @param[in,out] grad Gradients of the one-body energy
./potential/force_field/energyff.h: * has an energy larger than the value set in definitions.h (EMAX1B)
./potential/force_field/energyff.h:double get_ff_energy(eff::Conn &connectivity, size_t nm, std::vector<double> xyz1, std::vector<double> &grad1,
./potential/force_field/inversion.cpp:    double energy = 0.0;
./potential/force_field/inversion.cpp:        energy = linear_parameters_[0] * 0.5 * (x - nonlinear_parameters_[0]) * (x - nonlinear_parameters_[0]);
./potential/force_field/inversion.cpp:    return energy;
./potential/force_field/inversion.h: * potential energy or gradients
./potential/force_field/inversion.h:     *                            the energy
./potential/force_field/inversion.h:     * @brief Calculates the potential energy using the nonlinear and linear
./potential/force_field/inversion.h:     * @return The potential energy for a given inversion angle phi ijkn
./potential/force_field/topology.h:     * @brief Obtains the potential energy for the given functional form given
./potential/force_field/topology.h:     * @return The potential energy
./potential/force_field/.deps/libmbx_la-energyff.Plo:potential/force_field/libmbx_la-energyff.lo: \
./potential/force_field/.deps/libmbx_la-energyff.Plo: potential/force_field/energyff.cpp /usr/include/stdc-predef.h \
./potential/force_field/.deps/libmbx_la-energyff.Plo: potential/force_field/energyff.h \
./potential/force_field/.deps/libmbx_la-energyff.Plo:potential/force_field/energyff.h:
Binary file ./potential/force_field/libmbx_la-energyff.o matches
./potential/force_field/libmbx_la-energyff.lo:# potential/force_field/libmbx_la-energyff.lo - a libtool object file
./potential/force_field/libmbx_la-energyff.lo:non_pic_object='libmbx_la-energyff.o'
./potential/lj/lj.cpp:    std::cerr << "LennardJones energy = " << lj_energy_ << std::endl;
./potential/lj/lj.cpp:    return lj_energy_;
./potential/lj/lj.cpp:    return lj_energy_;
./potential/lj/lj.cpp:    return lj_energy_;
./potential/lj/lj.cpp:    lj_energy_ = 0.0;
./potential/lj/lj.cpp:        std::vector<double> energy_pool(nthreads, 0.0);
./potential/lj/lj.cpp:                        energy_pool[rank] +=
./potential/lj/lj.cpp:            lj_energy_ += energy_pool[rank];
./potential/lj/lj.cpp:            std::vector<double> energy_pool(nthreads, 0.0);
./potential/lj/lj.cpp:                        energy_pool[rank] += lj(eps, sigma, ljchgi, ljchgj, xyz_sitei, xyz_mt2, g1, grad2_pool[rank],
./potential/lj/lj.cpp:                lj_energy_ += energy_pool[rank];
./potential/lj/lj.cpp:        double rec_energy = pme_solver_.computeEFVRec(0, params, coords, forces, rec_virial);
./potential/lj/lj.cpp:        // The Ewald self energy
./potential/lj/lj.cpp:        double self_energy = 0;
./potential/lj/lj.cpp:            self_energy += lji * lji * prefac;
./potential/lj/lj.cpp:        lj_energy_ += rec_energy + self_energy;
./potential/lj/lj.cpp:    lj_energy_ = 0.0;
./potential/lj/lj.cpp:        double rec_energy = pme_solver_.computeEFVRec(0, params, coords, forces, rec_virial);
./potential/lj/lj.cpp:        // The Ewald self energy
./potential/lj/lj.cpp:        double self_energy = 0;
./potential/lj/lj.cpp:            self_energy += lji * lji * prefac;
./potential/lj/lj.cpp:        self_energy /= (double)num_procs;
./potential/lj/lj.cpp:        lj_energy_ += rec_energy + self_energy;
./potential/lj/lj.cpp:    lj_energy_ = 0.0;
./potential/lj/lj.cpp:    double rec_energy = pme_solver_.computeEFVRec(0, params, coords, forces, rec_virial);
./potential/lj/lj.cpp:    // The Ewald self energy
./potential/lj/lj.cpp:    double self_energy = 0;
./potential/lj/lj.cpp:    for (int i = 0; i < natoms_; ++i) self_energy += lj_long_range_[i] * lj_long_range_[i] * islocal_atom_[i];
./potential/lj/lj.cpp:    self_energy *= prefac;
./potential/lj/lj.cpp:    lj_energy_ += rec_energy + self_energy;
./potential/lj/lj.h: * @brief Class that calculates the Lennard-Jones energy of a system given its information
./potential/lj/lj.h:     * @brief Calculates the Lennard-Jones energy
./potential/lj/lj.h:     * @return Dispersion energy
./potential/lj/lj.h:     * @brief Calculates the dispersion energy __CHRIS_HELP_DOCS__
./potential/lj/lj.h:     * @return Dispersion energy
./potential/lj/lj.h:     * @brief Calculates the dispersion energy __CHRIS_HELP_DOCS__
./potential/lj/lj.h:     * @return Dispersion energy
./potential/lj/lj.h:    // Dispersion energy
./potential/lj/lj.h:    double lj_energy_;
./potential/lj/ljtools.cpp:    double lj_energy = 0;
./potential/lj/ljtools.cpp:            double attr_pair_energy = ljsw * (lj_scale_factor * ljattr_e) + chgsw * lj_scale_factor * chgterm - pmeterm;
./potential/lj/ljtools.cpp:            double rep_pair_energy = lj_scale_factor * ljrep_e;
./potential/lj/ljtools.cpp:                attr_pair_energy *= 0.5;
./potential/lj/ljtools.cpp:                rep_pair_energy *= 0.5;
./potential/lj/ljtools.cpp:            lj_energy += rep_pair_energy - attr_pair_energy;
./potential/lj/ljtools.cpp:    std::cerr << "lj_energy = " << lj_energy << std::endl;
./potential/lj/ljtools.cpp:    return lj_energy;
./potential/lj/ljtools.h: * involved in the energy
./potential/lj/ljtools.h: * @param[in] start2 Index of the first monomer of type 2 that will have the LJ energy calculated. This is meant
./potential/lj/ljtools.h: * @param[in] end2 Index of the last monomer of type 2 that will have the LJ energy calculated. This is meant
./potential/lj/ljtools.h: * @brief Retrieves the parameters for lj energy
./tests/combinations-test.cpp:        std::cerr << "usage: energy input.nrg" << std::endl;
./tests/energy_wgrad-test.cpp:        std::cerr << "usage: energy h2o_ion.nrg" << std::endl;
./tests/energy_wgrad-test.cpp:        double energy = systems[i].Energy(false);
./tests/energy_wgrad-test.cpp:                  << "]= " << std::setfill(' ') << std::setw(20) << std::right << energy << std::setw(12) << std::right
./tests/energy_wgrad-test.cpp:        double energy = systems[i].Energy(true);
./tests/energy_wgrad-test.cpp:                  << "]= " << std::setfill(' ') << std::setw(20) << std::right << energy << std::setw(12) << std::right
./tests/energy_wograd-test.cpp:        std::cerr << "usage: energy h2o_ion.nrg" << std::endl;
./tests/energy_wograd-test.cpp:        double energy = systems[i].Energy(false);
./tests/energy_wograd-test.cpp:                  << "]= " << std::setfill(' ') << std::setw(20) << std::right << energy << std::setw(12) << std::right
./tests/generate_define_system.cpp:        ofs << "testData.total_energy = " << e << ";\\\n";
./tests/generate_define_system.cpp:        ofs << "testData.energy_1b = " << e << ";\\\n";
./tests/generate_define_system.cpp:        ofs << "testData.energy_2b = " << e << ";\\\n";
./tests/generate_define_system.cpp:        ofs << "testData.energy_3b = " << e << ";\\\n";
./tests/generate_define_system.cpp:        ofs << "testData.energy_disp = " << e << ";\\\n";
./tests/generate_define_system.cpp:        ofs << "testData.energy_buck = " << e << ";\\\n";
./tests/generate_define_system.cpp:        ofs << "testData.energy_lj = " << e << ";\\\n";
./tests/generate_define_system.cpp:        ofs << "testData.energy_ff = " << e << ";\\\n";
./tests/get_2b_energies_list.cpp:    // Get the 2b energy for each config in xyz
./tests/getset-test.cpp:        std::cerr << "usage: energy input.nrg" << std::endl;
./tests/getset-test.cpp:    std::vector<double> energy_nograd(systems.size(), 0.0);
./tests/getset-test.cpp:    std::vector<double> energy_grad(systems.size(), 0.0);
./tests/getset-test.cpp:    // No gradient energy. Save energies in vector
./tests/getset-test.cpp:        energy_nograd[i] = systems[i].Energy(false);
./tests/getset-test.cpp:    // Gradient energy. Save energies and gradients in vector
./tests/getset-test.cpp:        energy_grad[i] = systems[i].Energy(true);
./tests/getset-test.cpp:    CompareEnergies(energy_nograd, energy_grad, testcase, exit_code);
./tests/getset-test.cpp:    CompareEnergies(energy_nograd, e_nograd_test, testcase, exit_code);
./tests/getset-test.cpp:    CompareEnergies(energy_nograd, e_nograd_test, testcase, exit_code);
./tests/getset-test.cpp:    CompareEnergies(energy_nograd, e_nograd_test, testcase, exit_code);
./tests/getset-test.cpp:    CompareEnergies(energy_grad, e_grad_test, testcase, exit_code);
./tests/getset-test.cpp:    CompareEnergies(energy_grad, e_grad_test, testcase, exit_code);
./tests/getset-test.cpp:    testcase = "ASPC energy for 10 iterations";
./tests/getset-test.cpp:        double energy_aspc = systems[i].Energy(false);
./tests/getset-test.cpp:        std::vector<double> evec(10, energy_aspc);
./tests/mbd.cpp:    std::cout << "Calculating the three-body energy for " << ats.size() << " frames\n";
./tests/optimize.cpp:    double energy = s[0].Energy(true);
./tests/optimize.cpp:    return energy;
./tests/optimize.cpp:    double energy = e0;
./tests/optimize.cpp:    tools::xmin(GradFunction, &nat, xyz_opt.data(), grad.data(), &energy, &grms, &optmzr);
./tests/system-test.cpp:        std::cerr << "usage: energy input.nrg" << std::endl;
./tests/system-test.cpp:    // Grad values are already asserted in energy test
./tests/system-test.cpp:    // Test Energy(do_grads), and individual energy functions
./tests/system-test.cpp:    // Make sure that energy is not calculated if system is not initialized
./tests/system-test.cpp:    // Test energy
./tests/system-test.cpp:    // Make sure that energy and the sum of the individual terms are the same
./tests/system-test.cpp:    double energy_ref = system_ref.Energy(true);
./tests/system-test.cpp:    double energy_read = systems[0].Energy(true);
./tests/system-test.cpp:    std::string text = " energy does not match for read and reference system";
./tests/system-test.cpp:    text = "Sum of individual terms does not match total energy in ";
./tests/system-test.cpp:    if (std::abs(energy_ref - sum_ref) > REL_TOL) {
./tests/system-test.cpp:    if (std::abs(energy_read - sum_read) > REL_TOL) {
./tests/timing.cpp:        std::cerr << "usage: energy h2o_ion.nrg" << std::endl;
./tests/timing.cpp:        double energy = systems[i].Energy(g, false);
./tests/timing.cpp:                  << "]= " << std::setfill(' ') << std::setw(20) << std::right << energy << std::setw(12) << std::right
./tests/timing.cpp:        energy = systems[i].Energy(g, true);
./tests/timing.cpp:                  << "]= " << std::setfill(' ') << std::setw(20) << std::right << energy << std::setw(12) << std::right
./tests/unittests/setup_ch4_1.h:    double one_body_energy = 1.8143669355e+01;                                                                         \
./tests/unittests/setup_ch4_1.h:    double two_body_energy = 0.0000000000e+00;                                                                         \
./tests/unittests/setup_ch4_1.h:    double three_body_energy = 0.0000000000e+00;                                                                       \
./tests/unittests/setup_ch4_1.h:    double dispersion_energy = 0.0000000000e+00;                                                                       \
./tests/unittests/setup_ch4_1.h:    double buckingham_energy = 0.0000000000e+00;                                                                       \
./tests/unittests/setup_ch4_1.h:    double electrostatic_energy = 0.0000000000e+00;                                                                    \
./tests/unittests/setup_ch4_1.h:    double total_energy = 1.8143669355e+01;                                                                            \
./tests/unittests/setup_ch4_1.h:    double total_energy_ttm = 1.8143669355e+01;                                                                        \
./tests/unittests/setup_co2_1.h:    double classic_energy = 10.28986;                                                                         \
./tests/unittests/setup_co2_1.h:    double one_body_energy = 9.9150780942e+00;                                                                \
./tests/unittests/setup_co2_1.h:    double two_body_energy = 0.0000000000e+00;                                                                \
./tests/unittests/setup_co2_1.h:    double three_body_energy = 0.0000000000e+00;                                                              \
./tests/unittests/setup_co2_1.h:    double dispersion_energy = 0.0000000000e+00;                                                              \
./tests/unittests/setup_co2_1.h:    double buckingham_energy = 0.0000000000e+00;                                                              \
./tests/unittests/setup_co2_1.h:    double electrostatic_energy = 0.0000000000e+00;                                                           \
./tests/unittests/setup_co2_1.h:    double total_energy = 9.9150780942e+00;                                                                   \
./tests/unittests/setup_co2_1.h:    double total_energy_ttm = 10.28986;                                                                       \
./tests/unittests/setup_dummy_1.h:    double one_body_energy = 0.0000000000e+00;                                         \
./tests/unittests/setup_dummy_1.h:    double two_body_energy = 0.0000000000e+00;                                         \
./tests/unittests/setup_dummy_1.h:    double three_body_energy = 0.0000000000e+00;                                       \
./tests/unittests/setup_dummy_1.h:    double dispersion_energy = 0.0000000000e+00;                                       \
./tests/unittests/setup_dummy_1.h:    double buckingham_energy = 0.0000000000e+00;                                       \
./tests/unittests/setup_dummy_1.h:    double electrostatic_energy = 0.0000000000e+00;                                    \
./tests/unittests/setup_dummy_1.h:    double total_energy = 0.0000000000e+00;                                            \
./tests/unittests/setup_dummy_1.h:    double total_energy_ttm = 0.0000000000e+00;                                        \
./tests/unittests/setup_h2o_1_br_1.h:    double one_body_energy = 3.9139698364e-01;                                                                         \
./tests/unittests/setup_h2o_1_br_1.h:    double two_body_energy = 1.5913973410e-01;                                                                         \
./tests/unittests/setup_h2o_1_br_1.h:    double three_body_energy = 0.0000000000e+00;                                                                       \
./tests/unittests/setup_h2o_1_br_1.h:    double dispersion_energy = -4.7593696199e-01;                                                                      \
./tests/unittests/setup_h2o_1_br_1.h:    double buckingham_energy = 4.2634092896e-01;                                                                       \
./tests/unittests/setup_h2o_1_br_1.h:    double electrostatic_energy = -3.3831949401e+00;                                                                   \
./tests/unittests/setup_h2o_1_br_1.h:    double total_energy = -3.3085951843e+00;                                                                           \
./tests/unittests/setup_h2o_1_br_1.h:    double total_energy_ttm = -3.0413939894e+00;                                                                       \
./tests/unittests/setup_h2o_1_cl_1.h:    double one_body_energy = 3.9139698364e-01;                                                                         \
./tests/unittests/setup_h2o_1_cl_1.h:    double two_body_energy = 5.3944188932e-02;                                                                         \
./tests/unittests/setup_h2o_1_cl_1.h:    double three_body_energy = 0.0000000000e+00;                                                                       \
./tests/unittests/setup_h2o_1_cl_1.h:    double dispersion_energy = -3.7556303515e-01;                                                                      \
./tests/unittests/setup_h2o_1_cl_1.h:    double buckingham_energy = 2.7779908817e-01;                                                                       \
./tests/unittests/setup_h2o_1_cl_1.h:    double electrostatic_energy = -3.3657295542e+00;                                                                   \
./tests/unittests/setup_h2o_1_cl_1.h:    double total_energy = -3.2959514168e+00;                                                                           \
./tests/unittests/setup_h2o_1_cl_1.h:    double total_energy_ttm = -3.0720965175e+00;                                                                       \
./tests/unittests/setup_h2o_1_cs_1.h:    double one_body_energy = 1.0718689712e-02;                                                                         \
./tests/unittests/setup_h2o_1_cs_1.h:    double two_body_energy = 1.8014372674e-01;                                                                         \
./tests/unittests/setup_h2o_1_cs_1.h:    double three_body_energy = 0.0000000000e+00;                                                                       \
./tests/unittests/setup_h2o_1_cs_1.h:    double dispersion_energy = -3.3470831242e-01;                                                                      \
./tests/unittests/setup_h2o_1_cs_1.h:    double buckingham_energy = 4.8108608305e-01;                                                                       \
./tests/unittests/setup_h2o_1_cs_1.h:    double electrostatic_energy = -9.8280059598e+00;                                                                   \
./tests/unittests/setup_h2o_1_cs_1.h:    double total_energy = -9.9718518557e+00;                                                                           \
./tests/unittests/setup_h2o_1_cs_1.h:    double total_energy_ttm = -9.6709094994e+00;                                                                       \
./tests/unittests/setup_h2o_1_f_1.h:    double one_body_energy = 3.9139698364e-01;                                                                 \
./tests/unittests/setup_h2o_1_f_1.h:    double two_body_energy = -1.7569884704e-01;                                                                \
./tests/unittests/setup_h2o_1_f_1.h:    double three_body_energy = 0.0000000000e+00;                                                               \
./tests/unittests/setup_h2o_1_f_1.h:    double dispersion_energy = -1.6532585284e-01;                                                              \
./tests/unittests/setup_h2o_1_f_1.h:    double buckingham_energy = 9.4544594801e-02;                                                               \
./tests/unittests/setup_h2o_1_f_1.h:    double electrostatic_energy = -3.3339628603e+00;                                                           \
./tests/unittests/setup_h2o_1_f_1.h:    double total_energy = -3.2835905766e+00;                                                                   \
./tests/unittests/setup_h2o_1_f_1.h:    double total_energy_ttm = -3.0133471347e+00;                                                               \
./tests/unittests/setup_h2o_1_i_1.h:    double one_body_energy = 3.9139698364e-01;                                                                         \
./tests/unittests/setup_h2o_1_i_1.h:    double two_body_energy = 4.3867264233e-01;                                                                         \
./tests/unittests/setup_h2o_1_i_1.h:    double three_body_energy = 0.0000000000e+00;                                                                       \
./tests/unittests/setup_h2o_1_i_1.h:    double dispersion_energy = -6.5753452403e-01;                                                                      \
./tests/unittests/setup_h2o_1_i_1.h:    double buckingham_energy = 8.0835388177e-01;                                                                       \
./tests/unittests/setup_h2o_1_i_1.h:    double electrostatic_energy = -3.4091806947e+00;                                                                   \
./tests/unittests/setup_h2o_1_i_1.h:    double total_energy = -3.2366455927e+00;                                                                           \
./tests/unittests/setup_h2o_1_i_1.h:    double total_energy_ttm = -2.8669643533e+00;                                                                       \
./tests/unittests/setup_h2o_1_k_1.h:    double one_body_energy = 1.0718689712e-02;                                                                         \
./tests/unittests/setup_h2o_1_k_1.h:    double two_body_energy = 2.5184771165e-01;                                                                         \
./tests/unittests/setup_h2o_1_k_1.h:    double three_body_energy = 0.0000000000e+00;                                                                       \
./tests/unittests/setup_h2o_1_k_1.h:    double dispersion_energy = -1.9814741719e-01;                                                                      \
./tests/unittests/setup_h2o_1_k_1.h:    double buckingham_energy = 1.4066102531e-01;                                                                       \
./tests/unittests/setup_h2o_1_k_1.h:    double electrostatic_energy = -9.7570990373e+00;                                                                   \
./tests/unittests/setup_h2o_1_k_1.h:    double total_energy = -9.6926800531e+00;                                                                           \
./tests/unittests/setup_h2o_1_k_1.h:    double total_energy_ttm = -9.8038667394e+00;                                                                       \
./tests/unittests/setup_h2o_1_li_1.h:    double one_body_energy = 1.0718689712e-02;                                                                         \
./tests/unittests/setup_h2o_1_li_1.h:    double two_body_energy = 3.0744853654e-02;                                                                         \
./tests/unittests/setup_h2o_1_li_1.h:    double three_body_energy = 0.0000000000e+00;                                                                       \
./tests/unittests/setup_h2o_1_li_1.h:    double dispersion_energy = -2.0093139842e-02;                                                                      \
./tests/unittests/setup_h2o_1_li_1.h:    double buckingham_energy = 8.5972476546e-03;                                                                       \
./tests/unittests/setup_h2o_1_li_1.h:    double electrostatic_energy = -9.7195206951e+00;                                                                   \
./tests/unittests/setup_h2o_1_li_1.h:    double total_energy = -9.6981502916e+00;                                                                           \
./tests/unittests/setup_h2o_1_li_1.h:    double total_energy_ttm = -9.7202978976e+00;                                                                       \
./tests/unittests/setup_h2o_1_na_1.h:    double one_body_energy = 1.0718689712e-02;                                                                         \
./tests/unittests/setup_h2o_1_na_1.h:    double two_body_energy = 1.8532291778e-01;                                                                         \
./tests/unittests/setup_h2o_1_na_1.h:    double three_body_energy = 0.0000000000e+00;                                                                       \
./tests/unittests/setup_h2o_1_na_1.h:    double dispersion_energy = -8.4256439323e-02;                                                                      \
./tests/unittests/setup_h2o_1_na_1.h:    double buckingham_energy = 3.3040650651e-02;                                                                       \
./tests/unittests/setup_h2o_1_na_1.h:    double electrostatic_energy = -9.7251804592e+00;                                                                   \
./tests/unittests/setup_h2o_1_na_1.h:    double total_energy = -9.6133952911e+00;                                                                           \
./tests/unittests/setup_h2o_1_na_1.h:    double total_energy_ttm = -9.7656775582e+00;                                                                       \
./tests/unittests/setup_h2o_1_rb_1.h:    double one_body_energy = 1.0718689712e-02;                                                                         \
./tests/unittests/setup_h2o_1_rb_1.h:    double two_body_energy = 2.4446994824e-01;                                                                         \
./tests/unittests/setup_h2o_1_rb_1.h:    double three_body_energy = 0.0000000000e+00;                                                                       \
./tests/unittests/setup_h2o_1_rb_1.h:    double dispersion_energy = -2.5573968272e-01;                                                                      \
./tests/unittests/setup_h2o_1_rb_1.h:    double buckingham_energy = 2.5188910783e-01;                                                                       \
./tests/unittests/setup_h2o_1_rb_1.h:    double electrostatic_energy = -9.7827728217e+00;                                                                   \
./tests/unittests/setup_h2o_1_rb_1.h:    double total_energy = -9.7833238665e+00;                                                                           \
./tests/unittests/setup_h2o_1_rb_1.h:    double total_energy_ttm = -9.7759047069e+00;                                                                       \
./tests/unittests/setup_h2o_2_cs_1.h:    double one_body_energy = 1.0803424170e-01;                                                                        \
./tests/unittests/setup_h2o_2_cs_1.h:    double two_body_energy = 7.0308260761e+00;                                                                        \
./tests/unittests/setup_h2o_2_cs_1.h:    double three_body_energy = 2.0176306190e-01;                                                                      \
./tests/unittests/setup_h2o_2_cs_1.h:    double dispersion_energy = -3.0137925633e+00;                                                                     \
./tests/unittests/setup_h2o_2_cs_1.h:    double buckingham_energy = 8.0502926085e+00;                                                                      \
./tests/unittests/setup_h2o_2_cs_1.h:    double electrostatic_energy = -3.0276469460e+01;                                                                  \
./tests/unittests/setup_h2o_2_cs_1.h:    double total_energy = -2.5949638643e+01;                                                                          \
./tests/unittests/setup_h2o_2_cs_1.h:    double total_energy_ttm = -2.3676711108e+01;                                                                      \
./tests/unittests/setup_h2o_2_k_1.h:    double one_body_energy = 1.0803424170e-01;                                                                        \
./tests/unittests/setup_h2o_2_k_1.h:    double two_body_energy = 4.2055773093e+00;                                                                        \
./tests/unittests/setup_h2o_2_k_1.h:    double three_body_energy = 2.5989082359e-01;                                                                      \
./tests/unittests/setup_h2o_2_k_1.h:    double dispersion_energy = -2.3266025337e+00;                                                                     \
./tests/unittests/setup_h2o_2_k_1.h:    double buckingham_energy = 3.2125022331e+00;                                                                      \
./tests/unittests/setup_h2o_2_k_1.h:    double electrostatic_energy = -2.9939326850e+01;                                                                  \
./tests/unittests/setup_h2o_2_k_1.h:    double total_energy = -2.7692427010e+01;                                                                          \
./tests/unittests/setup_h2o_2_k_1.h:    double total_energy_ttm = -2.7490168845e+01;                                                                      \
./tests/unittests/setup_h2o_2_li_1.h:    double one_body_energy = 1.0803424170e-01;                                                                        \
./tests/unittests/setup_h2o_2_li_1.h:    double two_body_energy = 2.0412830644e+00;                                                                        \
./tests/unittests/setup_h2o_2_li_1.h:    double three_body_energy = 2.2566296760e-01;                                                                      \
./tests/unittests/setup_h2o_2_li_1.h:    double dispersion_energy = -1.3336889263e+00;                                                                     \
./tests/unittests/setup_h2o_2_li_1.h:    double buckingham_energy = 3.3551835448e-01;                                                                      \
./tests/unittests/setup_h2o_2_li_1.h:    double electrostatic_energy = -2.9624912543e+01;                                                                  \
./tests/unittests/setup_h2o_2_li_1.h:    double total_energy = -2.8583621195e+01;                                                                          \
./tests/unittests/setup_h2o_2_li_1.h:    double total_energy_ttm = -2.9059824808e+01;                                                                      \
./tests/unittests/setup_h2o_2_mbpol.h:    double one_body_energy = 2.0692536942e+00;                                                              \
./tests/unittests/setup_h2o_2_mbpol.h:    double two_body_energy = 1.6715908234e+00;                                                              \
./tests/unittests/setup_h2o_2_mbpol.h:    double three_body_energy = 0.0000000000e+00;                                                            \
./tests/unittests/setup_h2o_2_mbpol.h:    double dispersion_energy = -1.1353491370e+00;                                                           \
./tests/unittests/setup_h2o_2_mbpol.h:    double buckingham_energy = 0.0000000000e+00;                                                            \
./tests/unittests/setup_h2o_2_mbpol.h:    double electrostatic_energy = -2.5811552627e+00;                                                        \
./tests/unittests/setup_h2o_2_mbpol.h:    double total_energy = 2.4340117882e-02;                                                                 \
./tests/unittests/setup_h2o_2_mbpol.h:    double total_energy_ttm = 2.4340117882e-02;                                                             \
./tests/unittests/setup_h2o_2_na_1.h:    double one_body_energy = 1.0803424170e-01;                                                                        \
./tests/unittests/setup_h2o_2_na_1.h:    double two_body_energy = 2.8736601016e+00;                                                                        \
./tests/unittests/setup_h2o_2_na_1.h:    double three_body_energy = 1.9055043094e-01;                                                                      \
./tests/unittests/setup_h2o_2_na_1.h:    double dispersion_energy = -1.7064606812e+00;                                                                     \
./tests/unittests/setup_h2o_2_na_1.h:    double buckingham_energy = 1.0327578345e+00;                                                                      \
./tests/unittests/setup_h2o_2_na_1.h:    double electrostatic_energy = -2.9678893074e+01;                                                                  \
./tests/unittests/setup_h2o_2_na_1.h:    double total_energy = -2.8213108981e+01;                                                                          \
./tests/unittests/setup_h2o_2_na_1.h:    double total_energy_ttm = -2.8789337615e+01;                                                                      \
./tests/unittests/setup_h2o_2_rb_1.h:    double one_body_energy = 1.0803424170e-01;                                                                        \
./tests/unittests/setup_h2o_2_rb_1.h:    double two_body_energy = 5.1908162261e+00;                                                                        \
./tests/unittests/setup_h2o_2_rb_1.h:    double three_body_energy = 2.4658894566e-01;                                                                      \
./tests/unittests/setup_h2o_2_rb_1.h:    double dispersion_energy = -2.6255583522e+00;                                                                     \
./tests/unittests/setup_h2o_2_rb_1.h:    double buckingham_energy = 5.0088579982e+00;                                                                      \
./tests/unittests/setup_h2o_2_rb_1.h:    double electrostatic_energy = -3.0080262555e+01;                                                                  \
./tests/unittests/setup_h2o_2_rb_1.h:    double total_energy = -2.7160381494e+01;                                                                          \
./tests/unittests/setup_h2o_2_rb_1.h:    double total_energy_ttm = -2.6133704604e+01;                                                                      \
./tests/unittests/setup_h2o_5_br_1.h:    double one_body_energy = 1.0759450217e+00;                                                                        \
./tests/unittests/setup_h2o_5_br_1.h:    double two_body_energy = 2.5636777719e+01;                                                                        \
./tests/unittests/setup_h2o_5_br_1.h:    double three_body_energy = -3.2745042811e-01;                                                                     \
./tests/unittests/setup_h2o_5_br_1.h:    double dispersion_energy = -1.5309349723e+01;                                                                     \
./tests/unittests/setup_h2o_5_br_1.h:    double electrostatic_energy = -7.3208264066e+01;                                                                  \
./tests/unittests/setup_h2o_5_br_1.h:    double total_energy = -6.2132341476e+01;                                                                          \
./tests/unittests/setup_h4_dummy.h:    double classic_energy = 1.6090302673e+01;                                                      \
./tests/unittests/setup_topology.h: *        classes, including the parameters. Additionally, the energy for each
./tests/unittests/setup_topology.h:    double ff_bond_harm_energy = 4.2833269444e+00;                   \
./tests/unittests/setup_topology.h:    double ff_bond_morse_energy = 1.5269349493e+00;                  \
./tests/unittests/setup_topology.h:    double ff_bond_quartic_energy = 3.4997461351e+02;                \
./tests/unittests/setup_topology.h:    double ff_bond_none_energy = 0.0000000000e+00;                   \
./tests/unittests/setup_topology.h:    double ff_angles_harm_energy = 1.4210404370e+01;                 \
./tests/unittests/setup_topology.h:    double ff_angles_quartic_energy = 5.8314641535e+00;              \
./tests/unittests/setup_topology.h:    double ff_angles_none_energy = 0.0000000000e+00;                 \
./tests/unittests/setup_topology.h:    double ff_dihedral_cos_energy = 1.6949010764e+00;                \
./tests/unittests/setup_topology.h:    double ff_dihedral_harm_energy = 3.9230588271e+00;               \
./tests/unittests/setup_topology.h:    double ff_dihedral_hcos_energy = 9.3946046835e-01;               \
./tests/unittests/setup_topology.h:    double ff_dihedral_cos3_energy = 3.5783358351e+00;               \
./tests/unittests/setup_topology.h:    double ff_dihedral_none_energy = 0.0000000000e+00;               \
./tests/unittests/setup_topology.h:    double ff_inversion_harm_energy = 1.3564960428e+01;              \
./tests/unittests/setup_topology.h:    double ff_inversion_none_energy = 0.0000000000e+00;              \
./tests/unittests/unittest-angle.cpp:        SECTION("Harmonic Energy") { REQUIRE(angle.GetEnergy(theta) == Approx(ff_angles_harm_energy).margin(TOL)); }
./tests/unittests/unittest-angle.cpp:        SECTION("Quartic Energy") { REQUIRE(angle.GetEnergy(theta) == Approx(ff_angles_quartic_energy).margin(TOL)); }
./tests/unittests/unittest-angle.cpp:        SECTION("None Energy") { REQUIRE(angle.GetEnergy(theta) == Approx(ff_angles_none_energy).margin(TOL)); }
./tests/unittests/unittest-bond.cpp:        SECTION("Harmonic Energy") { REQUIRE(bond.GetEnergy(distance) == Approx(ff_bond_harm_energy).margin(TOL)); }
./tests/unittests/unittest-bond.cpp:        SECTION("Morse Energy") { REQUIRE(bond.GetEnergy(distance) == Approx(ff_bond_morse_energy).margin(TOL)); }
./tests/unittests/unittest-bond.cpp:        SECTION("Quartic Energy") { REQUIRE(bond.GetEnergy(distance) == Approx(ff_bond_quartic_energy).margin(TOL)); }
./tests/unittests/unittest-bond.cpp:        SECTION("None Energy") { REQUIRE(bond.GetEnergy(distance) == Approx(ff_bond_none_energy).margin(TOL)); }
./tests/unittests/unittest-box-shapes.cpp:double energy_translated(int i, int j, int k, bblock::System s, std::vector<double> box, std::vector<double> xyz,
./tests/unittests/unittest-box-shapes.cpp:                    double en = energy_translated(i, j, k, my_system, cubic_box, real_xyz_ref, grd);
./tests/unittests/unittest-box-shapes.cpp:                    double en = energy_translated(i, j, k, my_system, rectangular_box, real_xyz_ref, grd);
./tests/unittests/unittest-box-shapes.cpp:                    double en = energy_translated(i, j, k, my_system, general_box, real_xyz_ref, grd);
./tests/unittests/unittest-box-shapes.cpp:    //        double energy_nograd = my_system.OneBodyEnergy(false);
./tests/unittests/unittest-box-shapes.cpp:    //        double energy_grad = my_system.OneBodyEnergy(true);
./tests/unittests/unittest-box-shapes.cpp:    //        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(one_body_energy).margin(TOL)); }
./tests/unittests/unittest-box-shapes.cpp:    //        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(one_body_energy).margin(TOL)); }
./tests/unittests/unittest-box-shapes.cpp:    //        double energy_nograd = my_system.TwoBodyEnergy(false);
./tests/unittests/unittest-box-shapes.cpp:    //        double energy_grad = my_system.TwoBodyEnergy(true);
./tests/unittests/unittest-box-shapes.cpp:    //        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(two_body_energy).margin(TOL)); }
./tests/unittests/unittest-box-shapes.cpp:    //        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(two_body_energy).margin(TOL)); }
./tests/unittests/unittest-box-shapes.cpp:    //        double energy_nograd = my_system.ThreeBodyEnergy(false);
./tests/unittests/unittest-box-shapes.cpp:    //        double energy_grad = my_system.ThreeBodyEnergy(true);
./tests/unittests/unittest-box-shapes.cpp:    //        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(three_body_energy).margin(TOL)); }
./tests/unittests/unittest-box-shapes.cpp:    //        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(three_body_energy).margin(TOL)); }
./tests/unittests/unittest-box-shapes.cpp:    //        double energy_nograd = my_system.Dispersion(false);
./tests/unittests/unittest-box-shapes.cpp:    //        double energy_grad = my_system.Dispersion(true);
./tests/unittests/unittest-box-shapes.cpp:    //        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-box-shapes.cpp:    //        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-box-shapes.cpp:    //        double energy_nograd = my_system.Electrostatics(false);
./tests/unittests/unittest-box-shapes.cpp:    //        double energy_grad = my_system.Electrostatics(true);
./tests/unittests/unittest-box-shapes.cpp:    //        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(electrostatic_energy).margin(TOL));
./tests/unittests/unittest-box-shapes.cpp:    //        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(electrostatic_energy).margin(TOL)); }
./tests/unittests/unittest-box-shapes.cpp:    //        double energy_nograd = my_system.Energy(false);
./tests/unittests/unittest-box-shapes.cpp:    //        double energy_grad = my_system.Energy(true);
./tests/unittests/unittest-box-shapes.cpp:    //        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(total_energy).margin(TOL)); }
./tests/unittests/unittest-box-shapes.cpp:    //        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(total_energy).margin(TOL)); }
./tests/unittests/unittest-box-shapes.cpp:    //        double energy_nograd = my_system.Buckingham(false);
./tests/unittests/unittest-box-shapes.cpp:    //        double energy_grad = my_system.Buckingham(true);
./tests/unittests/unittest-box-shapes.cpp:    //        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(buckingham_energy).margin(TOL)); }
./tests/unittests/unittest-box-shapes.cpp:    //        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(buckingham_energy).margin(TOL)); }
./tests/unittests/unittest-box-shapes.cpp:    //        double energy_nograd = my_system.Energy(false);
./tests/unittests/unittest-box-shapes.cpp:    //        double energy_grad = my_system.Energy(true);
./tests/unittests/unittest-box-shapes.cpp:    //        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(total_energy_ttm).margin(TOL)); }
./tests/unittests/unittest-box-shapes.cpp:    //        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(total_energy_ttm).margin(TOL)); }
./tests/unittests/unittest-box-shapes.cpp:    //        double energy_grad = my_system.OneBodyEnergy(true);
./tests/unittests/unittest-box-shapes.cpp:    //        double energy_grad = my_system.TwoBodyEnergy(true);
./tests/unittests/unittest-box-shapes.cpp:    //        double energy_grad = my_system.Dispersion(true);
./tests/unittests/unittest-box-shapes.cpp:    //        double energy_grad = my_system.Buckingham(true);
./tests/unittests/unittest-box-shapes.cpp:    //        double energy_grad = my_system.Electrostatics(true);
./tests/unittests/unittest-ch4-monomer.cpp:TEST_CASE("Test ch4 monomer energy terms") {
./tests/unittests/unittest-ch4-monomer.cpp:        double energy_nograd = my_system.OneBodyEnergy(false);
./tests/unittests/unittest-ch4-monomer.cpp:        double energy_grad = my_system.OneBodyEnergy(true);
./tests/unittests/unittest-ch4-monomer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(one_body_energy).margin(TOL)); }
./tests/unittests/unittest-ch4-monomer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(one_body_energy).margin(TOL)); }
./tests/unittests/unittest-ch4-monomer.cpp:        double energy_nograd = my_system.TwoBodyEnergy(false);
./tests/unittests/unittest-ch4-monomer.cpp:        double energy_grad = my_system.TwoBodyEnergy(true);
./tests/unittests/unittest-ch4-monomer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(two_body_energy).margin(TOL)); }
./tests/unittests/unittest-ch4-monomer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(two_body_energy).margin(TOL)); }
./tests/unittests/unittest-ch4-monomer.cpp:        double energy_nograd = my_system.ThreeBodyEnergy(false);
./tests/unittests/unittest-ch4-monomer.cpp:        double energy_grad = my_system.ThreeBodyEnergy(true);
./tests/unittests/unittest-ch4-monomer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(three_body_energy).margin(TOL)); }
./tests/unittests/unittest-ch4-monomer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(three_body_energy).margin(TOL)); }
./tests/unittests/unittest-ch4-monomer.cpp:        double energy_nograd = my_system.Dispersion(false);
./tests/unittests/unittest-ch4-monomer.cpp:        double energy_grad = my_system.Dispersion(true);
./tests/unittests/unittest-ch4-monomer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-ch4-monomer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-ch4-monomer.cpp:        double energy_nograd = my_system.Electrostatics(false);
./tests/unittests/unittest-ch4-monomer.cpp:        double energy_grad = my_system.Electrostatics(true);
./tests/unittests/unittest-ch4-monomer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(electrostatic_energy).margin(TOL)); }
./tests/unittests/unittest-ch4-monomer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(electrostatic_energy).margin(TOL)); }
./tests/unittests/unittest-ch4-monomer.cpp:        double energy_nograd = my_system.Energy(false);
./tests/unittests/unittest-ch4-monomer.cpp:        double energy_grad = my_system.Energy(true);
./tests/unittests/unittest-ch4-monomer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(total_energy).margin(TOL)); }
./tests/unittests/unittest-ch4-monomer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(total_energy).margin(TOL)); }
./tests/unittests/unittest-ch4-monomer.cpp:        double energy_nograd = my_system.Buckingham(false);
./tests/unittests/unittest-ch4-monomer.cpp:        double energy_grad = my_system.Buckingham(true);
./tests/unittests/unittest-ch4-monomer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(buckingham_energy).margin(TOL)); }
./tests/unittests/unittest-ch4-monomer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(buckingham_energy).margin(TOL)); }
./tests/unittests/unittest-ch4-monomer.cpp:        double energy_nograd = my_system.Energy(false);
./tests/unittests/unittest-ch4-monomer.cpp:        double energy_grad = my_system.Energy(true);
./tests/unittests/unittest-ch4-monomer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(total_energy_ttm).margin(TOL)); }
./tests/unittests/unittest-ch4-monomer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(total_energy_ttm).margin(TOL)); }
./tests/unittests/unittest-co2-monomer.cpp:TEST_CASE("Test co2 monomer energy terms") {
./tests/unittests/unittest-co2-monomer.cpp:        double energy_nograd = my_system.OneBodyEnergy(false);
./tests/unittests/unittest-co2-monomer.cpp:        double energy_grad = my_system.OneBodyEnergy(true);
./tests/unittests/unittest-co2-monomer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(one_body_energy).margin(TOL)); }
./tests/unittests/unittest-co2-monomer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(one_body_energy).margin(TOL)); }
./tests/unittests/unittest-co2-monomer.cpp:        double energy_nograd = my_system.TwoBodyEnergy(false);
./tests/unittests/unittest-co2-monomer.cpp:        double energy_grad = my_system.TwoBodyEnergy(true);
./tests/unittests/unittest-co2-monomer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(two_body_energy).margin(TOL)); }
./tests/unittests/unittest-co2-monomer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(two_body_energy).margin(TOL)); }
./tests/unittests/unittest-co2-monomer.cpp:        double energy_nograd = my_system.ThreeBodyEnergy(false);
./tests/unittests/unittest-co2-monomer.cpp:        double energy_grad = my_system.ThreeBodyEnergy(true);
./tests/unittests/unittest-co2-monomer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(three_body_energy).margin(TOL)); }
./tests/unittests/unittest-co2-monomer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(three_body_energy).margin(TOL)); }
./tests/unittests/unittest-co2-monomer.cpp:        double energy_nograd = my_system.Dispersion(false);
./tests/unittests/unittest-co2-monomer.cpp:        double energy_grad = my_system.Dispersion(true);
./tests/unittests/unittest-co2-monomer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-co2-monomer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-co2-monomer.cpp:        double energy_nograd = my_system.Electrostatics(false);
./tests/unittests/unittest-co2-monomer.cpp:        double energy_grad = my_system.Electrostatics(true);
./tests/unittests/unittest-co2-monomer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(electrostatic_energy).margin(TOL)); }
./tests/unittests/unittest-co2-monomer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(electrostatic_energy).margin(TOL)); }
./tests/unittests/unittest-co2-monomer.cpp:        double energy_nograd = my_system.Energy(false);
./tests/unittests/unittest-co2-monomer.cpp:        double energy_grad = my_system.Energy(true);
./tests/unittests/unittest-co2-monomer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(total_energy).margin(TOL)); }
./tests/unittests/unittest-co2-monomer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(total_energy).margin(TOL)); }
./tests/unittests/unittest-co2-monomer.cpp:        double energy_nograd = my_system.ClassicPotential(false);
./tests/unittests/unittest-co2-monomer.cpp:        double energy_grad = my_system.ClassicPotential(true);
./tests/unittests/unittest-co2-monomer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(classic_energy).margin(TOL)); }
./tests/unittests/unittest-co2-monomer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(classic_energy).margin(TOL)); }
./tests/unittests/unittest-co2-monomer.cpp:        double energy_nograd = my_system.Buckingham(false);
./tests/unittests/unittest-co2-monomer.cpp:        double energy_grad = my_system.Buckingham(true);
./tests/unittests/unittest-co2-monomer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(buckingham_energy).margin(TOL)); }
./tests/unittests/unittest-co2-monomer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(buckingham_energy).margin(TOL)); }
./tests/unittests/unittest-co2-monomer.cpp:        double energy_nograd = my_system.Energy(false);
./tests/unittests/unittest-co2-monomer.cpp:        double energy_grad = my_system.Energy(true);
./tests/unittests/unittest-co2-monomer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(total_energy_ttm).margin(TOL)); }
./tests/unittests/unittest-co2-monomer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(total_energy_ttm).margin(TOL)); }
./tests/unittests/unittest-dihedral.cpp:            REQUIRE(dihedral.GetEnergy(dihedral_phi) == Approx(ff_dihedral_cos_energy).margin(TOL));
./tests/unittests/unittest-dihedral.cpp:            REQUIRE(dihedral.GetEnergy(dihedral_phi) == Approx(ff_dihedral_harm_energy).margin(TOL));
./tests/unittests/unittest-dihedral.cpp:            REQUIRE(dihedral.GetEnergy(dihedral_phi) == Approx(ff_dihedral_hcos_energy).margin(TOL));
./tests/unittests/unittest-dihedral.cpp:            REQUIRE(dihedral.GetEnergy(dihedral_phi) == Approx(ff_dihedral_cos3_energy).margin(TOL));
./tests/unittests/unittest-dihedral.cpp:            REQUIRE(dihedral.GetEnergy(dihedral_phi) == Approx(ff_dihedral_none_energy).margin(TOL));
./tests/unittests/unittest-dispersion-gas-cutoff.cpp:        double energy_nograd = my_disp.GetDispersion(dummy);
./tests/unittests/unittest-dispersion-gas-cutoff.cpp:        double energy_grad = my_disp.GetDispersion(grad);
./tests/unittests/unittest-dispersion-gas-cutoff.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-dispersion-gas-cutoff.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-dispersion-gas-cutoff.cpp:        double energy_grad = my_disp.GetDispersion(grad);
./tests/unittests/unittest-dispersion-gas-cutoff.cpp:        double energy_grad = my_disp.GetDispersion(grad);
./tests/unittests/unittest-dispersion-pme.cpp:    SECTION("Check continuity of the energy across switching region and cutoff") {
./tests/unittests/unittest-dispersion-pme.cpp:        double old_energy = my_disp.GetDispersion(dummy);
./tests/unittests/unittest-dispersion-pme.cpp:            double energy = my_disp.GetDispersion(dummy);
./tests/unittests/unittest-dispersion-pme.cpp:            double dE = energy - old_energy;
./tests/unittests/unittest-dispersion-pme.cpp:                      << std::setprecision(10) << energy << ",  " << std::setw(16) << std::setprecision(10) << dE
./tests/unittests/unittest-dispersion-pme.cpp:            old_energy = energy;
./tests/unittests/unittest-dispersion-pme.cpp:        double energy3 = ewald_disp.GetDispersion(forces3);
./tests/unittests/unittest-dispersion-pme.cpp:        std::cout << energy3 << std::endl;
./tests/unittests/unittest-dispersion-pme.cpp:        double energy4 = ewald_disp.GetDispersion(forces4);
./tests/unittests/unittest-dispersion-pme.cpp:        REQUIRE(energy3 == Approx(energy4).margin(TOL));
./tests/unittests/unittest-dispersion-pme.cpp:        double energy5 = ewald_disp.GetDispersion(forces5);
./tests/unittests/unittest-dispersion-pme.cpp:        REQUIRE(energy4 == Approx(energy5).margin(TOL));
./tests/unittests/unittest-dispersion-pme.cpp:        double energy_grad = my_disp.GetDispersion(grad);
./tests/unittests/unittest-dispersion-pme.cpp:        double energy_grad = my_disp.GetDispersion(grad);
./tests/unittests/unittest-dispersion-pme.cpp:        double energy_grad = my_disp.GetDispersion(grad);
./tests/unittests/unittest-dummy-monomer.cpp:TEST_CASE("Test dummy monomer energy terms") {
./tests/unittests/unittest-dummy-monomer.cpp:        double energy_nograd = my_system.OneBodyEnergy(false);
./tests/unittests/unittest-dummy-monomer.cpp:        double energy_grad = my_system.OneBodyEnergy(true);
./tests/unittests/unittest-dummy-monomer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(one_body_energy).margin(TOL)); }
./tests/unittests/unittest-dummy-monomer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(one_body_energy).margin(TOL)); }
./tests/unittests/unittest-dummy-monomer.cpp:        double energy_nograd = my_system.TwoBodyEnergy(false);
./tests/unittests/unittest-dummy-monomer.cpp:        double energy_grad = my_system.TwoBodyEnergy(true);
./tests/unittests/unittest-dummy-monomer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(two_body_energy).margin(TOL)); }
./tests/unittests/unittest-dummy-monomer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(two_body_energy).margin(TOL)); }
./tests/unittests/unittest-dummy-monomer.cpp:        double energy_nograd = my_system.ThreeBodyEnergy(false);
./tests/unittests/unittest-dummy-monomer.cpp:        double energy_grad = my_system.ThreeBodyEnergy(true);
./tests/unittests/unittest-dummy-monomer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(three_body_energy).margin(TOL)); }
./tests/unittests/unittest-dummy-monomer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(three_body_energy).margin(TOL)); }
./tests/unittests/unittest-dummy-monomer.cpp:        double energy_nograd = my_system.Dispersion(false);
./tests/unittests/unittest-dummy-monomer.cpp:        double energy_grad = my_system.Dispersion(true);
./tests/unittests/unittest-dummy-monomer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-dummy-monomer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-dummy-monomer.cpp:        double energy_nograd = my_system.Electrostatics(false);
./tests/unittests/unittest-dummy-monomer.cpp:        double energy_grad = my_system.Electrostatics(true);
./tests/unittests/unittest-dummy-monomer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(electrostatic_energy).margin(TOL)); }
./tests/unittests/unittest-dummy-monomer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(electrostatic_energy).margin(TOL)); }
./tests/unittests/unittest-dummy-monomer.cpp:        double energy_nograd = my_system.Energy(false);
./tests/unittests/unittest-dummy-monomer.cpp:        double energy_grad = my_system.Energy(true);
./tests/unittests/unittest-dummy-monomer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(total_energy).margin(TOL)); }
./tests/unittests/unittest-dummy-monomer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(total_energy).margin(TOL)); }
./tests/unittests/unittest-dummy-monomer.cpp:        double energy_nograd = my_system.Buckingham(false);
./tests/unittests/unittest-dummy-monomer.cpp:        double energy_grad = my_system.Buckingham(true);
./tests/unittests/unittest-dummy-monomer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(buckingham_energy).margin(TOL)); }
./tests/unittests/unittest-dummy-monomer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(buckingham_energy).margin(TOL)); }
./tests/unittests/unittest-dummy-monomer.cpp:        double energy_nograd = my_system.Energy(false);
./tests/unittests/unittest-dummy-monomer.cpp:        double energy_grad = my_system.Energy(true);
./tests/unittests/unittest-dummy-monomer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(total_energy_ttm).margin(TOL)); }
./tests/unittests/unittest-dummy-monomer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(total_energy_ttm).margin(TOL)); }
./tests/unittests/unittest-gas-dispersion-findif.cpp:    double ref_energy = -0.162541;
./tests/unittests/unittest-gas-dispersion-findif.cpp:    double energy = elec.GetElectrostatics(forces);
./tests/unittests/unittest-gas-dispersion-findif.cpp:    std::cout << "Energy: " << energy << std::endl;
./tests/unittests/unittest-gas-dispersion-findif.cpp:    REQUIRE(energy == Approx(ref_energy).epsilon(TOL));
./tests/unittests/unittest-gas-electrostatics-mbpol.cpp:    double energy = elec.GetElectrostatics(forces);
./tests/unittests/unittest-gas-electrostatics-mbpol.cpp:    SECTION("Permanent electrostatic energy.") { REQUIRE(perm_elec == Approx(-1.8567131645e+01).margin(TOL)); }
./tests/unittests/unittest-gas-electrostatics-mbpol.cpp:    SECTION("Induced electrostatic energy.") { REQUIRE(ind_elec == Approx(-6.4991884968e+00).margin(TOL)); }
./tests/unittests/unittest-gas-electrostatics-mbpol.cpp:    SECTION("Total electrostatic energy.") {
./tests/unittests/unittest-gas-electrostatics-mbpol.cpp:        REQUIRE(energy == Approx(-2.5066320142e+01).margin(TOL));
./tests/unittests/unittest-gas-electrostatics-mbpol.cpp:        SECTION("Forces of the total electrostatic energy") {
./tests/unittests/unittest-gas-nbodyterms-mbpol.cpp:#include "potential/1b/energy1b.h"
./tests/unittests/unittest-gas-nbodyterms-mbpol.cpp:#include "potential/2b/energy2b.h"
./tests/unittests/unittest-gas-nbodyterms-mbpol.cpp:#include "potential/3b/energy3b.h"
./tests/unittests/unittest-gas-nbodyterms-mbpol.cpp:        double energy_1b_nograd = e1b::get_1b_energy(monomer_name, nmon, real_xyz, good);
./tests/unittests/unittest-gas-nbodyterms-mbpol.cpp:        double energy_1b_grad = e1b::get_1b_energy(monomer_name, nmon, real_xyz, grad, good);
./tests/unittests/unittest-gas-nbodyterms-mbpol.cpp:        SECTION("Energy without gradients.") { REQUIRE(energy_1b_nograd == Approx(3.2265445802e-01).margin(TOL)); }
./tests/unittests/unittest-gas-nbodyterms-mbpol.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_1b_grad == Approx(3.2265445802e-01).margin(TOL)); }
./tests/unittests/unittest-gas-nbodyterms-mbpol.cpp:                    double plusEnergy = e1b::get_1b_energy(monomer_name, nmon, real_xyz, good);
./tests/unittests/unittest-gas-nbodyterms-mbpol.cpp:                    double minusEnergy = e1b::get_1b_energy(monomer_name, nmon, real_xyz, good);
./tests/unittests/unittest-gas-nbodyterms-mbpol.cpp:        double energy_2b_nograd = e2b::get_2b_energy(monomer_name, monomer_name, ndimers, xyz1, xyz2);
./tests/unittests/unittest-gas-nbodyterms-mbpol.cpp:        double energy_2b_grad = e2b::get_2b_energy(monomer_name, monomer_name, ndimers, xyz1, xyz2, grad1, grad2);
./tests/unittests/unittest-gas-nbodyterms-mbpol.cpp:        SECTION("Energy without gradients.") { REQUIRE(energy_2b_nograd == Approx(1.7011845631e+01).margin(TOL)); }
./tests/unittests/unittest-gas-nbodyterms-mbpol.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_2b_grad == Approx(1.7011845631e+01).margin(TOL)); }
./tests/unittests/unittest-gas-nbodyterms-mbpol.cpp:                    double plusEnergy = e2b::get_2b_energy(monomer_name, monomer_name, ndimers, xyz1, xyz2);
./tests/unittests/unittest-gas-nbodyterms-mbpol.cpp:                    double minusEnergy = e2b::get_2b_energy(monomer_name, monomer_name, ndimers, xyz1, xyz2);
./tests/unittests/unittest-gas-nbodyterms-mbpol.cpp:        double energy_2b_nograd = dispersion_class.GetDispersion(grad_dummy);
./tests/unittests/unittest-gas-nbodyterms-mbpol.cpp:        double energy_2b_grad = dispersion_class.GetDispersion(grad);
./tests/unittests/unittest-gas-nbodyterms-mbpol.cpp:        SECTION("Energy without gradients.") { REQUIRE(energy_2b_nograd == Approx(-8.1876933060e+00).margin(TOL)); }
./tests/unittests/unittest-gas-nbodyterms-mbpol.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_2b_grad == Approx(-8.1876933060e+00).margin(TOL)); }
./tests/unittests/unittest-gas-nbodyterms-mbpol.cpp:        double energy_3b_nograd = e3b::get_3b_energy(monomer_name, monomer_name, monomer_name, 1, xyz1, xyz2, xyz3);
./tests/unittests/unittest-gas-nbodyterms-mbpol.cpp:        double energy_3b_grad =
./tests/unittests/unittest-gas-nbodyterms-mbpol.cpp:            e3b::get_3b_energy(monomer_name, monomer_name, monomer_name, 1, xyz1, xyz2, xyz3, grad1, grad2, grad3);
./tests/unittests/unittest-gas-nbodyterms-mbpol.cpp:        SECTION("Energy without gradients.") { REQUIRE(energy_3b_nograd == Approx(2.2777705108e-01).margin(TOL)); }
./tests/unittests/unittest-gas-nbodyterms-mbpol.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_3b_grad == Approx(2.2777705108e-01).margin(TOL)); }
./tests/unittests/unittest-gas-nbodyterms-mbpol.cpp:                        e3b::get_3b_energy(monomer_name, monomer_name, monomer_name, 1, xyz1, xyz2, xyz3);
./tests/unittests/unittest-gas-nbodyterms-mbpol.cpp:                        e3b::get_3b_energy(monomer_name, monomer_name, monomer_name, 1, xyz1, xyz2, xyz3);
./tests/unittests/unittest-gas-nopolarization-findif.cpp:    double ref_energy = -0.162541;
./tests/unittests/unittest-gas-nopolarization-findif.cpp:    double energy = elec.GetElectrostatics(forces);
./tests/unittests/unittest-gas-nopolarization-findif.cpp:    std::cout << "Energy: " << energy << std::endl;
./tests/unittests/unittest-gas-nopolarization-findif.cpp:    REQUIRE(energy == Approx(ref_energy).epsilon(TOL));
./tests/unittests/unittest-gas-withpolarization-findif.cpp:    double ref_energy = -0.1632261513;
./tests/unittests/unittest-gas-withpolarization-findif.cpp:    double energy = elec.GetElectrostatics(forces);
./tests/unittests/unittest-gas-withpolarization-findif.cpp:    std::cout << "Energy: " << std::setw(16) << std::setprecision(10) << energy << std::endl;
./tests/unittests/unittest-gas-withpolarization-findif.cpp:    REQUIRE(energy == Approx(ref_energy).epsilon(TOL));
./tests/unittests/unittest-h2o-br-dimer.cpp:TEST_CASE("Test water -- bromide energy terms") {
./tests/unittests/unittest-h2o-br-dimer.cpp:        double energy_nograd = my_system.OneBodyEnergy(false);
./tests/unittests/unittest-h2o-br-dimer.cpp:        double energy_grad = my_system.OneBodyEnergy(true);
./tests/unittests/unittest-h2o-br-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(one_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-br-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(one_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-br-dimer.cpp:        double energy_nograd = my_system.TwoBodyEnergy(false);
./tests/unittests/unittest-h2o-br-dimer.cpp:        double energy_grad = my_system.TwoBodyEnergy(true);
./tests/unittests/unittest-h2o-br-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(two_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-br-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(two_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-br-dimer.cpp:        double energy_nograd = my_system.ThreeBodyEnergy(false);
./tests/unittests/unittest-h2o-br-dimer.cpp:        double energy_grad = my_system.ThreeBodyEnergy(true);
./tests/unittests/unittest-h2o-br-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(three_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-br-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(three_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-br-dimer.cpp:        double energy_nograd = my_system.Dispersion(false);
./tests/unittests/unittest-h2o-br-dimer.cpp:        double energy_grad = my_system.Dispersion(true);
./tests/unittests/unittest-h2o-br-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-br-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-br-dimer.cpp:        double energy_nograd = my_system.Electrostatics(false);
./tests/unittests/unittest-h2o-br-dimer.cpp:        double energy_grad = my_system.Electrostatics(true);
./tests/unittests/unittest-h2o-br-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(electrostatic_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-br-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(electrostatic_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-br-dimer.cpp:        double energy_nograd = my_system.Energy(false);
./tests/unittests/unittest-h2o-br-dimer.cpp:        double energy_grad = my_system.Energy(true);
./tests/unittests/unittest-h2o-br-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(total_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-br-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(total_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-br-dimer.cpp:        double energy_nograd = my_system.Buckingham(false);
./tests/unittests/unittest-h2o-br-dimer.cpp:        double energy_grad = my_system.Buckingham(true);
./tests/unittests/unittest-h2o-br-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(buckingham_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-br-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(buckingham_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-br-dimer.cpp:        double energy_nograd = my_system.Energy(false);
./tests/unittests/unittest-h2o-br-dimer.cpp:        double energy_grad = my_system.Energy(true);
./tests/unittests/unittest-h2o-br-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(total_energy_ttm).margin(TOL)); }
./tests/unittests/unittest-h2o-br-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(total_energy_ttm).margin(TOL)); }
./tests/unittests/unittest-h2o-cl-dimer.cpp:TEST_CASE("Test water -- chloride energy terms") {
./tests/unittests/unittest-h2o-cl-dimer.cpp:        double energy_nograd = my_system.OneBodyEnergy(false);
./tests/unittests/unittest-h2o-cl-dimer.cpp:        double energy_grad = my_system.OneBodyEnergy(true);
./tests/unittests/unittest-h2o-cl-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(one_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-cl-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(one_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-cl-dimer.cpp:        double energy_nograd = my_system.TwoBodyEnergy(false);
./tests/unittests/unittest-h2o-cl-dimer.cpp:        double energy_grad = my_system.TwoBodyEnergy(true);
./tests/unittests/unittest-h2o-cl-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(two_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-cl-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(two_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-cl-dimer.cpp:        double energy_nograd = my_system.ThreeBodyEnergy(false);
./tests/unittests/unittest-h2o-cl-dimer.cpp:        double energy_grad = my_system.ThreeBodyEnergy(true);
./tests/unittests/unittest-h2o-cl-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(three_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-cl-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(three_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-cl-dimer.cpp:        double energy_nograd = my_system.Dispersion(false);
./tests/unittests/unittest-h2o-cl-dimer.cpp:        double energy_grad = my_system.Dispersion(true);
./tests/unittests/unittest-h2o-cl-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-cl-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-cl-dimer.cpp:        double energy_nograd = my_system.Electrostatics(false);
./tests/unittests/unittest-h2o-cl-dimer.cpp:        double energy_grad = my_system.Electrostatics(true);
./tests/unittests/unittest-h2o-cl-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(electrostatic_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-cl-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(electrostatic_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-cl-dimer.cpp:        double energy_nograd = my_system.Energy(false);
./tests/unittests/unittest-h2o-cl-dimer.cpp:        double energy_grad = my_system.Energy(true);
./tests/unittests/unittest-h2o-cl-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(total_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-cl-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(total_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-cl-dimer.cpp:        double energy_nograd = my_system.Buckingham(false);
./tests/unittests/unittest-h2o-cl-dimer.cpp:        double energy_grad = my_system.Buckingham(true);
./tests/unittests/unittest-h2o-cl-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(buckingham_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-cl-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(buckingham_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-cl-dimer.cpp:        double energy_nograd = my_system.Energy(false);
./tests/unittests/unittest-h2o-cl-dimer.cpp:        double energy_grad = my_system.Energy(true);
./tests/unittests/unittest-h2o-cl-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(total_energy_ttm).margin(TOL)); }
./tests/unittests/unittest-h2o-cl-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(total_energy_ttm).margin(TOL)); }
./tests/unittests/unittest-h2o-cs-dimer.cpp:TEST_CASE("Test water -- cesium energy terms") {
./tests/unittests/unittest-h2o-cs-dimer.cpp:        double energy_nograd = my_system.OneBodyEnergy(false);
./tests/unittests/unittest-h2o-cs-dimer.cpp:        double energy_grad = my_system.OneBodyEnergy(true);
./tests/unittests/unittest-h2o-cs-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(one_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-cs-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(one_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-cs-dimer.cpp:        double energy_nograd = my_system.TwoBodyEnergy(false);
./tests/unittests/unittest-h2o-cs-dimer.cpp:        double energy_grad = my_system.TwoBodyEnergy(true);
./tests/unittests/unittest-h2o-cs-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(two_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-cs-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(two_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-cs-dimer.cpp:        double energy_nograd = my_system.ThreeBodyEnergy(false);
./tests/unittests/unittest-h2o-cs-dimer.cpp:        double energy_grad = my_system.ThreeBodyEnergy(true);
./tests/unittests/unittest-h2o-cs-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(three_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-cs-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(three_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-cs-dimer.cpp:        double energy_nograd = my_system.Dispersion(false);
./tests/unittests/unittest-h2o-cs-dimer.cpp:        double energy_grad = my_system.Dispersion(true);
./tests/unittests/unittest-h2o-cs-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-cs-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-cs-dimer.cpp:        double energy_nograd = my_system.Electrostatics(false);
./tests/unittests/unittest-h2o-cs-dimer.cpp:        double energy_grad = my_system.Electrostatics(true);
./tests/unittests/unittest-h2o-cs-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(electrostatic_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-cs-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(electrostatic_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-cs-dimer.cpp:        double energy_nograd = my_system.Energy(false);
./tests/unittests/unittest-h2o-cs-dimer.cpp:        double energy_grad = my_system.Energy(true);
./tests/unittests/unittest-h2o-cs-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(total_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-cs-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(total_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-cs-dimer.cpp:        double energy_nograd = my_system.Buckingham(false);
./tests/unittests/unittest-h2o-cs-dimer.cpp:        double energy_grad = my_system.Buckingham(true);
./tests/unittests/unittest-h2o-cs-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(buckingham_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-cs-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(buckingham_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-cs-dimer.cpp:        double energy_nograd = my_system.Energy(false);
./tests/unittests/unittest-h2o-cs-dimer.cpp:        double energy_grad = my_system.Energy(true);
./tests/unittests/unittest-h2o-cs-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(total_energy_ttm).margin(TOL)); }
./tests/unittests/unittest-h2o-cs-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(total_energy_ttm).margin(TOL)); }
./tests/unittests/unittest-h2o-cs-dimer.cpp:        double energy_grad = my_system.OneBodyEnergy(true);
./tests/unittests/unittest-h2o-cs-dimer.cpp:        double energy_grad = my_system.TwoBodyEnergy(true);
./tests/unittests/unittest-h2o-cs-dimer.cpp:        double energy_grad = my_system.Dispersion(true);
./tests/unittests/unittest-h2o-cs-dimer.cpp:        double energy_grad = my_system.Buckingham(true);
./tests/unittests/unittest-h2o-cs-dimer.cpp:        double energy_grad = my_system.Electrostatics(true);
./tests/unittests/unittest-h2o-f-dimer.cpp:TEST_CASE("Test water -- fluoride energy terms") {
./tests/unittests/unittest-h2o-f-dimer.cpp:        double energy_nograd = my_system.OneBodyEnergy(false);
./tests/unittests/unittest-h2o-f-dimer.cpp:        double energy_grad = my_system.OneBodyEnergy(true);
./tests/unittests/unittest-h2o-f-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(one_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-f-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(one_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-f-dimer.cpp:        double energy_nograd = my_system.TwoBodyEnergy(false);
./tests/unittests/unittest-h2o-f-dimer.cpp:        double energy_grad = my_system.TwoBodyEnergy(true);
./tests/unittests/unittest-h2o-f-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(two_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-f-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(two_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-f-dimer.cpp:        double energy_nograd = my_system.ThreeBodyEnergy(false);
./tests/unittests/unittest-h2o-f-dimer.cpp:        double energy_grad = my_system.ThreeBodyEnergy(true);
./tests/unittests/unittest-h2o-f-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(three_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-f-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(three_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-f-dimer.cpp:        double energy_nograd = my_system.Dispersion(false);
./tests/unittests/unittest-h2o-f-dimer.cpp:        double energy_grad = my_system.Dispersion(true);
./tests/unittests/unittest-h2o-f-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-f-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-f-dimer.cpp:        double energy_nograd = my_system.Electrostatics(false);
./tests/unittests/unittest-h2o-f-dimer.cpp:        double energy_grad = my_system.Electrostatics(true);
./tests/unittests/unittest-h2o-f-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(electrostatic_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-f-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(electrostatic_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-f-dimer.cpp:        double energy_nograd = my_system.Energy(false);
./tests/unittests/unittest-h2o-f-dimer.cpp:        double energy_grad = my_system.Energy(true);
./tests/unittests/unittest-h2o-f-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(total_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-f-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(total_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-f-dimer.cpp:        double energy_nograd = my_system.Buckingham(false);
./tests/unittests/unittest-h2o-f-dimer.cpp:        double energy_grad = my_system.Buckingham(true);
./tests/unittests/unittest-h2o-f-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(buckingham_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-f-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(buckingham_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-f-dimer.cpp:        double energy_nograd = my_system.Energy(false);
./tests/unittests/unittest-h2o-f-dimer.cpp:        double energy_grad = my_system.Energy(true);
./tests/unittests/unittest-h2o-f-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(total_energy_ttm).margin(TOL)); }
./tests/unittests/unittest-h2o-f-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(total_energy_ttm).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-cs-trimer.cpp:TEST_CASE("Test water -- cesium trimer energy terms") {
./tests/unittests/unittest-h2o-h2o-cs-trimer.cpp:        double energy_nograd = my_system.OneBodyEnergy(false);
./tests/unittests/unittest-h2o-h2o-cs-trimer.cpp:        double energy_grad = my_system.OneBodyEnergy(true);
./tests/unittests/unittest-h2o-h2o-cs-trimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(one_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-cs-trimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(one_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-cs-trimer.cpp:        double energy_nograd = my_system.TwoBodyEnergy(false);
./tests/unittests/unittest-h2o-h2o-cs-trimer.cpp:        double energy_grad = my_system.TwoBodyEnergy(true);
./tests/unittests/unittest-h2o-h2o-cs-trimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(two_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-cs-trimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(two_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-cs-trimer.cpp:        double energy_nograd = my_system.ThreeBodyEnergy(false);
./tests/unittests/unittest-h2o-h2o-cs-trimer.cpp:        double energy_grad = my_system.ThreeBodyEnergy(true);
./tests/unittests/unittest-h2o-h2o-cs-trimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(three_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-cs-trimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(three_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-cs-trimer.cpp:        double energy_nograd = my_system.Dispersion(false);
./tests/unittests/unittest-h2o-h2o-cs-trimer.cpp:        double energy_grad = my_system.Dispersion(true);
./tests/unittests/unittest-h2o-h2o-cs-trimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-cs-trimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-cs-trimer.cpp:        double energy_nograd = my_system.Electrostatics(false);
./tests/unittests/unittest-h2o-h2o-cs-trimer.cpp:        double energy_grad = my_system.Electrostatics(true);
./tests/unittests/unittest-h2o-h2o-cs-trimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(electrostatic_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-cs-trimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(electrostatic_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-cs-trimer.cpp:        double energy_nograd = my_system.Energy(false);
./tests/unittests/unittest-h2o-h2o-cs-trimer.cpp:        double energy_grad = my_system.Energy(true);
./tests/unittests/unittest-h2o-h2o-cs-trimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(total_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-cs-trimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(total_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-cs-trimer.cpp:        double energy_nograd = my_system.Buckingham(false);
./tests/unittests/unittest-h2o-h2o-cs-trimer.cpp:        double energy_grad = my_system.Buckingham(true);
./tests/unittests/unittest-h2o-h2o-cs-trimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(buckingham_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-cs-trimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(buckingham_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-cs-trimer.cpp:        double energy_nograd = my_system.Energy(false);
./tests/unittests/unittest-h2o-h2o-cs-trimer.cpp:        double energy_grad = my_system.Energy(true);
./tests/unittests/unittest-h2o-h2o-cs-trimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(total_energy_ttm).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-cs-trimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(total_energy_ttm).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-cs-trimer.cpp:        double energy_grad = my_system.OneBodyEnergy(true);
./tests/unittests/unittest-h2o-h2o-cs-trimer.cpp:        double energy_grad = my_system.TwoBodyEnergy(true);
./tests/unittests/unittest-h2o-h2o-cs-trimer.cpp:        double energy_grad = my_system.ThreeBodyEnergy(true);
./tests/unittests/unittest-h2o-h2o-cs-trimer.cpp:        double energy_grad = my_system.Dispersion(true);
./tests/unittests/unittest-h2o-h2o-cs-trimer.cpp:        double energy_grad = my_system.Buckingham(true);
./tests/unittests/unittest-h2o-h2o-cs-trimer.cpp:        double energy_grad = my_system.Electrostatics(true);
./tests/unittests/unittest-h2o-h2o-k-trimer.cpp:TEST_CASE("Test water -- potassium trimer energy terms") {
./tests/unittests/unittest-h2o-h2o-k-trimer.cpp:        double energy_nograd = my_system.OneBodyEnergy(false);
./tests/unittests/unittest-h2o-h2o-k-trimer.cpp:        double energy_grad = my_system.OneBodyEnergy(true);
./tests/unittests/unittest-h2o-h2o-k-trimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(one_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-k-trimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(one_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-k-trimer.cpp:        double energy_nograd = my_system.TwoBodyEnergy(false);
./tests/unittests/unittest-h2o-h2o-k-trimer.cpp:        double energy_grad = my_system.TwoBodyEnergy(true);
./tests/unittests/unittest-h2o-h2o-k-trimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(two_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-k-trimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(two_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-k-trimer.cpp:        double energy_nograd = my_system.ThreeBodyEnergy(false);
./tests/unittests/unittest-h2o-h2o-k-trimer.cpp:        double energy_grad = my_system.ThreeBodyEnergy(true);
./tests/unittests/unittest-h2o-h2o-k-trimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(three_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-k-trimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(three_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-k-trimer.cpp:        double energy_nograd = my_system.Dispersion(false);
./tests/unittests/unittest-h2o-h2o-k-trimer.cpp:        double energy_grad = my_system.Dispersion(true);
./tests/unittests/unittest-h2o-h2o-k-trimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-k-trimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-k-trimer.cpp:        double energy_nograd = my_system.Electrostatics(false);
./tests/unittests/unittest-h2o-h2o-k-trimer.cpp:        double energy_grad = my_system.Electrostatics(true);
./tests/unittests/unittest-h2o-h2o-k-trimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(electrostatic_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-k-trimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(electrostatic_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-k-trimer.cpp:        double energy_nograd = my_system.Energy(false);
./tests/unittests/unittest-h2o-h2o-k-trimer.cpp:        double energy_grad = my_system.Energy(true);
./tests/unittests/unittest-h2o-h2o-k-trimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(total_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-k-trimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(total_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-k-trimer.cpp:        double energy_nograd = my_system.Buckingham(false);
./tests/unittests/unittest-h2o-h2o-k-trimer.cpp:        double energy_grad = my_system.Buckingham(true);
./tests/unittests/unittest-h2o-h2o-k-trimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(buckingham_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-k-trimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(buckingham_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-k-trimer.cpp:        double energy_nograd = my_system.Energy(false);
./tests/unittests/unittest-h2o-h2o-k-trimer.cpp:        double energy_grad = my_system.Energy(true);
./tests/unittests/unittest-h2o-h2o-k-trimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(total_energy_ttm).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-k-trimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(total_energy_ttm).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-li-trimer.cpp:TEST_CASE("Test water -- lithium trimer energy terms") {
./tests/unittests/unittest-h2o-h2o-li-trimer.cpp:        double energy_nograd = my_system.OneBodyEnergy(false);
./tests/unittests/unittest-h2o-h2o-li-trimer.cpp:        double energy_grad = my_system.OneBodyEnergy(true);
./tests/unittests/unittest-h2o-h2o-li-trimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(one_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-li-trimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(one_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-li-trimer.cpp:        double energy_nograd = my_system.TwoBodyEnergy(false);
./tests/unittests/unittest-h2o-h2o-li-trimer.cpp:        double energy_grad = my_system.TwoBodyEnergy(true);
./tests/unittests/unittest-h2o-h2o-li-trimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(two_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-li-trimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(two_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-li-trimer.cpp:        double energy_nograd = my_system.ThreeBodyEnergy(false);
./tests/unittests/unittest-h2o-h2o-li-trimer.cpp:        double energy_grad = my_system.ThreeBodyEnergy(true);
./tests/unittests/unittest-h2o-h2o-li-trimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(three_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-li-trimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(three_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-li-trimer.cpp:        double energy_nograd = my_system.Dispersion(false);
./tests/unittests/unittest-h2o-h2o-li-trimer.cpp:        double energy_grad = my_system.Dispersion(true);
./tests/unittests/unittest-h2o-h2o-li-trimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-li-trimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-li-trimer.cpp:        double energy_nograd = my_system.Electrostatics(false);
./tests/unittests/unittest-h2o-h2o-li-trimer.cpp:        double energy_grad = my_system.Electrostatics(true);
./tests/unittests/unittest-h2o-h2o-li-trimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(electrostatic_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-li-trimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(electrostatic_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-li-trimer.cpp:        double energy_nograd = my_system.Energy(false);
./tests/unittests/unittest-h2o-h2o-li-trimer.cpp:        double energy_grad = my_system.Energy(true);
./tests/unittests/unittest-h2o-h2o-li-trimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(total_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-li-trimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(total_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-li-trimer.cpp:        double energy_nograd = my_system.Buckingham(false);
./tests/unittests/unittest-h2o-h2o-li-trimer.cpp:        double energy_grad = my_system.Buckingham(true);
./tests/unittests/unittest-h2o-h2o-li-trimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(buckingham_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-li-trimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(buckingham_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-li-trimer.cpp:        double energy_nograd = my_system.Energy(false);
./tests/unittests/unittest-h2o-h2o-li-trimer.cpp:        double energy_grad = my_system.Energy(true);
./tests/unittests/unittest-h2o-h2o-li-trimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(total_energy_ttm).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-li-trimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(total_energy_ttm).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-na-trimer.cpp:TEST_CASE("Test water -- sodium trimer energy terms") {
./tests/unittests/unittest-h2o-h2o-na-trimer.cpp:        double energy_nograd = my_system.OneBodyEnergy(false);
./tests/unittests/unittest-h2o-h2o-na-trimer.cpp:        double energy_grad = my_system.OneBodyEnergy(true);
./tests/unittests/unittest-h2o-h2o-na-trimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(one_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-na-trimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(one_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-na-trimer.cpp:        double energy_nograd = my_system.TwoBodyEnergy(false);
./tests/unittests/unittest-h2o-h2o-na-trimer.cpp:        double energy_grad = my_system.TwoBodyEnergy(true);
./tests/unittests/unittest-h2o-h2o-na-trimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(two_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-na-trimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(two_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-na-trimer.cpp:        double energy_nograd = my_system.ThreeBodyEnergy(false);
./tests/unittests/unittest-h2o-h2o-na-trimer.cpp:        double energy_grad = my_system.ThreeBodyEnergy(true);
./tests/unittests/unittest-h2o-h2o-na-trimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(three_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-na-trimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(three_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-na-trimer.cpp:        double energy_nograd = my_system.Dispersion(false);
./tests/unittests/unittest-h2o-h2o-na-trimer.cpp:        double energy_grad = my_system.Dispersion(true);
./tests/unittests/unittest-h2o-h2o-na-trimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-na-trimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-na-trimer.cpp:        double energy_nograd = my_system.Electrostatics(false);
./tests/unittests/unittest-h2o-h2o-na-trimer.cpp:        double energy_grad = my_system.Electrostatics(true);
./tests/unittests/unittest-h2o-h2o-na-trimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(electrostatic_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-na-trimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(electrostatic_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-na-trimer.cpp:        double energy_nograd = my_system.Energy(false);
./tests/unittests/unittest-h2o-h2o-na-trimer.cpp:        double energy_grad = my_system.Energy(true);
./tests/unittests/unittest-h2o-h2o-na-trimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(total_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-na-trimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(total_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-na-trimer.cpp:        double energy_nograd = my_system.Buckingham(false);
./tests/unittests/unittest-h2o-h2o-na-trimer.cpp:        double energy_grad = my_system.Buckingham(true);
./tests/unittests/unittest-h2o-h2o-na-trimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(buckingham_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-na-trimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(buckingham_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-na-trimer.cpp:        double energy_nograd = my_system.Energy(false);
./tests/unittests/unittest-h2o-h2o-na-trimer.cpp:        double energy_grad = my_system.Energy(true);
./tests/unittests/unittest-h2o-h2o-na-trimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(total_energy_ttm).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-na-trimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(total_energy_ttm).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-na-trimer.cpp:        double energy_grad = my_system.OneBodyEnergy(true);
./tests/unittests/unittest-h2o-h2o-na-trimer.cpp:        double energy_grad = my_system.TwoBodyEnergy(true);
./tests/unittests/unittest-h2o-h2o-na-trimer.cpp:        double energy_grad = my_system.ThreeBodyEnergy(true);
./tests/unittests/unittest-h2o-h2o-na-trimer.cpp:        double energy_grad = my_system.Dispersion(true);
./tests/unittests/unittest-h2o-h2o-na-trimer.cpp:        double energy_grad = my_system.Buckingham(true);
./tests/unittests/unittest-h2o-h2o-na-trimer.cpp:        double energy_grad = my_system.Electrostatics(true);
./tests/unittests/unittest-h2o-h2o-rb-trimer.cpp:TEST_CASE("Test water -- rubidium trimer energy terms") {
./tests/unittests/unittest-h2o-h2o-rb-trimer.cpp:        double energy_nograd = my_system.OneBodyEnergy(false);
./tests/unittests/unittest-h2o-h2o-rb-trimer.cpp:        double energy_grad = my_system.OneBodyEnergy(true);
./tests/unittests/unittest-h2o-h2o-rb-trimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(one_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-rb-trimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(one_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-rb-trimer.cpp:        double energy_nograd = my_system.TwoBodyEnergy(false);
./tests/unittests/unittest-h2o-h2o-rb-trimer.cpp:        double energy_grad = my_system.TwoBodyEnergy(true);
./tests/unittests/unittest-h2o-h2o-rb-trimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(two_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-rb-trimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(two_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-rb-trimer.cpp:        double energy_nograd = my_system.ThreeBodyEnergy(false);
./tests/unittests/unittest-h2o-h2o-rb-trimer.cpp:        double energy_grad = my_system.ThreeBodyEnergy(true);
./tests/unittests/unittest-h2o-h2o-rb-trimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(three_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-rb-trimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(three_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-rb-trimer.cpp:        double energy_nograd = my_system.Dispersion(false);
./tests/unittests/unittest-h2o-h2o-rb-trimer.cpp:        double energy_grad = my_system.Dispersion(true);
./tests/unittests/unittest-h2o-h2o-rb-trimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-rb-trimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-rb-trimer.cpp:        double energy_nograd = my_system.Electrostatics(false);
./tests/unittests/unittest-h2o-h2o-rb-trimer.cpp:        double energy_grad = my_system.Electrostatics(true);
./tests/unittests/unittest-h2o-h2o-rb-trimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(electrostatic_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-rb-trimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(electrostatic_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-rb-trimer.cpp:        double energy_nograd = my_system.Energy(false);
./tests/unittests/unittest-h2o-h2o-rb-trimer.cpp:        double energy_grad = my_system.Energy(true);
./tests/unittests/unittest-h2o-h2o-rb-trimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(total_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-rb-trimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(total_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-rb-trimer.cpp:        double energy_nograd = my_system.Buckingham(false);
./tests/unittests/unittest-h2o-h2o-rb-trimer.cpp:        double energy_grad = my_system.Buckingham(true);
./tests/unittests/unittest-h2o-h2o-rb-trimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(buckingham_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-rb-trimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(buckingham_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-rb-trimer.cpp:        double energy_nograd = my_system.Energy(false);
./tests/unittests/unittest-h2o-h2o-rb-trimer.cpp:        double energy_grad = my_system.Energy(true);
./tests/unittests/unittest-h2o-h2o-rb-trimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(total_energy_ttm).margin(TOL)); }
./tests/unittests/unittest-h2o-h2o-rb-trimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(total_energy_ttm).margin(TOL)); }
./tests/unittests/unittest-h2o-i-dimer.cpp:TEST_CASE("Test water -- iodide energy terms") {
./tests/unittests/unittest-h2o-i-dimer.cpp:        double energy_nograd = my_system.OneBodyEnergy(false);
./tests/unittests/unittest-h2o-i-dimer.cpp:        double energy_grad = my_system.OneBodyEnergy(true);
./tests/unittests/unittest-h2o-i-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(one_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-i-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(one_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-i-dimer.cpp:        double energy_nograd = my_system.TwoBodyEnergy(false);
./tests/unittests/unittest-h2o-i-dimer.cpp:        double energy_grad = my_system.TwoBodyEnergy(true);
./tests/unittests/unittest-h2o-i-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(two_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-i-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(two_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-i-dimer.cpp:        double energy_nograd = my_system.ThreeBodyEnergy(false);
./tests/unittests/unittest-h2o-i-dimer.cpp:        double energy_grad = my_system.ThreeBodyEnergy(true);
./tests/unittests/unittest-h2o-i-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(three_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-i-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(three_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-i-dimer.cpp:        double energy_nograd = my_system.Dispersion(false);
./tests/unittests/unittest-h2o-i-dimer.cpp:        double energy_grad = my_system.Dispersion(true);
./tests/unittests/unittest-h2o-i-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-i-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-i-dimer.cpp:        double energy_nograd = my_system.Electrostatics(false);
./tests/unittests/unittest-h2o-i-dimer.cpp:        double energy_grad = my_system.Electrostatics(true);
./tests/unittests/unittest-h2o-i-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(electrostatic_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-i-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(electrostatic_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-i-dimer.cpp:        double energy_nograd = my_system.Energy(false);
./tests/unittests/unittest-h2o-i-dimer.cpp:        double energy_grad = my_system.Energy(true);
./tests/unittests/unittest-h2o-i-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(total_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-i-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(total_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-i-dimer.cpp:        double energy_nograd = my_system.Buckingham(false);
./tests/unittests/unittest-h2o-i-dimer.cpp:        double energy_grad = my_system.Buckingham(true);
./tests/unittests/unittest-h2o-i-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(buckingham_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-i-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(buckingham_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-i-dimer.cpp:        double energy_nograd = my_system.Energy(false);
./tests/unittests/unittest-h2o-i-dimer.cpp:        double energy_grad = my_system.Energy(true);
./tests/unittests/unittest-h2o-i-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(total_energy_ttm).margin(TOL)); }
./tests/unittests/unittest-h2o-i-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(total_energy_ttm).margin(TOL)); }
./tests/unittests/unittest-h2o-k-dimer.cpp:TEST_CASE("Test water -- potassium energy terms") {
./tests/unittests/unittest-h2o-k-dimer.cpp:        double energy_nograd = my_system.OneBodyEnergy(false);
./tests/unittests/unittest-h2o-k-dimer.cpp:        double energy_grad = my_system.OneBodyEnergy(true);
./tests/unittests/unittest-h2o-k-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(one_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-k-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(one_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-k-dimer.cpp:        double energy_nograd = my_system.TwoBodyEnergy(false);
./tests/unittests/unittest-h2o-k-dimer.cpp:        double energy_grad = my_system.TwoBodyEnergy(true);
./tests/unittests/unittest-h2o-k-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(two_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-k-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(two_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-k-dimer.cpp:        double energy_nograd = my_system.ThreeBodyEnergy(false);
./tests/unittests/unittest-h2o-k-dimer.cpp:        double energy_grad = my_system.ThreeBodyEnergy(true);
./tests/unittests/unittest-h2o-k-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(three_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-k-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(three_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-k-dimer.cpp:        double energy_nograd = my_system.Dispersion(false);
./tests/unittests/unittest-h2o-k-dimer.cpp:        double energy_grad = my_system.Dispersion(true);
./tests/unittests/unittest-h2o-k-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-k-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-k-dimer.cpp:        double energy_nograd = my_system.Electrostatics(false);
./tests/unittests/unittest-h2o-k-dimer.cpp:        double energy_grad = my_system.Electrostatics(true);
./tests/unittests/unittest-h2o-k-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(electrostatic_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-k-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(electrostatic_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-k-dimer.cpp:        double energy_nograd = my_system.Energy(false);
./tests/unittests/unittest-h2o-k-dimer.cpp:        double energy_grad = my_system.Energy(true);
./tests/unittests/unittest-h2o-k-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(total_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-k-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(total_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-k-dimer.cpp:        double energy_nograd = my_system.Buckingham(false);
./tests/unittests/unittest-h2o-k-dimer.cpp:        double energy_grad = my_system.Buckingham(true);
./tests/unittests/unittest-h2o-k-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(buckingham_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-k-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(buckingham_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-k-dimer.cpp:        double energy_nograd = my_system.Energy(false);
./tests/unittests/unittest-h2o-k-dimer.cpp:        double energy_grad = my_system.Energy(true);
./tests/unittests/unittest-h2o-k-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(total_energy_ttm).margin(TOL)); }
./tests/unittests/unittest-h2o-k-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(total_energy_ttm).margin(TOL)); }
./tests/unittests/unittest-h2o-li-dimer.cpp:TEST_CASE("Test water -- lithium energy terms") {
./tests/unittests/unittest-h2o-li-dimer.cpp:        double energy_nograd = my_system.OneBodyEnergy(false);
./tests/unittests/unittest-h2o-li-dimer.cpp:        double energy_grad = my_system.OneBodyEnergy(true);
./tests/unittests/unittest-h2o-li-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(one_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-li-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(one_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-li-dimer.cpp:        double energy_nograd = my_system.TwoBodyEnergy(false);
./tests/unittests/unittest-h2o-li-dimer.cpp:        double energy_grad = my_system.TwoBodyEnergy(true);
./tests/unittests/unittest-h2o-li-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(two_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-li-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(two_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-li-dimer.cpp:        double energy_nograd = my_system.ThreeBodyEnergy(false);
./tests/unittests/unittest-h2o-li-dimer.cpp:        double energy_grad = my_system.ThreeBodyEnergy(true);
./tests/unittests/unittest-h2o-li-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(three_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-li-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(three_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-li-dimer.cpp:        double energy_nograd = my_system.Dispersion(false);
./tests/unittests/unittest-h2o-li-dimer.cpp:        double energy_grad = my_system.Dispersion(true);
./tests/unittests/unittest-h2o-li-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-li-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-li-dimer.cpp:        double energy_nograd = my_system.Electrostatics(false);
./tests/unittests/unittest-h2o-li-dimer.cpp:        double energy_grad = my_system.Electrostatics(true);
./tests/unittests/unittest-h2o-li-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(electrostatic_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-li-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(electrostatic_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-li-dimer.cpp:        double energy_nograd = my_system.Energy(false);
./tests/unittests/unittest-h2o-li-dimer.cpp:        double energy_grad = my_system.Energy(true);
./tests/unittests/unittest-h2o-li-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(total_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-li-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(total_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-li-dimer.cpp:        double energy_nograd = my_system.Buckingham(false);
./tests/unittests/unittest-h2o-li-dimer.cpp:        double energy_grad = my_system.Buckingham(true);
./tests/unittests/unittest-h2o-li-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(buckingham_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-li-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(buckingham_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-li-dimer.cpp:        double energy_nograd = my_system.Energy(false);
./tests/unittests/unittest-h2o-li-dimer.cpp:        double energy_grad = my_system.Energy(true);
./tests/unittests/unittest-h2o-li-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(total_energy_ttm).margin(TOL)); }
./tests/unittests/unittest-h2o-li-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(total_energy_ttm).margin(TOL)); }
./tests/unittests/unittest-h2o-na-dimer.cpp:TEST_CASE("Test water -- sodium energy terms") {
./tests/unittests/unittest-h2o-na-dimer.cpp:        double energy_nograd = my_system.OneBodyEnergy(false);
./tests/unittests/unittest-h2o-na-dimer.cpp:        double energy_grad = my_system.OneBodyEnergy(true);
./tests/unittests/unittest-h2o-na-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(one_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-na-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(one_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-na-dimer.cpp:        double energy_nograd = my_system.TwoBodyEnergy(false);
./tests/unittests/unittest-h2o-na-dimer.cpp:        double energy_grad = my_system.TwoBodyEnergy(true);
./tests/unittests/unittest-h2o-na-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(two_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-na-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(two_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-na-dimer.cpp:        double energy_nograd = my_system.ThreeBodyEnergy(false);
./tests/unittests/unittest-h2o-na-dimer.cpp:        double energy_grad = my_system.ThreeBodyEnergy(true);
./tests/unittests/unittest-h2o-na-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(three_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-na-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(three_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-na-dimer.cpp:        double energy_nograd = my_system.Dispersion(false);
./tests/unittests/unittest-h2o-na-dimer.cpp:        double energy_grad = my_system.Dispersion(true);
./tests/unittests/unittest-h2o-na-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-na-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-na-dimer.cpp:        double energy_nograd = my_system.Electrostatics(false);
./tests/unittests/unittest-h2o-na-dimer.cpp:        double energy_grad = my_system.Electrostatics(true);
./tests/unittests/unittest-h2o-na-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(electrostatic_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-na-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(electrostatic_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-na-dimer.cpp:        double energy_nograd = my_system.Energy(false);
./tests/unittests/unittest-h2o-na-dimer.cpp:        double energy_grad = my_system.Energy(true);
./tests/unittests/unittest-h2o-na-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(total_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-na-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(total_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-na-dimer.cpp:        double energy_nograd = my_system.Buckingham(false);
./tests/unittests/unittest-h2o-na-dimer.cpp:        double energy_grad = my_system.Buckingham(true);
./tests/unittests/unittest-h2o-na-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(buckingham_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-na-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(buckingham_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-na-dimer.cpp:        double energy_nograd = my_system.Energy(false);
./tests/unittests/unittest-h2o-na-dimer.cpp:        double energy_grad = my_system.Energy(true);
./tests/unittests/unittest-h2o-na-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(total_energy_ttm).margin(TOL)); }
./tests/unittests/unittest-h2o-na-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(total_energy_ttm).margin(TOL)); }
./tests/unittests/unittest-h2o-na-dimer.cpp:        double energy_grad = my_system.OneBodyEnergy(true);
./tests/unittests/unittest-h2o-na-dimer.cpp:        double energy_grad = my_system.TwoBodyEnergy(true);
./tests/unittests/unittest-h2o-na-dimer.cpp:        double energy_grad = my_system.Dispersion(true);
./tests/unittests/unittest-h2o-na-dimer.cpp:        double energy_grad = my_system.Buckingham(true);
./tests/unittests/unittest-h2o-na-dimer.cpp:        double energy_grad = my_system.Electrostatics(true);
./tests/unittests/unittest-h2o-rb-dimer.cpp:TEST_CASE("Test water -- rubidium energy terms") {
./tests/unittests/unittest-h2o-rb-dimer.cpp:        double energy_nograd = my_system.OneBodyEnergy(false);
./tests/unittests/unittest-h2o-rb-dimer.cpp:        double energy_grad = my_system.OneBodyEnergy(true);
./tests/unittests/unittest-h2o-rb-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(one_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-rb-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(one_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-rb-dimer.cpp:        double energy_nograd = my_system.TwoBodyEnergy(false);
./tests/unittests/unittest-h2o-rb-dimer.cpp:        double energy_grad = my_system.TwoBodyEnergy(true);
./tests/unittests/unittest-h2o-rb-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(two_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-rb-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(two_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-rb-dimer.cpp:        double energy_nograd = my_system.ThreeBodyEnergy(false);
./tests/unittests/unittest-h2o-rb-dimer.cpp:        double energy_grad = my_system.ThreeBodyEnergy(true);
./tests/unittests/unittest-h2o-rb-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(three_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-rb-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(three_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-rb-dimer.cpp:        double energy_nograd = my_system.Dispersion(false);
./tests/unittests/unittest-h2o-rb-dimer.cpp:        double energy_grad = my_system.Dispersion(true);
./tests/unittests/unittest-h2o-rb-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-rb-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-rb-dimer.cpp:        double energy_nograd = my_system.Electrostatics(false);
./tests/unittests/unittest-h2o-rb-dimer.cpp:        double energy_grad = my_system.Electrostatics(true);
./tests/unittests/unittest-h2o-rb-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(electrostatic_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-rb-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(electrostatic_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-rb-dimer.cpp:        double energy_nograd = my_system.Energy(false);
./tests/unittests/unittest-h2o-rb-dimer.cpp:        double energy_grad = my_system.Energy(true);
./tests/unittests/unittest-h2o-rb-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(total_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-rb-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(total_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-rb-dimer.cpp:        double energy_nograd = my_system.Buckingham(false);
./tests/unittests/unittest-h2o-rb-dimer.cpp:        double energy_grad = my_system.Buckingham(true);
./tests/unittests/unittest-h2o-rb-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(buckingham_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-rb-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(buckingham_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-rb-dimer.cpp:        double energy_nograd = my_system.Energy(false);
./tests/unittests/unittest-h2o-rb-dimer.cpp:        double energy_grad = my_system.Energy(true);
./tests/unittests/unittest-h2o-rb-dimer.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(total_energy_ttm).margin(TOL)); }
./tests/unittests/unittest-h2o-rb-dimer.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(total_energy_ttm).margin(TOL)); }
./tests/unittests/unittest-h2o-virial.cpp:        double energy_grad = my_system.OneBodyEnergy(true);
./tests/unittests/unittest-h2o-virial.cpp:        double energy_grad = my_system.OneBodyEnergy(true);
./tests/unittests/unittest-h2o-virial.cpp:        double energy_grad = my_system.TwoBodyEnergy(true);
./tests/unittests/unittest-h2o-virial.cpp:        double energy_grad = my_system.Dispersion(true);
./tests/unittests/unittest-h2o-virial.cpp:        double energy_grad = my_system.Electrostatics(true);
./tests/unittests/unittest-h2o-virial.cpp:        double energy_grad = my_system.Dispersion(true);
./tests/unittests/unittest-h2o-virial.cpp:        double energy_grad = my_system.Electrostatics(true);
./tests/unittests/unittest-h2o-virial.cpp:        double energy_grad = my_system.OneBodyEnergy(true);
./tests/unittests/unittest-h2o-virial.cpp:        double energy_grad = my_system.TwoBodyEnergy(true);
./tests/unittests/unittest-h2o-virial.cpp:        double energy_grad = my_system.ThreeBodyEnergy(true);
./tests/unittests/unittest-h2o-virial.cpp:        double energy_grad = my_system.Dispersion(true);
./tests/unittests/unittest-h2o-virial.cpp:        double energy_grad = my_system.Electrostatics(true);
./tests/unittests/unittest-h2o-virial.cpp:        double energy_grad = my_system.Dispersion(true);
./tests/unittests/unittest-h2o-virial.cpp:        double energy_grad = my_system.Electrostatics(true);
./tests/unittests/unittest-h2o-virial.cpp:        double energy_grad = my_system.OneBodyEnergy(true);
./tests/unittests/unittest-h2o-virial.cpp:        double energy_grad = my_system.TwoBodyEnergy(true);
./tests/unittests/unittest-h2o-virial.cpp:        double energy_grad = my_system.ThreeBodyEnergy(true);
./tests/unittests/unittest-h2o-virial.cpp:        double energy_grad = my_system.Dispersion(true);
./tests/unittests/unittest-h2o-virial.cpp:        double energy_grad = my_system.Electrostatics(true);
./tests/unittests/unittest-h2o-virial.cpp:        double energy_grad = my_system.Dispersion(true);
./tests/unittests/unittest-h2o-virial.cpp:        double energy_grad = my_system.Electrostatics(true);
./tests/unittests/unittest-h2o-virial.cpp:        double energy_grad1 = my_system.Electrostatics(true);
./tests/unittests/unittest-h2o-virial.cpp:        double energy_grad2 = my_system.Electrostatics(true);
./tests/unittests/unittest-h2o-virial.cpp:        double energy_grad3 = my_system.Electrostatics(true);
./tests/unittests/unittest-h2o-virial.cpp:        double energy_grad4 = my_system.Electrostatics(true);
./tests/unittests/unittest-h2o-virial.cpp:        double energy_grad5 = my_system.Electrostatics(true);
./tests/unittests/unittest-h2o-virial.cpp:        double energy_grad1 = my_system.Dispersion(true);
./tests/unittests/unittest-h2o-virial.cpp:        double energy_grad2 = my_system.Dispersion(true);
./tests/unittests/unittest-h2o-virial.cpp:        double energy_grad3 = my_system.Dispersion(true);
./tests/unittests/unittest-h2o-virial.cpp:        double energy_grad4 = my_system.Dispersion(true);
./tests/unittests/unittest-h2o-virial.cpp:        double energy_grad5 = my_system.Dispersion(true);
./tests/unittests/unittest-h2o-virial.cpp://        double energy_nograd = my_system.ThreeBodyEnergy(false);
./tests/unittests/unittest-h2o-virial.cpp://        double energy_grad = my_system.ThreeBodyEnergy(true);
./tests/unittests/unittest-h2o-virial.cpp://        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(three_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-virial.cpp://        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(three_body_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-virial.cpp://        double energy_nograd = my_system.Dispersion(false);
./tests/unittests/unittest-h2o-virial.cpp://        double energy_grad = my_system.Dispersion(true);
./tests/unittests/unittest-h2o-virial.cpp://        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-virial.cpp://        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-virial.cpp://        double energy_nograd = my_system.Electrostatics(false);
./tests/unittests/unittest-h2o-virial.cpp://        double energy_grad = my_system.Electrostatics(true);
./tests/unittests/unittest-h2o-virial.cpp://        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(electrostatic_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-virial.cpp://        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(electrostatic_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-virial.cpp://        double energy_nograd = my_system.Energy(false);
./tests/unittests/unittest-h2o-virial.cpp://        double energy_grad = my_system.Energy(true);
./tests/unittests/unittest-h2o-virial.cpp://        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(total_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-virial.cpp://        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(total_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-virial.cpp://        double energy_nograd = my_system.Buckingham(false);
./tests/unittests/unittest-h2o-virial.cpp://        double energy_grad = my_system.Buckingham(true);
./tests/unittests/unittest-h2o-virial.cpp://        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(buckingham_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-virial.cpp://        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(buckingham_energy).margin(TOL)); }
./tests/unittests/unittest-h2o-virial.cpp://        double energy_nograd = my_system.Energy(false);
./tests/unittests/unittest-h2o-virial.cpp://        double energy_grad = my_system.Energy(true);
./tests/unittests/unittest-h2o-virial.cpp://        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(total_energy_ttm).margin(TOL)); }
./tests/unittests/unittest-h2o-virial.cpp://        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(total_energy_ttm).margin(TOL)); }
./tests/unittests/unittest-h4-dummy.cpp:TEST_CASE("Test monomer H4 energy terms") {
./tests/unittests/unittest-h4-dummy.cpp:    // Indicate we want the classical energy
./tests/unittests/unittest-h4-dummy.cpp:        double energy_nograd = my_system.ClassicPotential(false);
./tests/unittests/unittest-h4-dummy.cpp:        double energy_grad = my_system.ClassicPotential(true);
./tests/unittests/unittest-h4-dummy.cpp:        double energy_nograd_system = my_system.Energy(false);
./tests/unittests/unittest-h4-dummy.cpp:        double energy_grad_system = my_system.Energy(true);
./tests/unittests/unittest-h4-dummy.cpp:            REQUIRE(energy_nograd == Approx(classic_energy).margin(TOL));
./tests/unittests/unittest-h4-dummy.cpp:            REQUIRE(energy_grad == Approx(classic_energy).margin(TOL));
./tests/unittests/unittest-h4-dummy.cpp:            REQUIRE(energy_nograd_system == Approx(classic_energy).margin(TOL));
./tests/unittests/unittest-h4-dummy.cpp:        SECTION("Energy with gradients (Energy)") { REQUIRE(energy_grad_system == Approx(classic_energy).margin(TOL)); }
./tests/unittests/unittest-inversion.cpp:            REQUIRE(inversion.GetEnergy(inversion_phi) == Approx(ff_inversion_harm_energy).margin(TOL));
./tests/unittests/unittest-inversion.cpp:            REQUIRE(inversion.GetEnergy(inversion_phi) == Approx(ff_inversion_none_energy).margin(TOL));
./tests/unittests/unittest-pbc-1b-mbpol-findif.cpp:        double energy_1b_nograd = my_sys.OneBodyEnergy(false);
./tests/unittests/unittest-pbc-1b-mbpol-findif.cpp:        double energy_1b_grad = my_sys.OneBodyEnergy(true);
./tests/unittests/unittest-pbc-1b-mbpol-findif.cpp:        SECTION("Compare energy with and without gradients") {
./tests/unittests/unittest-pbc-1b-mbpol-findif.cpp:            REQUIRE(energy_1b_nograd == Approx(energy_1b_grad).margin(TOL));
./tests/unittests/unittest-pbc-2bpoly-mbpol-findif.cpp:        double energy_nograd = my_sys.TwoBodyEnergy(false);
./tests/unittests/unittest-pbc-2bpoly-mbpol-findif.cpp:        double energy_grad = my_sys.TwoBodyEnergy(true);
./tests/unittests/unittest-pbc-2bpoly-mbpol-findif.cpp:        SECTION("Compare energy with and without gradients") {
./tests/unittests/unittest-pbc-2bpoly-mbpol-findif.cpp:            REQUIRE(energy_nograd == Approx(energy_grad).margin(TOL));
./tests/unittests/unittest-pbc-3bpoly-mbpol-findif.cpp:        double energy_nograd = my_sys.ThreeBodyEnergy(false);
./tests/unittests/unittest-pbc-3bpoly-mbpol-findif.cpp:        double energy_grad = my_sys.ThreeBodyEnergy(true);
./tests/unittests/unittest-pbc-3bpoly-mbpol-findif.cpp:        SECTION("Compare energy with and without gradients") {
./tests/unittests/unittest-pbc-3bpoly-mbpol-findif.cpp:            REQUIRE(energy_nograd == Approx(energy_grad).margin(TOL));
./tests/unittests/unittest-pbc-dispersion-mbpol-findif.cpp:        double energy_nograd = my_sys.Dispersion(false);
./tests/unittests/unittest-pbc-dispersion-mbpol-findif.cpp:        double energy_grad = my_sys.Dispersion(true);
./tests/unittests/unittest-pbc-dispersion-mbpol-findif.cpp:        SECTION("Compare energy with and without gradients") {
./tests/unittests/unittest-pbc-dispersion-mbpol-findif.cpp:            REQUIRE(energy_nograd == Approx(energy_grad).margin(TOL));
./tests/unittests/unittest-pbc-electrostatics-mbpol-findif.cpp:        double energy_nograd = my_sys.Electrostatics(false);
./tests/unittests/unittest-pbc-electrostatics-mbpol-findif.cpp:        double energy_grad = my_sys.Electrostatics(true);
./tests/unittests/unittest-pbc-electrostatics-mbpol-findif.cpp:        SECTION("Compare energy with and without gradients") {
./tests/unittests/unittest-pbc-electrostatics-mbpol-findif.cpp:            REQUIRE(energy_nograd == Approx(energy_grad).margin(TOL));
./tests/unittests/unittest-pme-nopolarization-findif.cpp:    double ref_energy = -0.1744839641;
./tests/unittests/unittest-pme-nopolarization-findif.cpp:    double energy = elec.GetElectrostatics(forces);
./tests/unittests/unittest-pme-nopolarization-findif.cpp:    std::cout << "Energy: " << energy << std::endl;
./tests/unittests/unittest-pme-nopolarization-findif.cpp:    REQUIRE(energy == Approx(ref_energy).margin(TOL));
./tests/unittests/unittest-pme-nopolarization.cpp:    double ref_energy = -1820.686249;
./tests/unittests/unittest-pme-nopolarization.cpp:    double energy3 = elec.GetElectrostatics(forces3);
./tests/unittests/unittest-pme-nopolarization.cpp:    REQUIRE(energy3 == Approx(ref_energy).epsilon(TOL));
./tests/unittests/unittest-pme-nopolarization.cpp:    double energy4 = elec.GetElectrostatics(forces4);
./tests/unittests/unittest-pme-nopolarization.cpp:    REQUIRE(energy4 == Approx(energy3).epsilon(TOL));
./tests/unittests/unittest-pme-nopolarization.cpp:    double energy5 = elec.GetElectrostatics(forces5);
./tests/unittests/unittest-pme-nopolarization.cpp:    REQUIRE(energy5 == Approx(energy4).epsilon(TOL));
./tests/unittests/unittest-pme-nopolarization.cpp:    std::cout << "alpha = 0.25: " << std::setw(16) << std::setprecision(10) << energy3 << std::endl;
./tests/unittests/unittest-pme-nopolarization.cpp:    std::cout << "alpha = 0.35: " << std::setw(16) << std::setprecision(10) << energy4 << std::endl;
./tests/unittests/unittest-pme-nopolarization.cpp:    std::cout << "alpha = 0.45: " << std::setw(16) << std::setprecision(10) << energy5 << std::endl;
./tests/unittests/unittest-pme-withpolarization-findif.cpp:    double ref_energy = -0.1752818171;
./tests/unittests/unittest-pme-withpolarization-findif.cpp:    double energy = elec.GetElectrostatics(forces);
./tests/unittests/unittest-pme-withpolarization-findif.cpp:    std::cout << "Energy: " << std::setw(16) << std::setprecision(10) << energy << std::endl;
./tests/unittests/unittest-pme-withpolarization-findif.cpp:    REQUIRE(energy == Approx(ref_energy).margin(TOL));
./tests/unittests/unittest-pme-withpolarization.cpp:    double ref_energy = -2531.4416733178;
./tests/unittests/unittest-pme-withpolarization.cpp:    double energy3 = elec.GetElectrostatics(forces3);
./tests/unittests/unittest-pme-withpolarization.cpp:    REQUIRE(energy3 == Approx(ref_energy).epsilon(TOL));
./tests/unittests/unittest-pme-withpolarization.cpp:    double energy4 = elec.GetElectrostatics(forces4);
./tests/unittests/unittest-pme-withpolarization.cpp:    REQUIRE(energy4 == Approx(energy3).epsilon(TOL));
./tests/unittests/unittest-pme-withpolarization.cpp:    double energy5 = elec.GetElectrostatics(forces5);
./tests/unittests/unittest-pme-withpolarization.cpp:    REQUIRE(energy5 == Approx(energy4).epsilon(TOL));
./tests/unittests/unittest-pme-withpolarization.cpp:    std::cout << "alpha = 0.25: " << std::setw(16) << std::setprecision(10) << energy3 << std::endl;
./tests/unittests/unittest-pme-withpolarization.cpp:    std::cout << "alpha = 0.35: " << std::setw(16) << std::setprecision(10) << energy4 << std::endl;
./tests/unittests/unittest-pme-withpolarization.cpp:    std::cout << "alpha = 0.45: " << std::setw(16) << std::setprecision(10) << energy5 << std::endl;
./tests/unittests/unittest-system.cpp:TEST_CASE("Test energy from system") {
./tests/unittests/unittest-system.cpp:        double energy_nograd = my_system.OneBodyEnergy(false);
./tests/unittests/unittest-system.cpp:        double energy_grad = my_system.OneBodyEnergy(true);
./tests/unittests/unittest-system.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(one_body_energy).margin(TOL)); }
./tests/unittests/unittest-system.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(one_body_energy).margin(TOL)); }
./tests/unittests/unittest-system.cpp:        double energy_nograd = my_system.TwoBodyEnergy(false);
./tests/unittests/unittest-system.cpp:        double energy_grad = my_system.TwoBodyEnergy(true);
./tests/unittests/unittest-system.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(two_body_energy).margin(TOL)); }
./tests/unittests/unittest-system.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(two_body_energy).margin(TOL)); }
./tests/unittests/unittest-system.cpp:        double energy_nograd = my_system.ThreeBodyEnergy(false);
./tests/unittests/unittest-system.cpp:        double energy_grad = my_system.ThreeBodyEnergy(true);
./tests/unittests/unittest-system.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(three_body_energy).margin(TOL)); }
./tests/unittests/unittest-system.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(three_body_energy).margin(TOL)); }
./tests/unittests/unittest-system.cpp:        double energy_nograd = my_system.Dispersion(false);
./tests/unittests/unittest-system.cpp:        double energy_grad = my_system.Dispersion(true);
./tests/unittests/unittest-system.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-system.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(dispersion_energy).margin(TOL)); }
./tests/unittests/unittest-system.cpp:        double energy_nograd = my_system.Electrostatics(false);
./tests/unittests/unittest-system.cpp:        double energy_grad = my_system.Electrostatics(true);
./tests/unittests/unittest-system.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(electrostatic_energy).margin(TOL)); }
./tests/unittests/unittest-system.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(electrostatic_energy).margin(TOL)); }
./tests/unittests/unittest-system.cpp:        double energy_nograd = my_system.Energy(false);
./tests/unittests/unittest-system.cpp:        double energy_grad = my_system.Energy(true);
./tests/unittests/unittest-system.cpp:        SECTION("Energy without gradients") { REQUIRE(energy_nograd == Approx(total_energy).margin(TOL)); }
./tests/unittests/unittest-system.cpp:        SECTION("Energy with gradients") { REQUIRE(energy_grad == Approx(total_energy).margin(TOL)); }
./tests/unittests/unittest-system.cpp:        double energy_grad = my_system.Energy(true);
./tools/constants.h:// interaction energy of 2 unit charges 1A apart
./tools/testutils.h:    double total_energy;
./tools/testutils.h:    double energy_1b;
./tools/testutils.h:    double energy_2b;
./tools/testutils.h:    double energy_3b;
./tools/testutils.h:    double energy_disp;
./tools/testutils.h:    double energy_buck;
./tools/testutils.h:    double energy_lj;
./tools/testutils.h:    double energy_ff;
./tools/xmin.cpp:        /* Compute energy and gradient at x_k[]+stp*d_k[]: */
./tools/xmin.cpp:        /* Wolfe needs both energy and gradient */
./tools/xmin.cpp:            continue; /* do not compute the energy
./tools/xmin.cpp:        /* Compute energy at x_k[]+alfa_k*d_k[]: */
./tools/xmin.cpp:        i++; /* increment only when energy computed and Armijo test taken */
./tools/xmin.cpp:    static double energy, energy_old, grms, rs_old, rs_new;
./tools/xmin.cpp:    static double *hp = NULL, php, gp, quad_energy_old, quad_energy_new;
./tools/xmin.cpp:    energy_old = -1.0;
./tools/xmin.cpp:    energy_old = energy_old + 1.0;
./tools/xmin.cpp:            energy_old = BIG;
./tools/xmin.cpp:                energy = *enrg;
./tools/xmin.cpp:                fprintf(nabout, " MIN:          It= %4d  nfunc= %5d  E= %15.5f (%9.2e)\n", min_iter, nfunc, energy,
./tools/xmin.cpp:            quad_energy_new = gp + 0.5 * php;
./tools/xmin.cpp:                qtest = (cg_iter + 1) * (ONE - quad_energy_old / quad_energy_new);
./tools/xmin.cpp:            quad_energy_old = quad_energy_new;
./tools/xmin.cpp:                energy = *enrg;
./tools/xmin.cpp:        energy_old = energy;
./tools/xmin.cpp:    energy = *enrg;
./tools/xmin.cpp:                    min_conv == YES ? ":-)" : ":-(", energy, grms);
./tools/xmin.cpp:    static double energy, energy_old, grms, ggnew, ggold, gamma, dgrad;
./tools/xmin.cpp:    energy_old = -1.0;
./tools/xmin.cpp:    energy_old = energy_old + 1.0;
./tools/xmin.cpp:            energy_old = BIG;
./tools/xmin.cpp:                energy = *enrg;
./tools/xmin.cpp:                fprintf(nabout, " MIN:                          It= %4d  E= %10.2f (%7.3f)\n", min_iter, energy, grms);
./tools/xmin.cpp:                energy = *enrg;
./tools/xmin.cpp:        energy_old = energy;
./tools/xmin.cpp:    energy = *enrg;
./tools/xmin.cpp:                    min_conv == YES ? ":-)" : ":-(", energy, grms);
./tools/xmin.cpp:    static double energy, energy_old, grms, ggnew, ggold, gamma, dgrad;
./tools/xmin.cpp:    energy_old = -1.0;
./tools/xmin.cpp:    energy_old = energy_old + 1.0;
./tools/xmin.cpp:            energy_old = BIG;
./tools/xmin.cpp:                    energy = *enrg;
./tools/xmin.cpp:                    fprintf(nabout, " MIN:                          It= %4d  E= %10.2f (%7.3f)\n", min_iter, energy,
./tools/xmin.cpp:                    energy = *enrg;
./tools/xmin.cpp:                    fprintf(nabout, " MIN:                          It= %4d  E= %10.2f (%7.3f)\n", min_iter, energy,
./tools/xmin.cpp:                energy = *enrg;
./tools/xmin.cpp:        energy_old = energy;
./tools/xmin.cpp:    energy = *enrg;
./tools/xmin.cpp:                    min_conv == YES ? ":-)" : ":-(", energy, grms);
./tools/xmin.cpp:REAL_T xmin(REAL_T (*func)(REAL_T *, REAL_T *, INT_T *), INT_T *natm, REAL_T *xyz, REAL_T *grad, REAL_T *energy,
./tools/xmin.cpp://  This package can be used with any program that can calculate the energy
./tools/xmin.cpp://  completed, final energy and the RMS of the gradient, the CPU time spent in
./tools/xmin.cpp:    //  energy      Energy value for structure optimization,
./tools/xmin.cpp:              &(xo->numdiff), xyz, energy, grad, grms, &(xo->iter), &(xo->xmin_time), &(xo->print_level),
./tools/xmin.cpp:                *energy = func(xyz, grad, &xo->iter);
./tools/xmin.cpp:                *energy = func(xyz, grad, &NEG_FOUR);
./tools/xmin.cpp:                *energy = func(xyz, grad, &NEG_TWO);
./tools/xmin.cpp:    return *energy;
./tools/xmin.h:double xmin(double (*func)(double *, double *, int *), int *natm, double *xyz, double *grad, double *energy,
Binary file ./tools/libmbx_la-xmin.o matches
./unittests/Makefile.am:TESTS = unittest-angle unittest-bond unittest-buckingham unittest-bucktools unittest-connectivity unittest-dihedral unittest-dispersion unittest-disptools unittest-electrostatics unittest-energy1b unittest-energy2b unittest-energy3b unittest-energy4b unittest-energyff unittest-ffcalculators unittest-gamma unittest-inversion unittest-lj unittest-ljtools unittest-pme-nopolarization unittest-pme-nopolarization-findif unittest-pme-withpolarization unittest-pme-withpolarization-findif unittest-poly-1b unittest-poly-2b unittest-poly-3b unittest-poly-holder-1b unittest-poly-holder-2b unittest-poly-holder-3b unittest-ps unittest-system unittest-systools unittest-tools unittest-topology
./unittests/Makefile.am:check_PROGRAMS = unittest-angle unittest-bond unittest-buckingham unittest-bucktools unittest-connectivity unittest-dihedral unittest-dispersion unittest-disptools unittest-electrostatics unittest-energy1b unittest-energy2b unittest-energy3b unittest-energy4b unittest-energyff unittest-ffcalculators unittest-gamma unittest-inversion unittest-lj unittest-ljtools unittest-pme-nopolarization unittest-pme-nopolarization-findif unittest-pme-withpolarization unittest-pme-withpolarization-findif unittest-poly-1b unittest-poly-2b unittest-poly-3b unittest-poly-holder-1b unittest-poly-holder-2b unittest-poly-holder-3b unittest-ps unittest-system unittest-systools unittest-tools unittest-topology
./unittests/Makefile.am:unittest_energy1b_SOURCES = unittest-main.cpp unittest-energy1b.cpp
./unittests/Makefile.am:unittest_energy2b_SOURCES = unittest-main.cpp unittest-energy2b.cpp
./unittests/Makefile.am:unittest_energy3b_SOURCES = unittest-main.cpp unittest-energy3b.cpp
./unittests/Makefile.am:unittest_energy4b_SOURCES = unittest-main.cpp unittest-energy4b.cpp
./unittests/Makefile.am:unittest_energyff_SOURCES = unittest-main.cpp unittest-energyff.cpp
./unittests/setup_co2_2_h2o_2.h:    double one_body_energy = 7.8419587769e-01;                                                                        \
./unittests/setup_co2_2_h2o_2.h:    double two_body_energy = 1.0787028559e+01;                                                                        \
./unittests/setup_co2_2_h2o_2.h:    double three_body_energy = 0.0000000000e+00;                                                                      \
./unittests/setup_co2_2_h2o_2.h:    double dispersion_energy = -8.4380632817e+00;                                                                     \
./unittests/setup_co2_2_h2o_2.h:    double electrostatic_energy = -1.7175209596e+01;                                                                  \
./unittests/setup_co2_2_h2o_2.h:    double total_energy = -1.4042048440e+01;                                                                          \
./unittests/setup_h2o_2_ch4_1.h:    testData.total_energy = 5.1295091940e
./unittests/setup_h2o_2_ch4_1.h:    testData.energy_1b = 3.2812094197e
./unittests/setup_h2o_2_ch4_1.h:    testData.energy_2b = 5.6680927871e
./unittests/setup_h2o_2_ch4_1.h:    testData.energy_3b = -8.6542153165e
./unittests/setup_h2o_2_ch4_1.h:    testData.energy_disp = -8.2989453414e
./unittests/setup_h2o_2_ch4_1.h:    testData.energy_buck = 0.0000000000e
./unittests/setup_h2o_2_ch4_1.h:    testData.energy_lj = 0.0000000000e
./unittests/setup_h2o_2_ch4_1.h:    testData.energy_ff = 0.0000000000e
./unittests/unittest-buckingham.cpp:    double energy_expected = 4.4300261242e+00;
./unittests/unittest-buckingham.cpp:    double energy = d.GetRepulsion(grad, &virial, use_ghost);
./unittests/unittest-buckingham.cpp:    REQUIRE(energy == Approx(energy_expected).margin(TOL));
./unittests/unittest-dispersion.cpp:    double energy_expected = -6.6842876953e+01;
./unittests/unittest-dispersion.cpp:    double energy = d.GetDispersion(grad, &virial, use_ghost);
./unittests/unittest-dispersion.cpp:    REQUIRE(energy == Approx(energy_expected).margin(TOL));
./unittests/unittest-disptools.cpp:            double expected_energy = -3.1099016679e-01;
./unittests/unittest-disptools.cpp:            double energy =
./unittests/unittest-disptools.cpp:            REQUIRE(energy == Approx(expected_energy).margin(TOL));
./unittests/unittest-disptools.cpp:            double expected_energy = -7.4162415106e+00;
./unittests/unittest-disptools.cpp:            double energy =
./unittests/unittest-disptools.cpp:            REQUIRE(energy == Approx(expected_energy).margin(TOL));
./unittests/unittest-electrostatics.cpp:        double energy_expected = -4.8093581201e+01;
./unittests/unittest-electrostatics.cpp:        double energy = d.GetElectrostatics(grad, &virial, use_ghost);
./unittests/unittest-electrostatics.cpp:        REQUIRE(energy == Approx(energy_expected).margin(TOL));
./unittests/unittest-electrostatics.cpp:    double energy_expected = -2.4446970924e+02;
./unittests/unittest-electrostatics.cpp:    double energy = d.GetElectrostatics(grad_all, &virial_all, use_ghost);
./unittests/unittest-electrostatics.cpp:    REQUIRE(energy == Approx(energy_expected).margin(TOL));
./unittests/unittest-electrostatics.cpp:    double energy2 = d2.GetElectrostatics(grad_system, &virial_system, use_ghost);
./unittests/unittest-electrostatics.cpp:    REQUIRE(energy2 == Approx(energy_expected).margin(TOL));
./unittests/unittest-energy1b.cpp:#include "potential/1b/energy1b.h"
./unittests/unittest-energy1b.cpp:TEST_CASE("energy1b::get_1b_energy_nograd") {
./unittests/unittest-energy1b.cpp:            double e = e1b::get_1b_energy(monid[i], nmon[i], xyz[i], bad_idxs);
./unittests/unittest-energy1b.cpp:        double e = e1b::get_1b_energy("not_a_monomer", nmon_nomon, xyz_nomon, bad_idxs);
./unittests/unittest-energy1b.cpp:TEST_CASE("energy1b::get_1b_energy_grad") {
./unittests/unittest-energy1b.cpp:            double e = e1b::get_1b_energy(monid[i], nmon[i], xyz[i], grad[i], bad_idxs, &virial[i]);
./unittests/unittest-energy1b.cpp:        double e = e1b::get_1b_energy(mon_nomon, nmon_nomon, xyz_nomon, grad_nomon, bad_idxs, &virial_nomon);
./unittests/unittest-energy2b.cpp:#include "potential/2b/energy2b.h"
./unittests/unittest-energy2b.cpp:TEST_CASE("energy2b::get_2b_energy") {
./unittests/unittest-energy2b.cpp:        double expected_energy = 4.3150257624e+00;
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2);
./unittests/unittest-energy2b.cpp:            double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2, grad1, grad2, &virial);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:        double expected_energy = 9.2886922733e-01;
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2);
./unittests/unittest-energy2b.cpp:            double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2, grad1, grad2, &virial);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:        double expected_energy = 1.3721453047e+01;
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2);
./unittests/unittest-energy2b.cpp:            double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2, grad1, grad2, &virial);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:                double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1, grad2, grad1, &virial);
./unittests/unittest-energy2b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:        double expected_energy = 7.6007164699e+00;
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2);
./unittests/unittest-energy2b.cpp:            double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2, grad1, grad2, &virial);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:                double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1, grad2, grad1, &virial);
./unittests/unittest-energy2b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:        double expected_energy = 1.6326245771e-01;
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2);
./unittests/unittest-energy2b.cpp:            double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2, grad1, grad2, &virial);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:        double expected_energy = 9.3915973596e-03;
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2);
./unittests/unittest-energy2b.cpp:            double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2, grad1, grad2, &virial);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:                double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1, grad2, grad1, &virial);
./unittests/unittest-energy2b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:        double expected_energy = -2.8795175245e-03;
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2);
./unittests/unittest-energy2b.cpp:            double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2, grad1, grad2, &virial);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:                double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1, grad2, grad1, &virial);
./unittests/unittest-energy2b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:        double expected_energy = 0.0;
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2);
./unittests/unittest-energy2b.cpp:            double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2, grad1, grad2, &virial);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:                double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1, grad2, grad1, &virial);
./unittests/unittest-energy2b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:        double expected_energy = 1.9131884042e+02;
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2);
./unittests/unittest-energy2b.cpp:            double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2, grad1, grad2, &virial);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:                double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1, grad2, grad1, &virial);
./unittests/unittest-energy2b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:        double expected_energy = 8.0018869775e-02;
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2);
./unittests/unittest-energy2b.cpp:            double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2, grad1, grad2, &virial);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:                double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1, grad2, grad1, &virial);
./unittests/unittest-energy2b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:        double expected_energy = -2.5325051670e+00;
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2);
./unittests/unittest-energy2b.cpp:            double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2, grad1, grad2, &virial);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:                double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1, grad2, grad1, &virial);
./unittests/unittest-energy2b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:        double expected_energy = -5.6164776849e+00;
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2);
./unittests/unittest-energy2b.cpp:            double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2, grad1, grad2, &virial);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:                double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1, grad2, grad1, &virial);
./unittests/unittest-energy2b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:        double expected_energy = -2.0181038622e-03;
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2);
./unittests/unittest-energy2b.cpp:            double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2, grad1, grad2, &virial);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:                double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1, grad2, grad1, &virial);
./unittests/unittest-energy2b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:        double expected_energy = -1.4227642188e+00;
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2);
./unittests/unittest-energy2b.cpp:            double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2, grad1, grad2, &virial);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:                double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1, grad2, grad1, &virial);
./unittests/unittest-energy2b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:        double expected_energy = 3.3682991352e-01;
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2);
./unittests/unittest-energy2b.cpp:            double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2, grad1, grad2, &virial);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:                double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1, grad2, grad1, &virial);
./unittests/unittest-energy2b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:        double expected_energy = -1.7617588048e-01;
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2);
./unittests/unittest-energy2b.cpp:            double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2, grad1, grad2, &virial);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:                double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1, grad2, grad1, &virial);
./unittests/unittest-energy2b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:        double expected_energy = -3.4240753238e-02;
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2);
./unittests/unittest-energy2b.cpp:            double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2, grad1, grad2, &virial);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:                double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1, grad2, grad1, &virial);
./unittests/unittest-energy2b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:        double expected_energy = 7.4400095277e+00;
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2);
./unittests/unittest-energy2b.cpp:            double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2, grad1, grad2, &virial);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:                double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1, grad2, grad1, &virial);
./unittests/unittest-energy2b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:        double expected_energy = 1.5613206146e+00;
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2);
./unittests/unittest-energy2b.cpp:            double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2, grad1, grad2, &virial);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:                double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1, grad2, grad1, &virial);
./unittests/unittest-energy2b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:        double expected_energy = -9.7971418759e-01;
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2);
./unittests/unittest-energy2b.cpp:            double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2, grad1, grad2, &virial);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:                double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1, grad2, grad1, &virial);
./unittests/unittest-energy2b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:        double expected_energy = 9.3820452886e+00;
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2);
./unittests/unittest-energy2b.cpp:            double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2, grad1, grad2, &virial);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:                double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1, grad2, grad1, &virial);
./unittests/unittest-energy2b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:        double expected_energy = 3.2526133935e+01;
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2);
./unittests/unittest-energy2b.cpp:            double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2, grad1, grad2, &virial);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:                double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1, grad2, grad1, &virial);
./unittests/unittest-energy2b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:        double expected_energy = 7.7808932932e+01;
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2);
./unittests/unittest-energy2b.cpp:            double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2, grad1, grad2, &virial);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:                double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1, grad2, grad1, &virial);
./unittests/unittest-energy2b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:        double expected_energy = 9.3748952002e+01;
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2);
./unittests/unittest-energy2b.cpp:            double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2, grad1, grad2, &virial);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:                double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1, grad2, grad1, &virial);
./unittests/unittest-energy2b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:        double expected_energy = 1.1310213932e+02;
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2);
./unittests/unittest-energy2b.cpp:            double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2, grad1, grad2, &virial);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:                double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1, grad2, grad1, &virial);
./unittests/unittest-energy2b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:        double expected_energy = -7.2641834338e-02;
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2);
./unittests/unittest-energy2b.cpp:            double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2, grad1, grad2, &virial);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:                double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1, grad2, grad1, &virial);
./unittests/unittest-energy2b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:        double expected_energy = -7.2641834338e-02;
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2);
./unittests/unittest-energy2b.cpp:            double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2, grad1, grad2, &virial);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:                double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1, grad2, grad1, &virial);
./unittests/unittest-energy2b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:        double expected_energy = -2.3595929819e-02;
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2);
./unittests/unittest-energy2b.cpp:            double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2, grad1, grad2, &virial);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:                double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1, grad2, grad1, &virial);
./unittests/unittest-energy2b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:        double expected_energy = 2.7747742116e-02;
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2);
./unittests/unittest-energy2b.cpp:            double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2, grad1, grad2, &virial);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:                double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1, grad2, grad1, &virial);
./unittests/unittest-energy2b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:        double expected_energy = 5.1365130858e-02;
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2);
./unittests/unittest-energy2b.cpp:            double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2, grad1, grad2, &virial);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:                double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1, grad2, grad1, &virial);
./unittests/unittest-energy2b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:        double expected_energy = 7.7654078997e-02;
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2);
./unittests/unittest-energy2b.cpp:            double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2, grad1, grad2, &virial);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:                double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1, grad2, grad1, &virial);
./unittests/unittest-energy2b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:        double expected_energy = 1.3441466096e-01;
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2);
./unittests/unittest-energy2b.cpp:            double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2, grad1, grad2, &virial);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:                double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1, grad2, grad1, &virial);
./unittests/unittest-energy2b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:        double expected_energy = -9.9052610663e-02;
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2);
./unittests/unittest-energy2b.cpp:            double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2, grad1, grad2, &virial);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:                double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1, grad2, grad1, &virial);
./unittests/unittest-energy2b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:        double expected_energy = 1.1102997556e-01;
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2);
./unittests/unittest-energy2b.cpp:            double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:            double e = e2b::get_2b_energy(mon1, mon2, nm, xyz1, xyz2, grad1, grad2, &virial);
./unittests/unittest-energy2b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:                double e2 = e2b::get_2b_energy(mon2, mon1, nm, xyz2, xyz1, grad2, grad1, &virial);
./unittests/unittest-energy2b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:    //        double expected_energy = ;
./unittests/unittest-energy2b.cpp:    //            double e = e2b::get_2b_energy(mon1,mon2,nm,xyz1,xyz2);
./unittests/unittest-energy2b.cpp:    //            double e2 = e2b::get_2b_energy(mon2,mon1,nm,xyz2,xyz1);
./unittests/unittest-energy2b.cpp:    //            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:    //            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:    //            double e = e2b::get_2b_energy(mon1,mon2,nm,xyz1,xyz2,grad1,grad2,&virial);
./unittests/unittest-energy2b.cpp:    //            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy2b.cpp:    //                double e2 = e2b::get_2b_energy(mon2,mon1,nm,xyz2,xyz1,grad2,grad1,&virial);
./unittests/unittest-energy2b.cpp:    //                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:#include "potential/3b/energy3b.h"
./unittests/unittest-energy3b.cpp:TEST_CASE("energy3b::get_3b_energy") {
./unittests/unittest-energy3b.cpp:        double expected_energy = 1.4662741082e-01;
./unittests/unittest-energy3b.cpp:            double e = e3b::get_3b_energy(mon1, mon2, mon3, nm, xyz1, xyz2, xyz3);
./unittests/unittest-energy3b.cpp:            double e2 = e3b::get_3b_energy(mon2, mon1, mon3, nm, xyz2, xyz1, xyz3);
./unittests/unittest-energy3b.cpp:            double e3 = e3b::get_3b_energy(mon1, mon3, mon2, nm, xyz1, xyz3, xyz2);
./unittests/unittest-energy3b.cpp:            double e4 = e3b::get_3b_energy(mon3, mon2, mon1, nm, xyz3, xyz2, xyz1);
./unittests/unittest-energy3b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            REQUIRE(e3 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            REQUIRE(e4 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            double e = e3b::get_3b_energy(mon1, mon2, mon3, nm, xyz1, xyz2, xyz3, grad1, grad2, grad3, &virial);
./unittests/unittest-energy3b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:                double e2 = e3b::get_3b_energy(mon2, mon1, mon3, nm, xyz2, xyz1, xyz3, grad2, grad1, grad3, &virial);
./unittests/unittest-energy3b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:                double e2 = e3b::get_3b_energy(mon3, mon2, mon1, nm, xyz3, xyz2, xyz1, grad3, grad2, grad1, &virial);
./unittests/unittest-energy3b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:                double e2 = e3b::get_3b_energy(mon1, mon3, mon2, nm, xyz1, xyz3, xyz2, grad1, grad3, grad2, &virial);
./unittests/unittest-energy3b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:        double expected_energy = 6.6537845821e-01;
./unittests/unittest-energy3b.cpp:            double e = e3b::get_3b_energy(mon1, mon2, mon3, nm, xyz1, xyz2, xyz3);
./unittests/unittest-energy3b.cpp:            double e2 = e3b::get_3b_energy(mon2, mon1, mon3, nm, xyz2, xyz1, xyz3);
./unittests/unittest-energy3b.cpp:            double e3 = e3b::get_3b_energy(mon1, mon3, mon2, nm, xyz1, xyz3, xyz2);
./unittests/unittest-energy3b.cpp:            double e4 = e3b::get_3b_energy(mon3, mon2, mon1, nm, xyz3, xyz2, xyz1);
./unittests/unittest-energy3b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            REQUIRE(e3 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            REQUIRE(e4 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            double e = e3b::get_3b_energy(mon1, mon2, mon3, nm, xyz1, xyz2, xyz3, grad1, grad2, grad3, &virial);
./unittests/unittest-energy3b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:                double e2 = e3b::get_3b_energy(mon2, mon1, mon3, nm, xyz2, xyz1, xyz3, grad2, grad1, grad3, &virial);
./unittests/unittest-energy3b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:                double e2 = e3b::get_3b_energy(mon3, mon2, mon1, nm, xyz3, xyz2, xyz1, grad3, grad2, grad1, &virial);
./unittests/unittest-energy3b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:                double e2 = e3b::get_3b_energy(mon1, mon3, mon2, nm, xyz1, xyz3, xyz2, grad1, grad3, grad2, &virial);
./unittests/unittest-energy3b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:        double expected_energy = 7.3272385776e-02;
./unittests/unittest-energy3b.cpp:            double e = e3b::get_3b_energy(mon1, mon2, mon3, nm, xyz1, xyz2, xyz3);
./unittests/unittest-energy3b.cpp:            double e2 = e3b::get_3b_energy(mon2, mon1, mon3, nm, xyz2, xyz1, xyz3);
./unittests/unittest-energy3b.cpp:            double e3 = e3b::get_3b_energy(mon1, mon3, mon2, nm, xyz1, xyz3, xyz2);
./unittests/unittest-energy3b.cpp:            double e4 = e3b::get_3b_energy(mon3, mon2, mon1, nm, xyz3, xyz2, xyz1);
./unittests/unittest-energy3b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            REQUIRE(e3 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            REQUIRE(e4 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            double e = e3b::get_3b_energy(mon1, mon2, mon3, nm, xyz1, xyz2, xyz3, grad1, grad2, grad3, &virial);
./unittests/unittest-energy3b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:                double e2 = e3b::get_3b_energy(mon2, mon1, mon3, nm, xyz2, xyz1, xyz3, grad2, grad1, grad3, &virial);
./unittests/unittest-energy3b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:                double e2 = e3b::get_3b_energy(mon3, mon2, mon1, nm, xyz3, xyz2, xyz1, grad3, grad2, grad1, &virial);
./unittests/unittest-energy3b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:                double e2 = e3b::get_3b_energy(mon1, mon3, mon2, nm, xyz1, xyz3, xyz2, grad1, grad3, grad2, &virial);
./unittests/unittest-energy3b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:        double expected_energy = -8.6542153165e-01;
./unittests/unittest-energy3b.cpp:            double e = e3b::get_3b_energy(mon1, mon2, mon3, nm, xyz1, xyz2, xyz3);
./unittests/unittest-energy3b.cpp:            double e2 = e3b::get_3b_energy(mon2, mon1, mon3, nm, xyz2, xyz1, xyz3);
./unittests/unittest-energy3b.cpp:            double e3 = e3b::get_3b_energy(mon1, mon3, mon2, nm, xyz1, xyz3, xyz2);
./unittests/unittest-energy3b.cpp:            double e4 = e3b::get_3b_energy(mon3, mon2, mon1, nm, xyz3, xyz2, xyz1);
./unittests/unittest-energy3b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            REQUIRE(e3 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            REQUIRE(e4 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            double e = e3b::get_3b_energy(mon1, mon2, mon3, nm, xyz1, xyz2, xyz3, grad1, grad2, grad3, &virial);
./unittests/unittest-energy3b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:                double e2 = e3b::get_3b_energy(mon2, mon1, mon3, nm, xyz2, xyz1, xyz3, grad2, grad1, grad3, &virial);
./unittests/unittest-energy3b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:                double e2 = e3b::get_3b_energy(mon3, mon2, mon1, nm, xyz3, xyz2, xyz1, grad3, grad2, grad1, &virial);
./unittests/unittest-energy3b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:                double e2 = e3b::get_3b_energy(mon1, mon3, mon2, nm, xyz1, xyz3, xyz2, grad1, grad3, grad2, &virial);
./unittests/unittest-energy3b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:    //    double expected_energy = -2.9409183708e-02;
./unittests/unittest-energy3b.cpp:    //        double e = e3b::get_3b_energy(mon1, mon2, mon3, nm, xyz1, xyz2, xyz3);
./unittests/unittest-energy3b.cpp:    //        double e2 = e3b::get_3b_energy(mon2, mon1, mon3, nm, xyz2, xyz1, xyz3);
./unittests/unittest-energy3b.cpp:    //        double e3 = e3b::get_3b_energy(mon1, mon3, mon2, nm, xyz1, xyz3, xyz2);
./unittests/unittest-energy3b.cpp:    //        double e4 = e3b::get_3b_energy(mon3, mon2, mon1, nm, xyz3, xyz2, xyz1);
./unittests/unittest-energy3b.cpp:    //        REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:    //        REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:    //        REQUIRE(e3 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:    //        REQUIRE(e4 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:    //        double e = e3b::get_3b_energy(mon1, mon2, mon3, nm, xyz1, xyz2, xyz3, grad1, grad2, grad3, &virial);
./unittests/unittest-energy3b.cpp:    //        REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:    //            double e2 = e3b::get_3b_energy(mon2, mon1, mon3, nm, xyz2, xyz1, xyz3, grad2, grad1, grad3, &virial);
./unittests/unittest-energy3b.cpp:    //            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:    //            double e2 = e3b::get_3b_energy(mon3, mon2, mon1, nm, xyz3, xyz2, xyz1, grad3, grad2, grad1, &virial);
./unittests/unittest-energy3b.cpp:    //            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:    //            double e2 = e3b::get_3b_energy(mon1, mon3, mon2, nm, xyz1, xyz3, xyz2, grad1, grad3, grad2, &virial);
./unittests/unittest-energy3b.cpp:    //            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:        double expected_energy = 0.0;
./unittests/unittest-energy3b.cpp:            double e = e3b::get_3b_energy(mon1, mon2, mon3, nm, xyz1, xyz2, xyz3);
./unittests/unittest-energy3b.cpp:            double e2 = e3b::get_3b_energy(mon2, mon1, mon3, nm, xyz2, xyz1, xyz3);
./unittests/unittest-energy3b.cpp:            double e3 = e3b::get_3b_energy(mon1, mon3, mon2, nm, xyz1, xyz3, xyz2);
./unittests/unittest-energy3b.cpp:            double e4 = e3b::get_3b_energy(mon3, mon2, mon1, nm, xyz3, xyz2, xyz1);
./unittests/unittest-energy3b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            REQUIRE(e3 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            REQUIRE(e4 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            double e = e3b::get_3b_energy(mon1, mon2, mon3, nm, xyz1, xyz2, xyz3, grad1, grad2, grad3, &virial);
./unittests/unittest-energy3b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:                double e2 = e3b::get_3b_energy(mon2, mon1, mon3, nm, xyz2, xyz1, xyz3, grad2, grad1, grad3, &virial);
./unittests/unittest-energy3b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:                double e2 = e3b::get_3b_energy(mon3, mon2, mon1, nm, xyz3, xyz2, xyz1, grad3, grad2, grad1, &virial);
./unittests/unittest-energy3b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:                double e2 = e3b::get_3b_energy(mon1, mon3, mon2, nm, xyz1, xyz3, xyz2, grad1, grad3, grad2, &virial);
./unittests/unittest-energy3b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:        double expected_energy = 1.0921723601e-01;
./unittests/unittest-energy3b.cpp:            double e = e3b::get_3b_energy(mon1, mon2, mon3, nm, xyz1, xyz2, xyz3);
./unittests/unittest-energy3b.cpp:            double e2 = e3b::get_3b_energy(mon2, mon1, mon3, nm, xyz2, xyz1, xyz3);
./unittests/unittest-energy3b.cpp:            double e3 = e3b::get_3b_energy(mon1, mon3, mon2, nm, xyz1, xyz3, xyz2);
./unittests/unittest-energy3b.cpp:            double e4 = e3b::get_3b_energy(mon3, mon2, mon1, nm, xyz3, xyz2, xyz1);
./unittests/unittest-energy3b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            REQUIRE(e3 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            REQUIRE(e4 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            double e = e3b::get_3b_energy(mon1, mon2, mon3, nm, xyz1, xyz2, xyz3, grad1, grad2, grad3, &virial);
./unittests/unittest-energy3b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:                double e2 = e3b::get_3b_energy(mon2, mon1, mon3, nm, xyz2, xyz1, xyz3, grad2, grad1, grad3, &virial);
./unittests/unittest-energy3b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:                double e2 = e3b::get_3b_energy(mon3, mon2, mon1, nm, xyz3, xyz2, xyz1, grad3, grad2, grad1, &virial);
./unittests/unittest-energy3b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:                double e2 = e3b::get_3b_energy(mon1, mon3, mon2, nm, xyz1, xyz3, xyz2, grad1, grad3, grad2, &virial);
./unittests/unittest-energy3b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:        double expected_energy = -2.0316534362e-01;
./unittests/unittest-energy3b.cpp:            double e = e3b::get_3b_energy(mon1, mon2, mon3, nm, xyz1, xyz2, xyz3);
./unittests/unittest-energy3b.cpp:            double e2 = e3b::get_3b_energy(mon2, mon1, mon3, nm, xyz2, xyz1, xyz3);
./unittests/unittest-energy3b.cpp:            double e3 = e3b::get_3b_energy(mon1, mon3, mon2, nm, xyz1, xyz3, xyz2);
./unittests/unittest-energy3b.cpp:            double e4 = e3b::get_3b_energy(mon3, mon2, mon1, nm, xyz3, xyz2, xyz1);
./unittests/unittest-energy3b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            REQUIRE(e3 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            REQUIRE(e4 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            double e = e3b::get_3b_energy(mon1, mon2, mon3, nm, xyz1, xyz2, xyz3, grad1, grad2, grad3, &virial);
./unittests/unittest-energy3b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:                double e2 = e3b::get_3b_energy(mon2, mon1, mon3, nm, xyz2, xyz1, xyz3, grad2, grad1, grad3, &virial);
./unittests/unittest-energy3b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:                double e2 = e3b::get_3b_energy(mon3, mon2, mon1, nm, xyz3, xyz2, xyz1, grad3, grad2, grad1, &virial);
./unittests/unittest-energy3b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:                double e2 = e3b::get_3b_energy(mon1, mon3, mon2, nm, xyz1, xyz3, xyz2, grad1, grad3, grad2, &virial);
./unittests/unittest-energy3b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:        double expected_energy = 1.8544877838e-01;
./unittests/unittest-energy3b.cpp:            double e = e3b::get_3b_energy(mon1, mon2, mon3, nm, xyz1, xyz2, xyz3);
./unittests/unittest-energy3b.cpp:            double e2 = e3b::get_3b_energy(mon2, mon1, mon3, nm, xyz2, xyz1, xyz3);
./unittests/unittest-energy3b.cpp:            double e3 = e3b::get_3b_energy(mon1, mon3, mon2, nm, xyz1, xyz3, xyz2);
./unittests/unittest-energy3b.cpp:            double e4 = e3b::get_3b_energy(mon3, mon2, mon1, nm, xyz3, xyz2, xyz1);
./unittests/unittest-energy3b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            REQUIRE(e3 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            REQUIRE(e4 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            double e = e3b::get_3b_energy(mon1, mon2, mon3, nm, xyz1, xyz2, xyz3, grad1, grad2, grad3, &virial);
./unittests/unittest-energy3b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:                double e2 = e3b::get_3b_energy(mon2, mon1, mon3, nm, xyz2, xyz1, xyz3, grad2, grad1, grad3, &virial);
./unittests/unittest-energy3b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:                double e2 = e3b::get_3b_energy(mon3, mon2, mon1, nm, xyz3, xyz2, xyz1, grad3, grad2, grad1, &virial);
./unittests/unittest-energy3b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:                double e2 = e3b::get_3b_energy(mon1, mon3, mon2, nm, xyz1, xyz3, xyz2, grad1, grad3, grad2, &virial);
./unittests/unittest-energy3b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:        double expected_energy = 3.3572030397e-01;
./unittests/unittest-energy3b.cpp:            double e = e3b::get_3b_energy(mon1, mon2, mon3, nm, xyz1, xyz2, xyz3);
./unittests/unittest-energy3b.cpp:            double e2 = e3b::get_3b_energy(mon2, mon1, mon3, nm, xyz2, xyz1, xyz3);
./unittests/unittest-energy3b.cpp:            double e3 = e3b::get_3b_energy(mon1, mon3, mon2, nm, xyz1, xyz3, xyz2);
./unittests/unittest-energy3b.cpp:            double e4 = e3b::get_3b_energy(mon3, mon2, mon1, nm, xyz3, xyz2, xyz1);
./unittests/unittest-energy3b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            REQUIRE(e3 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            REQUIRE(e4 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            double e = e3b::get_3b_energy(mon1, mon2, mon3, nm, xyz1, xyz2, xyz3, grad1, grad2, grad3, &virial);
./unittests/unittest-energy3b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:                double e2 = e3b::get_3b_energy(mon2, mon1, mon3, nm, xyz2, xyz1, xyz3, grad2, grad1, grad3, &virial);
./unittests/unittest-energy3b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:                double e2 = e3b::get_3b_energy(mon3, mon2, mon1, nm, xyz3, xyz2, xyz1, grad3, grad2, grad1, &virial);
./unittests/unittest-energy3b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:                double e2 = e3b::get_3b_energy(mon1, mon3, mon2, nm, xyz1, xyz3, xyz2, grad1, grad3, grad2, &virial);
./unittests/unittest-energy3b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:        double expected_energy = 5.6556864303e-01;
./unittests/unittest-energy3b.cpp:            double e = e3b::get_3b_energy(mon1, mon2, mon3, nm, xyz1, xyz2, xyz3);
./unittests/unittest-energy3b.cpp:            double e2 = e3b::get_3b_energy(mon2, mon1, mon3, nm, xyz2, xyz1, xyz3);
./unittests/unittest-energy3b.cpp:            double e3 = e3b::get_3b_energy(mon1, mon3, mon2, nm, xyz1, xyz3, xyz2);
./unittests/unittest-energy3b.cpp:            double e4 = e3b::get_3b_energy(mon3, mon2, mon1, nm, xyz3, xyz2, xyz1);
./unittests/unittest-energy3b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            REQUIRE(e3 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            REQUIRE(e4 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            double e = e3b::get_3b_energy(mon1, mon2, mon3, nm, xyz1, xyz2, xyz3, grad1, grad2, grad3, &virial);
./unittests/unittest-energy3b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:                double e2 = e3b::get_3b_energy(mon2, mon1, mon3, nm, xyz2, xyz1, xyz3, grad2, grad1, grad3, &virial);
./unittests/unittest-energy3b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:                double e2 = e3b::get_3b_energy(mon3, mon2, mon1, nm, xyz3, xyz2, xyz1, grad3, grad2, grad1, &virial);
./unittests/unittest-energy3b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:                double e2 = e3b::get_3b_energy(mon1, mon3, mon2, nm, xyz1, xyz3, xyz2, grad1, grad3, grad2, &virial);
./unittests/unittest-energy3b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:        double expected_energy = 1.0473957436e+00;
./unittests/unittest-energy3b.cpp:            double e = e3b::get_3b_energy(mon1, mon2, mon3, nm, xyz1, xyz2, xyz3);
./unittests/unittest-energy3b.cpp:            double e2 = e3b::get_3b_energy(mon2, mon1, mon3, nm, xyz2, xyz1, xyz3);
./unittests/unittest-energy3b.cpp:            double e3 = e3b::get_3b_energy(mon1, mon3, mon2, nm, xyz1, xyz3, xyz2);
./unittests/unittest-energy3b.cpp:            double e4 = e3b::get_3b_energy(mon3, mon2, mon1, nm, xyz3, xyz2, xyz1);
./unittests/unittest-energy3b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            REQUIRE(e3 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            REQUIRE(e4 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            double e = e3b::get_3b_energy(mon1, mon2, mon3, nm, xyz1, xyz2, xyz3, grad1, grad2, grad3, &virial);
./unittests/unittest-energy3b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:                double e2 = e3b::get_3b_energy(mon2, mon1, mon3, nm, xyz2, xyz1, xyz3, grad2, grad1, grad3, &virial);
./unittests/unittest-energy3b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:                double e2 = e3b::get_3b_energy(mon3, mon2, mon1, nm, xyz3, xyz2, xyz1, grad3, grad2, grad1, &virial);
./unittests/unittest-energy3b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:                double e2 = e3b::get_3b_energy(mon1, mon3, mon2, nm, xyz1, xyz3, xyz2, grad1, grad3, grad2, &virial);
./unittests/unittest-energy3b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:        double expected_energy = 4.9621879400e-02;
./unittests/unittest-energy3b.cpp:            double e = e3b::get_3b_energy(mon1, mon2, mon3, nm, xyz1, xyz2, xyz3);
./unittests/unittest-energy3b.cpp:            double e2 = e3b::get_3b_energy(mon2, mon1, mon3, nm, xyz2, xyz1, xyz3);
./unittests/unittest-energy3b.cpp:            double e3 = e3b::get_3b_energy(mon1, mon3, mon2, nm, xyz1, xyz3, xyz2);
./unittests/unittest-energy3b.cpp:            double e4 = e3b::get_3b_energy(mon3, mon2, mon1, nm, xyz3, xyz2, xyz1);
./unittests/unittest-energy3b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            REQUIRE(e3 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            REQUIRE(e4 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:            double e = e3b::get_3b_energy(mon1, mon2, mon3, nm, xyz1, xyz2, xyz3, grad1, grad2, grad3, &virial);
./unittests/unittest-energy3b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:                double e2 = e3b::get_3b_energy(mon2, mon1, mon3, nm, xyz2, xyz1, xyz3, grad2, grad1, grad3, &virial);
./unittests/unittest-energy3b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:                double e2 = e3b::get_3b_energy(mon3, mon2, mon1, nm, xyz3, xyz2, xyz1, grad3, grad2, grad1, &virial);
./unittests/unittest-energy3b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:                double e2 = e3b::get_3b_energy(mon1, mon3, mon2, nm, xyz1, xyz3, xyz2, grad1, grad3, grad2, &virial);
./unittests/unittest-energy3b.cpp:                REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:    //        double expected_energy = ;
./unittests/unittest-energy3b.cpp:    //            double e = e3b::get_3b_energy(mon1, mon2, mon3, nm, xyz1, xyz2, xyz3);
./unittests/unittest-energy3b.cpp:    //            double e2 = e3b::get_3b_energy(mon2, mon1, mon3, nm, xyz2, xyz1, xyz3);
./unittests/unittest-energy3b.cpp:    //            double e3 = e3b::get_3b_energy(mon1, mon3, mon2, nm, xyz1, xyz3, xyz2);
./unittests/unittest-energy3b.cpp:    //            double e4 = e3b::get_3b_energy(mon3, mon2, mon1, nm, xyz3, xyz2, xyz1);
./unittests/unittest-energy3b.cpp:    //            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:    //            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:    //            REQUIRE(e3 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:    //            REQUIRE(e4 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:    //            double e = e3b::get_3b_energy(mon1, mon2, mon3, nm, xyz1, xyz2, xyz3, grad1, grad2, grad3, &virial);
./unittests/unittest-energy3b.cpp:    //            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:    //                double e2 = e3b::get_3b_energy(mon2, mon1, mon3, nm, xyz2, xyz1, xyz3, grad2, grad1, grad3,
./unittests/unittest-energy3b.cpp:    //                &virial); REQUIRE(e2 == Approx(expected_energy).margin(TOL)); REQUIRE(VectorsAreEqual(grad1,
./unittests/unittest-energy3b.cpp:    //                double e2 = e3b::get_3b_energy(mon3, mon2, mon1, nm, xyz3, xyz2, xyz1, grad3, grad2, grad1,
./unittests/unittest-energy3b.cpp:    //                &virial); REQUIRE(e2 == Approx(expected_energy).margin(TOL)); REQUIRE(VectorsAreEqual(grad1,
./unittests/unittest-energy3b.cpp:    //                double e2 = e3b::get_3b_energy(mon1, mon3, mon2, nm, xyz1, xyz3, xyz2, grad1, grad3, grad2,
./unittests/unittest-energy3b.cpp:    //                &virial); REQUIRE(e2 == Approx(expected_energy).margin(TOL)); REQUIRE(VectorsAreEqual(grad1,
./unittests/unittest-energy3b.cpp:    //        double expected_energy = ;
./unittests/unittest-energy3b.cpp:    //            double e = e3b::get_3b_energy(mon1, mon2, mon3, nm, xyz1, xyz2, xyz3);
./unittests/unittest-energy3b.cpp:    //            double e2 = e3b::get_3b_energy(mon2, mon1, mon3, nm, xyz2, xyz1, xyz3);
./unittests/unittest-energy3b.cpp:    //            double e3 = e3b::get_3b_energy(mon1, mon3, mon2, nm, xyz1, xyz3, xyz2);
./unittests/unittest-energy3b.cpp:    //            double e4 = e3b::get_3b_energy(mon3, mon2, mon1, nm, xyz3, xyz2, xyz1);
./unittests/unittest-energy3b.cpp:    //            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:    //            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:    //            REQUIRE(e3 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:    //            REQUIRE(e4 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:    //            double e = e3b::get_3b_energy(mon1, mon2, mon3, nm, xyz1, xyz2, xyz3, grad1, grad2, grad3, &virial);
./unittests/unittest-energy3b.cpp:    //            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:    //                double e2 = e3b::get_3b_energy(mon2, mon1, mon3, nm, xyz2, xyz1, xyz3, grad2, grad1, grad3,
./unittests/unittest-energy3b.cpp:    //                &virial); REQUIRE(e2 == Approx(expected_energy).margin(TOL)); REQUIRE(VectorsAreEqual(grad1,
./unittests/unittest-energy3b.cpp:    //                double e2 = e3b::get_3b_energy(mon3, mon2, mon1, nm, xyz3, xyz2, xyz1, grad3, grad2, grad1,
./unittests/unittest-energy3b.cpp:    //                &virial); REQUIRE(e2 == Approx(expected_energy).margin(TOL)); REQUIRE(VectorsAreEqual(grad1,
./unittests/unittest-energy3b.cpp:    //                double e2 = e3b::get_3b_energy(mon1, mon3, mon2, nm, xyz1, xyz3, xyz2, grad1, grad3, grad2,
./unittests/unittest-energy3b.cpp:    //                &virial); REQUIRE(e2 == Approx(expected_energy).margin(TOL)); REQUIRE(VectorsAreEqual(grad1,
./unittests/unittest-energy3b.cpp:    //        double expected_energy = ;
./unittests/unittest-energy3b.cpp:    //            double e = e3b::get_3b_energy(mon1, mon2, mon3, nm, xyz1, xyz2, xyz3);
./unittests/unittest-energy3b.cpp:    //            double e2 = e3b::get_3b_energy(mon2, mon1, mon3, nm, xyz2, xyz1, xyz3);
./unittests/unittest-energy3b.cpp:    //            double e3 = e3b::get_3b_energy(mon1, mon3, mon2, nm, xyz1, xyz3, xyz2);
./unittests/unittest-energy3b.cpp:    //            double e4 = e3b::get_3b_energy(mon3, mon2, mon1, nm, xyz3, xyz2, xyz1);
./unittests/unittest-energy3b.cpp:    //            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:    //            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:    //            REQUIRE(e3 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:    //            REQUIRE(e4 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:    //            double e = e3b::get_3b_energy(mon1, mon2, mon3, nm, xyz1, xyz2, xyz3, grad1, grad2, grad3, &virial);
./unittests/unittest-energy3b.cpp:    //            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy3b.cpp:    //                double e2 = e3b::get_3b_energy(mon2, mon1, mon3, nm, xyz2, xyz1, xyz3, grad2, grad1, grad3,
./unittests/unittest-energy3b.cpp:    //                &virial); REQUIRE(e2 == Approx(expected_energy).margin(TOL)); REQUIRE(VectorsAreEqual(grad1,
./unittests/unittest-energy3b.cpp:    //                double e2 = e3b::get_3b_energy(mon3, mon2, mon1, nm, xyz3, xyz2, xyz1, grad3, grad2, grad1,
./unittests/unittest-energy3b.cpp:    //                &virial); REQUIRE(e2 == Approx(expected_energy).margin(TOL)); REQUIRE(VectorsAreEqual(grad1,
./unittests/unittest-energy3b.cpp:    //                double e2 = e3b::get_3b_energy(mon1, mon3, mon2, nm, xyz1, xyz3, xyz2, grad1, grad3, grad2,
./unittests/unittest-energy3b.cpp:    //                &virial); REQUIRE(e2 == Approx(expected_energy).margin(TOL)); REQUIRE(VectorsAreEqual(grad1,
./unittests/unittest-energy4b.cpp:#include "potential/4b/energy4b.h"
./unittests/unittest-energy4b.cpp:TEST_CASE("energy4b::get_4b_energy") {
./unittests/unittest-energy4b.cpp:        double expected_energy = -1.41412667e-02;
./unittests/unittest-energy4b.cpp:            double e = e4b::get_4b_energy(mon1, mon2, mon3, mon4, nm, xyz1, xyz2, xyz3, xyz4);
./unittests/unittest-energy4b.cpp:            double e2 = e4b::get_4b_energy(mon2, mon1, mon4, mon3, nm, xyz2, xyz1, xyz4, xyz3);
./unittests/unittest-energy4b.cpp:            double e3 = e4b::get_4b_energy(mon1, mon4, mon3, mon2, nm, xyz1, xyz4, xyz3, xyz2);
./unittests/unittest-energy4b.cpp:            double e4 = e4b::get_4b_energy(mon4, mon3, mon2, mon1, nm, xyz4, xyz3, xyz2, xyz1);
./unittests/unittest-energy4b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy4b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy4b.cpp:            REQUIRE(e3 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy4b.cpp:            REQUIRE(e4 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy4b.cpp:            double e = e4b::get_4b_energy(mon1, mon2, mon3, mon4, nm,
./unittests/unittest-energy4b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy4b.cpp:                double e2 = e4b::get_4b_energy(mon2, mon1, mon3, mon4, nm, xyz2, xyz1, xyz3, xyz4,
./unittests/unittest-energy4b.cpp:                grad2, grad1, grad3, grad4, &virial); REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy4b.cpp:                double e2 = e4b::get_4b_energy(mon3, mon2, mon1, mon4, nm, xyz3, xyz2, xyz1, xyz4,
./unittests/unittest-energy4b.cpp:                grad3, grad2, grad1, grad4, &virial); REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy4b.cpp:                double e2 = e4b::get_4b_energy(mon4, mon2, mon3, mon1, nm, xyz4, xyz2, xyz3, xyz1,
./unittests/unittest-energy4b.cpp:                grad4, grad2, grad3, grad1, &virial); REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy4b.cpp:                double e2 = e4b::get_4b_energy(mon1, mon3, mon2, mon4, nm, xyz1, xyz3, xyz2, xyz4,
./unittests/unittest-energy4b.cpp:                grad1, grad3, grad2, grad4, &virial); REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy4b.cpp:                double e2 = e4b::get_4b_energy(mon1, mon2, mon4, mon3, nm, xyz1, xyz2, xyz4, xyz3,
./unittests/unittest-energy4b.cpp:                grad1, grad2, grad4, grad3, &virial); REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy4b.cpp:        double expected_energy = 0.0;
./unittests/unittest-energy4b.cpp:            double e = e4b::get_4b_energy(mon1, mon2, mon3, mon4, nm, xyz1, xyz2, xyz3, xyz4);
./unittests/unittest-energy4b.cpp:            double e2 = e4b::get_4b_energy(mon2, mon1, mon4, mon3, nm, xyz2, xyz1, xyz4, xyz3);
./unittests/unittest-energy4b.cpp:            double e3 = e4b::get_4b_energy(mon1, mon4, mon3, mon2, nm, xyz1, xyz4, xyz3, xyz2);
./unittests/unittest-energy4b.cpp:            double e4 = e4b::get_4b_energy(mon4, mon3, mon2, mon1, nm, xyz4, xyz3, xyz2, xyz1);
./unittests/unittest-energy4b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy4b.cpp:            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy4b.cpp:            REQUIRE(e3 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy4b.cpp:            REQUIRE(e4 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy4b.cpp:            double e = e4b::get_4b_energy(mon1, mon2, mon3, mon4, nm,
./unittests/unittest-energy4b.cpp:            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy4b.cpp:                double e2 = e4b::get_4b_energy(mon2, mon1, mon3, mon4, nm, xyz2, xyz1, xyz3, xyz4,
./unittests/unittest-energy4b.cpp:                grad2, grad1, grad3, grad4, &virial); REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy4b.cpp:                double e2 = e4b::get_4b_energy(mon3, mon2, mon1, mon4, nm, xyz3, xyz2, xyz1, xyz4,
./unittests/unittest-energy4b.cpp:                grad3, grad2, grad1, grad4, &virial); REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy4b.cpp:                double e2 = e4b::get_4b_energy(mon4, mon2, mon3, mon1, nm, xyz4, xyz2, xyz3, xyz1,
./unittests/unittest-energy4b.cpp:                grad4, grad2, grad3, grad1, &virial); REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy4b.cpp:                double e2 = e4b::get_4b_energy(mon1, mon3, mon2, mon4, nm, xyz1, xyz3, xyz2, xyz4,
./unittests/unittest-energy4b.cpp:                grad1, grad3, grad2, grad4, &virial); REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy4b.cpp:                double e2 = e4b::get_4b_energy(mon1, mon2, mon4, mon3, nm, xyz1, xyz2, xyz4, xyz3,
./unittests/unittest-energy4b.cpp:                grad1, grad2, grad4, grad3, &virial); REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy4b.cpp:    //        double expected_energy = ;
./unittests/unittest-energy4b.cpp:    //            double e = e4b::get_4b_energy(mon1, mon2, mon3, mon4, nm, xyz1, xyz2, xyz3, xyz4);
./unittests/unittest-energy4b.cpp:    //            double e2 = e4b::get_4b_energy(mon2, mon1, mon4, mon3, nm, xyz2, xyz1, xyz4, xyz3);
./unittests/unittest-energy4b.cpp:    //            double e3 = e4b::get_4b_energy(mon1, mon4, mon3, mon2, nm, xyz1, xyz4, xyz3, xyz2);
./unittests/unittest-energy4b.cpp:    //            double e4 = e4b::get_4b_energy(mon4, mon3, mon2, mon1, nm, xyz4, xyz3, xyz2, xyz1);
./unittests/unittest-energy4b.cpp:    //            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy4b.cpp:    //            REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy4b.cpp:    //            REQUIRE(e3 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy4b.cpp:    //            REQUIRE(e4 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy4b.cpp:    //            double e = e4b::get_4b_energy(mon1, mon2, mon3, mon4, nm,
./unittests/unittest-energy4b.cpp:    //            REQUIRE(e == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy4b.cpp:    //                double e2 = e4b::get_4b_energy(mon2, mon1, mon3, mon4, nm, xyz2, xyz1, xyz3, xyz4,
./unittests/unittest-energy4b.cpp:    //                grad2, grad1, grad3, grad4, &virial); REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy4b.cpp:    //                double e2 = e4b::get_4b_energy(mon3, mon2, mon1, mon4, nm, xyz3, xyz2, xyz1, xyz4,
./unittests/unittest-energy4b.cpp:    //                grad3, grad2, grad1, grad4, &virial); REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy4b.cpp:    //                double e2 = e4b::get_4b_energy(mon4, mon2, mon3, mon1, nm, xyz4, xyz2, xyz3, xyz1,
./unittests/unittest-energy4b.cpp:    //                grad4, grad2, grad3, grad1, &virial); REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy4b.cpp:    //                double e2 = e4b::get_4b_energy(mon1, mon3, mon2, mon4, nm, xyz1, xyz3, xyz2, xyz4,
./unittests/unittest-energy4b.cpp:    //                grad1, grad3, grad2, grad4, &virial); REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energy4b.cpp:    //                double e2 = e4b::get_4b_energy(mon1, mon2, mon4, mon3, nm, xyz1, xyz2, xyz4, xyz3,
./unittests/unittest-energy4b.cpp:    //                grad1, grad2, grad4, grad3, &virial); REQUIRE(e2 == Approx(expected_energy).margin(TOL));
./unittests/unittest-energyff.cpp:#include "potential/force_field/energyff.h"
./unittests/unittest-energyff.cpp:TEST_CASE("energyff::get_ff_energy(no grad)") {
./unittests/unittest-energyff.cpp:        double e_nograd = eff::get_ff_energy(connectivity, 1, coords, good, n_atoms, box, box_inv);
./unittests/unittest-energyff.cpp:        double e_grad = eff::get_ff_energy(connectivity, 1, coords, grad, good, n_atoms, box, box_inv, &virial);
./unittests/unittest-energyff.cpp:            double ep = eff::get_ff_energy(connectivity, 1, coords, good, n_atoms, box, box_inv);
./unittests/unittest-energyff.cpp:            double epp = eff::get_ff_energy(connectivity, 1, coords, good, n_atoms, box, box_inv);
./unittests/unittest-energyff.cpp:            double emm = eff::get_ff_energy(connectivity, 1, coords, good, n_atoms, box, box_inv);
./unittests/unittest-energyff.cpp:            double em = eff::get_ff_energy(connectivity, 1, coords, good, n_atoms, box, box_inv);
./unittests/unittest-ffcalculators.cpp:                double energy = dihedral.GetEnergy(phi);
./unittests/unittest-ffcalculators.cpp:                double energy = inv.GetEnergy(phi[0]) + inv.GetEnergy(phi[1]) + inv.GetEnergy(phi[2]);
./unittests/unittest-ffcalculators.cpp:                energy /= 3.0;
./unittests/unittest-lj.cpp:        double expected_energy = 2.8140638986e+04;
./unittests/unittest-lj.cpp:        double energy = d.GetLennardJones(grad, &virial, use_ghost);
./unittests/unittest-lj.cpp:        REQUIRE(energy == Approx(expected_energy).margin(TOL));
./unittests/unittest-lj.cpp:        double expected_energy = 2.1380674525e+00;
./unittests/unittest-lj.cpp:        double energy = d.GetLennardJones(grad, &virial, use_ghost);
./unittests/unittest-lj.cpp:        double expected_energy = 1.0684359220e+05;
./unittests/unittest-lj.cpp:        double energy = d.GetLennardJones(grad, &virial, use_ghost);
./unittests/unittest-lj.cpp:        REQUIRE(energy == Approx(expected_energy).margin(TOL));
./unittests/unittest-lj.cpp://    double energy_expected = -6.6842876953e+01;
./unittests/unittest-lj.cpp://    double energy = d.GetDispersion(grad, &virial, use_ghost);
./unittests/unittest-lj.cpp://    REQUIRE(energy == Approx(energy_expected).margin(TOL));
./unittests/unittest-ljtools.cpp:            double expected_energy = 2.8140638986e+04;
./unittests/unittest-ljtools.cpp:            double energy = lj::lj(eps, sigma, ljchgi, ljchgj, p1, xyz2, grad1, grad2, phi1, phi2, nmon1, nmon2, start2,
./unittests/unittest-ljtools.cpp:            REQUIRE(energy == Approx(expected_energy).margin(TOL));
./unittests/unittest-ljtools.cpp:            double expected_energy = 2.8143808123e+04;
./unittests/unittest-ljtools.cpp:            double energy = lj::lj(eps, sigma, ljchgi, ljchgj, p1, xyz2, grad1, grad2, phi1, phi2, nmon1, nmon2, start2,
./unittests/unittest-ljtools.cpp:            REQUIRE(energy == Approx(expected_energy).margin(TOL));
./unittests/unittest-ljtools.cpp:        double energy = lj::lj(eps, sigma, ljchgi, ljchgj, p1, xyz2, grad1, grad2, phi1, phi2, nmon1, nmon2, start2,
./unittests/unittest-pme-nopolarization-findif.cpp:    double ref_energy = -0.1744839641;
./unittests/unittest-pme-nopolarization-findif.cpp:    double energy = elec.GetElectrostatics(forces);
./unittests/unittest-pme-nopolarization-findif.cpp:    std::cout << "Energy: " << energy << std::endl;
./unittests/unittest-pme-nopolarization-findif.cpp:    REQUIRE(energy == Approx(ref_energy).margin(TOL));
./unittests/unittest-pme-nopolarization.cpp:    double ref_energy = -1820.686249;
./unittests/unittest-pme-nopolarization.cpp:    double energy3 = elec.GetElectrostatics(forces3);
./unittests/unittest-pme-nopolarization.cpp:    REQUIRE(energy3 == Approx(ref_energy).epsilon(TOL));
./unittests/unittest-pme-nopolarization.cpp:    double energy4 = elec.GetElectrostatics(forces4);
./unittests/unittest-pme-nopolarization.cpp:    REQUIRE(energy4 == Approx(energy3).epsilon(TOL));
./unittests/unittest-pme-nopolarization.cpp:    double energy5 = elec.GetElectrostatics(forces5);
./unittests/unittest-pme-nopolarization.cpp:    REQUIRE(energy5 == Approx(energy4).epsilon(TOL));
./unittests/unittest-pme-nopolarization.cpp:    std::cout << "alpha = 0.25: " << std::setw(16) << std::setprecision(10) << energy3 << std::endl;
./unittests/unittest-pme-nopolarization.cpp:    std::cout << "alpha = 0.35: " << std::setw(16) << std::setprecision(10) << energy4 << std::endl;
./unittests/unittest-pme-nopolarization.cpp:    std::cout << "alpha = 0.45: " << std::setw(16) << std::setprecision(10) << energy5 << std::endl;
./unittests/unittest-pme-withpolarization-findif.cpp:    double ref_energy = -0.1752818171;
./unittests/unittest-pme-withpolarization-findif.cpp:    double energy = elec.GetElectrostatics(forces);
./unittests/unittest-pme-withpolarization-findif.cpp:    std::cout << "Energy: " << std::setw(16) << std::setprecision(10) << energy << std::endl;
./unittests/unittest-pme-withpolarization-findif.cpp:    REQUIRE(energy == Approx(ref_energy).margin(TOL));
./unittests/unittest-pme-withpolarization.cpp:    double ref_energy = -2531.4416733178;
./unittests/unittest-pme-withpolarization.cpp:    double energy3 = elec.GetElectrostatics(forces3);
./unittests/unittest-pme-withpolarization.cpp:    REQUIRE(energy3 == Approx(ref_energy).epsilon(TOL));
./unittests/unittest-pme-withpolarization.cpp:    double energy4 = elec.GetElectrostatics(forces4);
./unittests/unittest-pme-withpolarization.cpp:    REQUIRE(energy4 == Approx(energy3).epsilon(TOL));
./unittests/unittest-pme-withpolarization.cpp:    double energy5 = elec.GetElectrostatics(forces5);
./unittests/unittest-pme-withpolarization.cpp:    REQUIRE(energy5 == Approx(energy4).epsilon(TOL));
./unittests/unittest-pme-withpolarization.cpp:    std::cout << "alpha = 0.25: " << std::setw(16) << std::setprecision(10) << energy3 << std::endl;
./unittests/unittest-pme-withpolarization.cpp:    std::cout << "alpha = 0.35: " << std::setw(16) << std::setprecision(10) << energy4 << std::endl;
./unittests/unittest-pme-withpolarization.cpp:    std::cout << "alpha = 0.45: " << std::setw(16) << std::setprecision(10) << energy5 << std::endl;
./unittests/unittest-poly-holder-2b.cpp:        double energy_expected = 3.2526133935e+01;
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        double energy_expected = 7.7808932932e+01;
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        double energy_expected = 9.3748952002e+01;
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        double energy_expected = 1.1310213932e+02;
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        double energy_expected = 7.4400095277e+00;
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        double energy_expected = 9.2886922733e-01;
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        double energy_expected = -7.2641834338e-02;
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        double energy_expected = -7.2641834338e-02;
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        double energy_expected = -2.3595929819e-02;
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        double energy_expected = 2.7747742116e-02;
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        double energy_expected = 5.1365130858e-02;
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        double energy_expected = 7.7654078997e-02;
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        double energy_expected = 1.3441466096e-01;
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        double energy_expected = 1.1102997556e-01;
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        double energy_expected = 7.5362344392e+02;
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        double energy_expected = 9.3915973596e-03;
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        double energy_expected = 8.0147096979e-01;
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        double energy_expected = 7.3392533177e+00;
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        double energy_expected = 1.0512435167e+01;
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        double energy_expected = 5.6933692562e+00;
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        double energy_expected = 1.3721453047e+01;
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        double energy_expected = 1.6326245771e-01;
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        double energy_expected = 4.3150257624e+00;
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        double energy_expected = 1.9131884042e+02;
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        double energy_expected = 8.0018869775e-02;
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        double energy_expected = -4.6809460161e+00;
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        double energy_expected = -5.6164776849e+00;
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        double energy_expected = -4.2400811422e-03;
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        double energy_expected = -1.4227642188e+00;
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        double energy_expected = 3.3682991352e-01;
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        double energy_expected = -1.2616368300e+00;
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        double energy_expected = 5.9630264568e-02;
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        double energy_expected = 1.5613206146e+00;
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        double energy_expected = -9.7971418759e-01;
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        double energy_expected = 9.3820452886e+00;
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        double energy_expected = -9.9052610663e-02;
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp://        double energy_expected = ;
./unittests/unittest-poly-holder-2b.cpp://        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp://        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp://        double energy_expected = ;
./unittests/unittest-poly-holder-2b.cpp://        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp://        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp://        double energy_expected = ;
./unittests/unittest-poly-holder-2b.cpp://        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-2b.cpp://        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp://        double energy_expected = ;
./unittests/unittest-poly-holder-3b.cpp://        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp://        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp:        double energy_expected = -2.0316534362e-01;
./unittests/unittest-poly-holder-3b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp:        double energy_expected = 4.9621879400e-02;
./unittests/unittest-poly-holder-3b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp:        double energy_expected = 1.8544877838e-01;
./unittests/unittest-poly-holder-3b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp:        double energy_expected = 5.6556864303e-01;
./unittests/unittest-poly-holder-3b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp:        double energy_expected = 1.0473957436e+00;
./unittests/unittest-poly-holder-3b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp:        double energy_expected = 3.3572030397e-01;
./unittests/unittest-poly-holder-3b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp:        double energy_expected = -8.6542153165e-01;
./unittests/unittest-poly-holder-3b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp:        double energy_expected = 6.6537845821e-01;
./unittests/unittest-poly-holder-3b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp:        double energy_expected = 9.9376173287e-02;
./unittests/unittest-poly-holder-3b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp:        double energy_expected = 2.5355343818e-02;
./unittests/unittest-poly-holder-3b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp:        double energy_expected = 3.1110481333e-01;
./unittests/unittest-poly-holder-3b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp:        double energy_expected = 7.3272385776e-02;
./unittests/unittest-poly-holder-3b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp:        double energy_expected = 1.4662741082e-01;
./unittests/unittest-poly-holder-3b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp:        double energy_expected = 1.0921723601e-01;
./unittests/unittest-poly-holder-3b.cpp:        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp:        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp://        double energy_expected = ;
./unittests/unittest-poly-holder-3b.cpp://        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp://        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp://        double energy_expected = ;
./unittests/unittest-poly-holder-3b.cpp://        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp://        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp://        double energy_expected = ;
./unittests/unittest-poly-holder-3b.cpp://        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp://        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp://        double energy_expected = ;
./unittests/unittest-poly-holder-3b.cpp://        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp://        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp://        double energy_expected = ;
./unittests/unittest-poly-holder-3b.cpp://        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp://        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp://        double energy_expected = ;
./unittests/unittest-poly-holder-3b.cpp://        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp://        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp://        double energy_expected = ;
./unittests/unittest-poly-holder-3b.cpp://        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp://        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp://        double energy_expected = ;
./unittests/unittest-poly-holder-3b.cpp://        REQUIRE(e_nograd == Approx(energy_expected).margin(TOL));
./unittests/unittest-poly-holder-3b.cpp://        REQUIRE(e == Approx(energy_expected).margin(TOL));
./unittests/unittest-ps.cpp:TEST_CASE("ps::energy") {
./unittests/unittest-system.cpp:        REQUIRE(e_nograd == Approx(testData.total_energy).margin(TOL));
./unittests/unittest-system.cpp:        REQUIRE(e == Approx(testData.total_energy).margin(TOL));
./unittests/unittest-system.cpp:        REQUIRE(e_nograd == Approx(testData.energy_1b).margin(TOL));
./unittests/unittest-system.cpp:        REQUIRE(e == Approx(testData.energy_1b).margin(TOL));
./unittests/unittest-system.cpp:        REQUIRE(e_nograd == Approx(testData.energy_2b).margin(TOL));
./unittests/unittest-system.cpp:        REQUIRE(e == Approx(testData.energy_2b).margin(TOL));
./unittests/unittest-system.cpp:        REQUIRE(e_nograd == Approx(testData.energy_3b).margin(TOL));
./unittests/unittest-system.cpp:        REQUIRE(e == Approx(testData.energy_3b).margin(TOL));
./unittests/unittest-system.cpp:        REQUIRE(e_nograd == Approx(testData.energy_disp).margin(TOL));
./unittests/unittest-system.cpp:        REQUIRE(e == Approx(testData.energy_disp).margin(TOL));
./unittests/unittest-system.cpp:        REQUIRE(e_nograd == Approx(testData.energy_buck).margin(TOL));
./unittests/unittest-system.cpp:        REQUIRE(e == Approx(testData.energy_buck).margin(TOL));
./unittests/unittest-system.cpp:        REQUIRE(e_nograd == Approx(testData.energy_lj).margin(TOL));
./unittests/unittest-system.cpp:        REQUIRE(e == Approx(testData.energy_lj).margin(TOL));
./unittests/unittest-system.cpp:        REQUIRE(e_nograd == Approx(testData.energy_ff).margin(TOL));
./unittests/unittest-system.cpp:        REQUIRE(e == Approx(testData.energy_ff).margin(TOL));
./unittests/unittest-system.cpp:TEST_CASE("system::energy") {
./unittests/unittest-system.cpp:    // Calculate reference energy and gradients
./unittests/unittest-system.cpp:    double expected_energy = systems[0].Energy(true);
./unittests/unittest-system.cpp:    // Calculate the energy contribution and the gradients from the 2 point charges
./unittests/unittest-system.cpp:    double energy_point_charges = systems[2].Energy(true);
./unittests/unittest-system.cpp:    // Calculate energy and gradients of system 1 and the external charges
./unittests/unittest-system.cpp:    SECTION("Energy") { REQUIRE(en1 == Approx(expected_energy).margin(TOL)); }
./unittests/unittest-system.cpp:    REQUIRE(en1b == Approx(expected_energy).margin(TOL));
./unittests/unittest-system.cpp:    // Calculate energy to fill dipole vectors
./unittests/Makefile.in:@ISMPI_FALSE@	unittest-energy1b$(EXEEXT) \
./unittests/Makefile.in:@ISMPI_FALSE@	unittest-energy2b$(EXEEXT) \
./unittests/Makefile.in:@ISMPI_FALSE@	unittest-energy3b$(EXEEXT) \
./unittests/Makefile.in:@ISMPI_FALSE@	unittest-energy4b$(EXEEXT) \
./unittests/Makefile.in:@ISMPI_FALSE@	unittest-energyff$(EXEEXT) \
./unittests/Makefile.in:@ISMPI_FALSE@	unittest-energy1b$(EXEEXT) \
./unittests/Makefile.in:@ISMPI_FALSE@	unittest-energy2b$(EXEEXT) \
./unittests/Makefile.in:@ISMPI_FALSE@	unittest-energy3b$(EXEEXT) \
./unittests/Makefile.in:@ISMPI_FALSE@	unittest-energy4b$(EXEEXT) \
./unittests/Makefile.in:@ISMPI_FALSE@	unittest-energyff$(EXEEXT) \
./unittests/Makefile.in:am__unittest_energy1b_SOURCES_DIST = unittest-main.cpp \
./unittests/Makefile.in:	unittest-energy1b.cpp
./unittests/Makefile.in:@ISMPI_FALSE@am_unittest_energy1b_OBJECTS = unittest-main.$(OBJEXT) \
./unittests/Makefile.in:@ISMPI_FALSE@	unittest-energy1b.$(OBJEXT)
./unittests/Makefile.in:unittest_energy1b_OBJECTS = $(am_unittest_energy1b_OBJECTS)
./unittests/Makefile.in:unittest_energy1b_LDADD = $(LDADD)
./unittests/Makefile.in:@ISMPI_FALSE@unittest_energy1b_DEPENDENCIES =  \
./unittests/Makefile.in:am__unittest_energy2b_SOURCES_DIST = unittest-main.cpp \
./unittests/Makefile.in:	unittest-energy2b.cpp
./unittests/Makefile.in:@ISMPI_FALSE@am_unittest_energy2b_OBJECTS = unittest-main.$(OBJEXT) \
./unittests/Makefile.in:@ISMPI_FALSE@	unittest-energy2b.$(OBJEXT)
./unittests/Makefile.in:unittest_energy2b_OBJECTS = $(am_unittest_energy2b_OBJECTS)
./unittests/Makefile.in:unittest_energy2b_LDADD = $(LDADD)
./unittests/Makefile.in:@ISMPI_FALSE@unittest_energy2b_DEPENDENCIES =  \
./unittests/Makefile.in:am__unittest_energy3b_SOURCES_DIST = unittest-main.cpp \
./unittests/Makefile.in:	unittest-energy3b.cpp
./unittests/Makefile.in:@ISMPI_FALSE@am_unittest_energy3b_OBJECTS = unittest-main.$(OBJEXT) \
./unittests/Makefile.in:@ISMPI_FALSE@	unittest-energy3b.$(OBJEXT)
./unittests/Makefile.in:unittest_energy3b_OBJECTS = $(am_unittest_energy3b_OBJECTS)
./unittests/Makefile.in:unittest_energy3b_LDADD = $(LDADD)
./unittests/Makefile.in:@ISMPI_FALSE@unittest_energy3b_DEPENDENCIES =  \
./unittests/Makefile.in:am__unittest_energy4b_SOURCES_DIST = unittest-main.cpp \
./unittests/Makefile.in:	unittest-energy4b.cpp
./unittests/Makefile.in:@ISMPI_FALSE@am_unittest_energy4b_OBJECTS = unittest-main.$(OBJEXT) \
./unittests/Makefile.in:@ISMPI_FALSE@	unittest-energy4b.$(OBJEXT)
./unittests/Makefile.in:unittest_energy4b_OBJECTS = $(am_unittest_energy4b_OBJECTS)
./unittests/Makefile.in:unittest_energy4b_LDADD = $(LDADD)
./unittests/Makefile.in:@ISMPI_FALSE@unittest_energy4b_DEPENDENCIES =  \
./unittests/Makefile.in:am__unittest_energyff_SOURCES_DIST = unittest-main.cpp \
./unittests/Makefile.in:	unittest-energyff.cpp
./unittests/Makefile.in:@ISMPI_FALSE@am_unittest_energyff_OBJECTS = unittest-main.$(OBJEXT) \
./unittests/Makefile.in:@ISMPI_FALSE@	unittest-energyff.$(OBJEXT)
./unittests/Makefile.in:unittest_energyff_OBJECTS = $(am_unittest_energyff_OBJECTS)
./unittests/Makefile.in:unittest_energyff_LDADD = $(LDADD)
./unittests/Makefile.in:@ISMPI_FALSE@unittest_energyff_DEPENDENCIES =  \
./unittests/Makefile.in:	$(unittest_energy1b_SOURCES) $(unittest_energy2b_SOURCES) \
./unittests/Makefile.in:	$(unittest_energy3b_SOURCES) $(unittest_energy4b_SOURCES) \
./unittests/Makefile.in:	$(unittest_energyff_SOURCES) $(unittest_ffcalculators_SOURCES) \
./unittests/Makefile.in:	$(am__unittest_energy1b_SOURCES_DIST) \
./unittests/Makefile.in:	$(am__unittest_energy2b_SOURCES_DIST) \
./unittests/Makefile.in:	$(am__unittest_energy3b_SOURCES_DIST) \
./unittests/Makefile.in:	$(am__unittest_energy4b_SOURCES_DIST) \
./unittests/Makefile.in:	$(am__unittest_energyff_SOURCES_DIST) \
./unittests/Makefile.in:@ISMPI_FALSE@unittest_energy1b_SOURCES = unittest-main.cpp unittest-energy1b.cpp
./unittests/Makefile.in:@ISMPI_FALSE@unittest_energy2b_SOURCES = unittest-main.cpp unittest-energy2b.cpp
./unittests/Makefile.in:@ISMPI_FALSE@unittest_energy3b_SOURCES = unittest-main.cpp unittest-energy3b.cpp
./unittests/Makefile.in:@ISMPI_FALSE@unittest_energy4b_SOURCES = unittest-main.cpp unittest-energy4b.cpp
./unittests/Makefile.in:@ISMPI_FALSE@unittest_energyff_SOURCES = unittest-main.cpp unittest-energyff.cpp
./unittests/Makefile.in:unittest-energy1b$(EXEEXT): $(unittest_energy1b_OBJECTS) $(unittest_energy1b_DEPENDENCIES) $(EXTRA_unittest_energy1b_DEPENDENCIES) 
./unittests/Makefile.in:	@rm -f unittest-energy1b$(EXEEXT)
./unittests/Makefile.in:	$(AM_V_CXXLD)$(CXXLINK) $(unittest_energy1b_OBJECTS) $(unittest_energy1b_LDADD) $(LIBS)
./unittests/Makefile.in:unittest-energy2b$(EXEEXT): $(unittest_energy2b_OBJECTS) $(unittest_energy2b_DEPENDENCIES) $(EXTRA_unittest_energy2b_DEPENDENCIES) 
./unittests/Makefile.in:	@rm -f unittest-energy2b$(EXEEXT)
./unittests/Makefile.in:	$(AM_V_CXXLD)$(CXXLINK) $(unittest_energy2b_OBJECTS) $(unittest_energy2b_LDADD) $(LIBS)
./unittests/Makefile.in:unittest-energy3b$(EXEEXT): $(unittest_energy3b_OBJECTS) $(unittest_energy3b_DEPENDENCIES) $(EXTRA_unittest_energy3b_DEPENDENCIES) 
./unittests/Makefile.in:	@rm -f unittest-energy3b$(EXEEXT)
./unittests/Makefile.in:	$(AM_V_CXXLD)$(CXXLINK) $(unittest_energy3b_OBJECTS) $(unittest_energy3b_LDADD) $(LIBS)
./unittests/Makefile.in:unittest-energy4b$(EXEEXT): $(unittest_energy4b_OBJECTS) $(unittest_energy4b_DEPENDENCIES) $(EXTRA_unittest_energy4b_DEPENDENCIES) 
./unittests/Makefile.in:	@rm -f unittest-energy4b$(EXEEXT)
./unittests/Makefile.in:	$(AM_V_CXXLD)$(CXXLINK) $(unittest_energy4b_OBJECTS) $(unittest_energy4b_LDADD) $(LIBS)
./unittests/Makefile.in:unittest-energyff$(EXEEXT): $(unittest_energyff_OBJECTS) $(unittest_energyff_DEPENDENCIES) $(EXTRA_unittest_energyff_DEPENDENCIES) 
./unittests/Makefile.in:	@rm -f unittest-energyff$(EXEEXT)
./unittests/Makefile.in:	$(AM_V_CXXLD)$(CXXLINK) $(unittest_energyff_OBJECTS) $(unittest_energyff_LDADD) $(LIBS)
./unittests/Makefile.in:@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/unittest-energy1b.Po@am__quote@
./unittests/Makefile.in:@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/unittest-energy2b.Po@am__quote@
./unittests/Makefile.in:@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/unittest-energy3b.Po@am__quote@
./unittests/Makefile.in:@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/unittest-energy4b.Po@am__quote@
./unittests/Makefile.in:@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/unittest-energyff.Po@am__quote@
./unittests/Makefile.in:unittest-energy1b.log: unittest-energy1b$(EXEEXT)
./unittests/Makefile.in:	@p='unittest-energy1b$(EXEEXT)'; \
./unittests/Makefile.in:	b='unittest-energy1b'; \
./unittests/Makefile.in:unittest-energy2b.log: unittest-energy2b$(EXEEXT)
./unittests/Makefile.in:	@p='unittest-energy2b$(EXEEXT)'; \
./unittests/Makefile.in:	b='unittest-energy2b'; \
./unittests/Makefile.in:unittest-energy3b.log: unittest-energy3b$(EXEEXT)
./unittests/Makefile.in:	@p='unittest-energy3b$(EXEEXT)'; \
./unittests/Makefile.in:	b='unittest-energy3b'; \
./unittests/Makefile.in:unittest-energy4b.log: unittest-energy4b$(EXEEXT)
./unittests/Makefile.in:	@p='unittest-energy4b$(EXEEXT)'; \
./unittests/Makefile.in:	b='unittest-energy4b'; \
./unittests/Makefile.in:unittest-energyff.log: unittest-energyff$(EXEEXT)
./unittests/Makefile.in:	@p='unittest-energyff$(EXEEXT)'; \
./unittests/Makefile.in:	b='unittest-energyff'; \
./unittests/Makefile:#	unittest-energy1b$(EXEEXT) \
./unittests/Makefile:#	unittest-energy2b$(EXEEXT) \
./unittests/Makefile:#	unittest-energy3b$(EXEEXT) \
./unittests/Makefile:#	unittest-energy4b$(EXEEXT) \
./unittests/Makefile:#	unittest-energyff$(EXEEXT) \
./unittests/Makefile:#	unittest-energy1b$(EXEEXT) \
./unittests/Makefile:#	unittest-energy2b$(EXEEXT) \
./unittests/Makefile:#	unittest-energy3b$(EXEEXT) \
./unittests/Makefile:#	unittest-energy4b$(EXEEXT) \
./unittests/Makefile:#	unittest-energyff$(EXEEXT) \
./unittests/Makefile:am__unittest_energy1b_SOURCES_DIST = unittest-main.cpp \
./unittests/Makefile:	unittest-energy1b.cpp
./unittests/Makefile:#am_unittest_energy1b_OBJECTS = unittest-main.$(OBJEXT) \
./unittests/Makefile:#	unittest-energy1b.$(OBJEXT)
./unittests/Makefile:unittest_energy1b_OBJECTS = $(am_unittest_energy1b_OBJECTS)
./unittests/Makefile:unittest_energy1b_LDADD = $(LDADD)
./unittests/Makefile:#unittest_energy1b_DEPENDENCIES =  \
./unittests/Makefile:am__unittest_energy2b_SOURCES_DIST = unittest-main.cpp \
./unittests/Makefile:	unittest-energy2b.cpp
./unittests/Makefile:#am_unittest_energy2b_OBJECTS = unittest-main.$(OBJEXT) \
./unittests/Makefile:#	unittest-energy2b.$(OBJEXT)
./unittests/Makefile:unittest_energy2b_OBJECTS = $(am_unittest_energy2b_OBJECTS)
./unittests/Makefile:unittest_energy2b_LDADD = $(LDADD)
./unittests/Makefile:#unittest_energy2b_DEPENDENCIES =  \
./unittests/Makefile:am__unittest_energy3b_SOURCES_DIST = unittest-main.cpp \
./unittests/Makefile:	unittest-energy3b.cpp
./unittests/Makefile:#am_unittest_energy3b_OBJECTS = unittest-main.$(OBJEXT) \
./unittests/Makefile:#	unittest-energy3b.$(OBJEXT)
./unittests/Makefile:unittest_energy3b_OBJECTS = $(am_unittest_energy3b_OBJECTS)
./unittests/Makefile:unittest_energy3b_LDADD = $(LDADD)
./unittests/Makefile:#unittest_energy3b_DEPENDENCIES =  \
./unittests/Makefile:am__unittest_energy4b_SOURCES_DIST = unittest-main.cpp \
./unittests/Makefile:	unittest-energy4b.cpp
./unittests/Makefile:#am_unittest_energy4b_OBJECTS = unittest-main.$(OBJEXT) \
./unittests/Makefile:#	unittest-energy4b.$(OBJEXT)
./unittests/Makefile:unittest_energy4b_OBJECTS = $(am_unittest_energy4b_OBJECTS)
./unittests/Makefile:unittest_energy4b_LDADD = $(LDADD)
./unittests/Makefile:#unittest_energy4b_DEPENDENCIES =  \
./unittests/Makefile:am__unittest_energyff_SOURCES_DIST = unittest-main.cpp \
./unittests/Makefile:	unittest-energyff.cpp
./unittests/Makefile:#am_unittest_energyff_OBJECTS = unittest-main.$(OBJEXT) \
./unittests/Makefile:#	unittest-energyff.$(OBJEXT)
./unittests/Makefile:unittest_energyff_OBJECTS = $(am_unittest_energyff_OBJECTS)
./unittests/Makefile:unittest_energyff_LDADD = $(LDADD)
./unittests/Makefile:#unittest_energyff_DEPENDENCIES =  \
./unittests/Makefile:	$(unittest_energy1b_SOURCES) $(unittest_energy2b_SOURCES) \
./unittests/Makefile:	$(unittest_energy3b_SOURCES) $(unittest_energy4b_SOURCES) \
./unittests/Makefile:	$(unittest_energyff_SOURCES) $(unittest_ffcalculators_SOURCES) \
./unittests/Makefile:	$(am__unittest_energy1b_SOURCES_DIST) \
./unittests/Makefile:	$(am__unittest_energy2b_SOURCES_DIST) \
./unittests/Makefile:	$(am__unittest_energy3b_SOURCES_DIST) \
./unittests/Makefile:	$(am__unittest_energy4b_SOURCES_DIST) \
./unittests/Makefile:	$(am__unittest_energyff_SOURCES_DIST) \
./unittests/Makefile:#unittest_energy1b_SOURCES = unittest-main.cpp unittest-energy1b.cpp
./unittests/Makefile:#unittest_energy2b_SOURCES = unittest-main.cpp unittest-energy2b.cpp
./unittests/Makefile:#unittest_energy3b_SOURCES = unittest-main.cpp unittest-energy3b.cpp
./unittests/Makefile:#unittest_energy4b_SOURCES = unittest-main.cpp unittest-energy4b.cpp
./unittests/Makefile:#unittest_energyff_SOURCES = unittest-main.cpp unittest-energyff.cpp
./unittests/Makefile:unittest-energy1b$(EXEEXT): $(unittest_energy1b_OBJECTS) $(unittest_energy1b_DEPENDENCIES) $(EXTRA_unittest_energy1b_DEPENDENCIES) 
./unittests/Makefile:	@rm -f unittest-energy1b$(EXEEXT)
./unittests/Makefile:	$(AM_V_CXXLD)$(CXXLINK) $(unittest_energy1b_OBJECTS) $(unittest_energy1b_LDADD) $(LIBS)
./unittests/Makefile:unittest-energy2b$(EXEEXT): $(unittest_energy2b_OBJECTS) $(unittest_energy2b_DEPENDENCIES) $(EXTRA_unittest_energy2b_DEPENDENCIES) 
./unittests/Makefile:	@rm -f unittest-energy2b$(EXEEXT)
./unittests/Makefile:	$(AM_V_CXXLD)$(CXXLINK) $(unittest_energy2b_OBJECTS) $(unittest_energy2b_LDADD) $(LIBS)
./unittests/Makefile:unittest-energy3b$(EXEEXT): $(unittest_energy3b_OBJECTS) $(unittest_energy3b_DEPENDENCIES) $(EXTRA_unittest_energy3b_DEPENDENCIES) 
./unittests/Makefile:	@rm -f unittest-energy3b$(EXEEXT)
./unittests/Makefile:	$(AM_V_CXXLD)$(CXXLINK) $(unittest_energy3b_OBJECTS) $(unittest_energy3b_LDADD) $(LIBS)
./unittests/Makefile:unittest-energy4b$(EXEEXT): $(unittest_energy4b_OBJECTS) $(unittest_energy4b_DEPENDENCIES) $(EXTRA_unittest_energy4b_DEPENDENCIES) 
./unittests/Makefile:	@rm -f unittest-energy4b$(EXEEXT)
./unittests/Makefile:	$(AM_V_CXXLD)$(CXXLINK) $(unittest_energy4b_OBJECTS) $(unittest_energy4b_LDADD) $(LIBS)
./unittests/Makefile:unittest-energyff$(EXEEXT): $(unittest_energyff_OBJECTS) $(unittest_energyff_DEPENDENCIES) $(EXTRA_unittest_energyff_DEPENDENCIES) 
./unittests/Makefile:	@rm -f unittest-energyff$(EXEEXT)
./unittests/Makefile:	$(AM_V_CXXLD)$(CXXLINK) $(unittest_energyff_OBJECTS) $(unittest_energyff_LDADD) $(LIBS)
./unittests/Makefile:include ./$(DEPDIR)/unittest-energy1b.Po
./unittests/Makefile:include ./$(DEPDIR)/unittest-energy2b.Po
./unittests/Makefile:include ./$(DEPDIR)/unittest-energy3b.Po
./unittests/Makefile:include ./$(DEPDIR)/unittest-energy4b.Po
./unittests/Makefile:include ./$(DEPDIR)/unittest-energyff.Po
./unittests/Makefile:unittest-energy1b.log: unittest-energy1b$(EXEEXT)
./unittests/Makefile:	@p='unittest-energy1b$(EXEEXT)'; \
./unittests/Makefile:	b='unittest-energy1b'; \
./unittests/Makefile:unittest-energy2b.log: unittest-energy2b$(EXEEXT)
./unittests/Makefile:	@p='unittest-energy2b$(EXEEXT)'; \
./unittests/Makefile:	b='unittest-energy2b'; \
./unittests/Makefile:unittest-energy3b.log: unittest-energy3b$(EXEEXT)
./unittests/Makefile:	@p='unittest-energy3b$(EXEEXT)'; \
./unittests/Makefile:	b='unittest-energy3b'; \
./unittests/Makefile:unittest-energy4b.log: unittest-energy4b$(EXEEXT)
./unittests/Makefile:	@p='unittest-energy4b$(EXEEXT)'; \
./unittests/Makefile:	b='unittest-energy4b'; \
./unittests/Makefile:unittest-energyff.log: unittest-energyff$(EXEEXT)
./unittests/Makefile:	@p='unittest-energyff$(EXEEXT)'; \
./unittests/Makefile:	b='unittest-energyff'; \
